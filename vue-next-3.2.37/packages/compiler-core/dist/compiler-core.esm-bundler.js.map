{"version":3,"file":"compiler-core.esm-bundler.js","sources":["../src/errors.ts","../src/runtimeHelpers.ts","../src/ast.ts","../src/utils.ts","../src/compat/compatConfig.ts","../src/parse.ts","../src/transforms/hoistStatic.ts","../src/transform.ts","../src/codegen.ts","../src/babelUtils.ts","../src/validateExpression.ts","../src/transforms/transformExpression.ts","../src/transforms/vModel.ts","../src/transforms/vOn.ts","../src/transforms/vBind.ts","../src/transforms/noopDirectiveTransform.ts","../src/transforms/vFor.ts","../src/transforms/vSlot.ts","../src/transforms/transformElement.ts","../../shared/src/index.ts","../src/transforms/transformSlotOutlet.ts","../src/transforms/vIf.ts","../src/transforms/transformText.ts","../src/transforms/vOnce.ts","../src/compat/transformFilter.ts","../src/transforms/vMemo.ts","../src/compile.ts"],"sourcesContent":["import { SourceLocation } from './ast'\r\n\r\nexport interface CompilerError extends SyntaxError {\r\n  code: number | string\r\n  loc?: SourceLocation\r\n}\r\n\r\nexport interface CoreCompilerError extends CompilerError {\r\n  code: ErrorCodes\r\n}\r\n\r\nexport function defaultOnError(error: CompilerError) {\r\n  throw error\r\n}\r\n\r\nexport function defaultOnWarn(msg: CompilerError) {\r\n  __DEV__ && console.warn(`[Vue warn] ${msg.message}`)\r\n}\r\n\r\ntype InferCompilerError<T> = T extends ErrorCodes\r\n  ? CoreCompilerError\r\n  : CompilerError\r\n\r\nexport function createCompilerError<T extends number>(\r\n  code: T,\r\n  loc?: SourceLocation,\r\n  messages?: { [code: number]: string },\r\n  additionalMessage?: string\r\n): InferCompilerError<T> {\r\n  const msg =\r\n    __DEV__ || !__BROWSER__\r\n      ? (messages || errorMessages)[code] + (additionalMessage || ``)\r\n      : code\r\n  const error = new SyntaxError(String(msg)) as InferCompilerError<T>\r\n  error.code = code\r\n  error.loc = loc\r\n  return error\r\n}\r\n\r\nexport const enum ErrorCodes {\r\n  // parse errors\r\n  ABRUPT_CLOSING_OF_EMPTY_COMMENT,\r\n  CDATA_IN_HTML_CONTENT,\r\n  DUPLICATE_ATTRIBUTE,\r\n  END_TAG_WITH_ATTRIBUTES,\r\n  END_TAG_WITH_TRAILING_SOLIDUS,\r\n  EOF_BEFORE_TAG_NAME,\r\n  EOF_IN_CDATA,\r\n  EOF_IN_COMMENT,\r\n  EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT,\r\n  EOF_IN_TAG,\r\n  INCORRECTLY_CLOSED_COMMENT,\r\n  INCORRECTLY_OPENED_COMMENT,\r\n  INVALID_FIRST_CHARACTER_OF_TAG_NAME,\r\n  MISSING_ATTRIBUTE_VALUE,\r\n  MISSING_END_TAG_NAME,\r\n  MISSING_WHITESPACE_BETWEEN_ATTRIBUTES,\r\n  NESTED_COMMENT,\r\n  UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME,\r\n  UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE,\r\n  UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME,\r\n  UNEXPECTED_NULL_CHARACTER,\r\n  UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME,\r\n  UNEXPECTED_SOLIDUS_IN_TAG,\r\n\r\n  // Vue-specific parse errors\r\n  X_INVALID_END_TAG,\r\n  X_MISSING_END_TAG,\r\n  X_MISSING_INTERPOLATION_END,\r\n  X_MISSING_DIRECTIVE_NAME,\r\n  X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END,\r\n\r\n  // transform errors\r\n  X_V_IF_NO_EXPRESSION,\r\n  X_V_IF_SAME_KEY,\r\n  X_V_ELSE_NO_ADJACENT_IF,\r\n  X_V_FOR_NO_EXPRESSION,\r\n  X_V_FOR_MALFORMED_EXPRESSION,\r\n  X_V_FOR_TEMPLATE_KEY_PLACEMENT,\r\n  X_V_BIND_NO_EXPRESSION,\r\n  X_V_ON_NO_EXPRESSION,\r\n  X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET,\r\n  X_V_SLOT_MIXED_SLOT_USAGE,\r\n  X_V_SLOT_DUPLICATE_SLOT_NAMES,\r\n  X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN,\r\n  X_V_SLOT_MISPLACED,\r\n  X_V_MODEL_NO_EXPRESSION,\r\n  X_V_MODEL_MALFORMED_EXPRESSION,\r\n  X_V_MODEL_ON_SCOPE_VARIABLE,\r\n  X_INVALID_EXPRESSION,\r\n  X_KEEP_ALIVE_INVALID_CHILDREN,\r\n\r\n  // generic errors\r\n  X_PREFIX_ID_NOT_SUPPORTED,\r\n  X_MODULE_MODE_NOT_SUPPORTED,\r\n  X_CACHE_HANDLER_NOT_SUPPORTED,\r\n  X_SCOPE_ID_NOT_SUPPORTED,\r\n\r\n  // Special value for higher-order compilers to pick up the last code\r\n  // to avoid collision of error codes. This should always be kept as the last\r\n  // item.\r\n  __EXTEND_POINT__\r\n}\r\n\r\nexport const errorMessages: Record<ErrorCodes, string> = {\r\n  // parse errors\r\n  [ErrorCodes.ABRUPT_CLOSING_OF_EMPTY_COMMENT]: 'Illegal comment.',\r\n  [ErrorCodes.CDATA_IN_HTML_CONTENT]:\r\n    'CDATA section is allowed only in XML context.',\r\n  [ErrorCodes.DUPLICATE_ATTRIBUTE]: 'Duplicate attribute.',\r\n  [ErrorCodes.END_TAG_WITH_ATTRIBUTES]: 'End tag cannot have attributes.',\r\n  [ErrorCodes.END_TAG_WITH_TRAILING_SOLIDUS]: \"Illegal '/' in tags.\",\r\n  [ErrorCodes.EOF_BEFORE_TAG_NAME]: 'Unexpected EOF in tag.',\r\n  [ErrorCodes.EOF_IN_CDATA]: 'Unexpected EOF in CDATA section.',\r\n  [ErrorCodes.EOF_IN_COMMENT]: 'Unexpected EOF in comment.',\r\n  [ErrorCodes.EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT]:\r\n    'Unexpected EOF in script.',\r\n  [ErrorCodes.EOF_IN_TAG]: 'Unexpected EOF in tag.',\r\n  [ErrorCodes.INCORRECTLY_CLOSED_COMMENT]: 'Incorrectly closed comment.',\r\n  [ErrorCodes.INCORRECTLY_OPENED_COMMENT]: 'Incorrectly opened comment.',\r\n  [ErrorCodes.INVALID_FIRST_CHARACTER_OF_TAG_NAME]:\r\n    \"Illegal tag name. Use '&lt;' to print '<'.\",\r\n  [ErrorCodes.MISSING_ATTRIBUTE_VALUE]: 'Attribute value was expected.',\r\n  [ErrorCodes.MISSING_END_TAG_NAME]: 'End tag name was expected.',\r\n  [ErrorCodes.MISSING_WHITESPACE_BETWEEN_ATTRIBUTES]:\r\n    'Whitespace was expected.',\r\n  [ErrorCodes.NESTED_COMMENT]: \"Unexpected '<!--' in comment.\",\r\n  [ErrorCodes.UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME]:\r\n    'Attribute name cannot contain U+0022 (\"), U+0027 (\\'), and U+003C (<).',\r\n  [ErrorCodes.UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE]:\r\n    'Unquoted attribute value cannot contain U+0022 (\"), U+0027 (\\'), U+003C (<), U+003D (=), and U+0060 (`).',\r\n  [ErrorCodes.UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME]:\r\n    \"Attribute name cannot start with '='.\",\r\n  [ErrorCodes.UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME]:\r\n    \"'<?' is allowed only in XML context.\",\r\n  [ErrorCodes.UNEXPECTED_NULL_CHARACTER]: `Unexpected null character.`,\r\n  [ErrorCodes.UNEXPECTED_SOLIDUS_IN_TAG]: \"Illegal '/' in tags.\",\r\n\r\n  // Vue-specific parse errors\r\n  [ErrorCodes.X_INVALID_END_TAG]: 'Invalid end tag.',\r\n  [ErrorCodes.X_MISSING_END_TAG]: 'Element is missing end tag.',\r\n  [ErrorCodes.X_MISSING_INTERPOLATION_END]:\r\n    'Interpolation end sign was not found.',\r\n  [ErrorCodes.X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END]:\r\n    'End bracket for dynamic directive argument was not found. ' +\r\n    'Note that dynamic directive argument cannot contain spaces.',\r\n  [ErrorCodes.X_MISSING_DIRECTIVE_NAME]: 'Legal directive name was expected.',\r\n\r\n  // transform errors\r\n  [ErrorCodes.X_V_IF_NO_EXPRESSION]: `v-if/v-else-if is missing expression.`,\r\n  [ErrorCodes.X_V_IF_SAME_KEY]: `v-if/else branches must use unique keys.`,\r\n  [ErrorCodes.X_V_ELSE_NO_ADJACENT_IF]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,\r\n  [ErrorCodes.X_V_FOR_NO_EXPRESSION]: `v-for is missing expression.`,\r\n  [ErrorCodes.X_V_FOR_MALFORMED_EXPRESSION]: `v-for has invalid expression.`,\r\n  [ErrorCodes.X_V_FOR_TEMPLATE_KEY_PLACEMENT]: `<template v-for> key should be placed on the <template> tag.`,\r\n  [ErrorCodes.X_V_BIND_NO_EXPRESSION]: `v-bind is missing expression.`,\r\n  [ErrorCodes.X_V_ON_NO_EXPRESSION]: `v-on is missing expression.`,\r\n  [ErrorCodes.X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET]: `Unexpected custom directive on <slot> outlet.`,\r\n  [ErrorCodes.X_V_SLOT_MIXED_SLOT_USAGE]:\r\n    `Mixed v-slot usage on both the component and nested <template>.` +\r\n    `When there are multiple named slots, all slots should use <template> ` +\r\n    `syntax to avoid scope ambiguity.`,\r\n  [ErrorCodes.X_V_SLOT_DUPLICATE_SLOT_NAMES]: `Duplicate slot names found. `,\r\n  [ErrorCodes.X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN]:\r\n    `Extraneous children found when component already has explicitly named ` +\r\n    `default slot. These children will be ignored.`,\r\n  [ErrorCodes.X_V_SLOT_MISPLACED]: `v-slot can only be used on components or <template> tags.`,\r\n  [ErrorCodes.X_V_MODEL_NO_EXPRESSION]: `v-model is missing expression.`,\r\n  [ErrorCodes.X_V_MODEL_MALFORMED_EXPRESSION]: `v-model value must be a valid JavaScript member expression.`,\r\n  [ErrorCodes.X_V_MODEL_ON_SCOPE_VARIABLE]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\r\n  [ErrorCodes.X_INVALID_EXPRESSION]: `Error parsing JavaScript expression: `,\r\n  [ErrorCodes.X_KEEP_ALIVE_INVALID_CHILDREN]: `<KeepAlive> expects exactly one child component.`,\r\n\r\n  // generic errors\r\n  [ErrorCodes.X_PREFIX_ID_NOT_SUPPORTED]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\r\n  [ErrorCodes.X_MODULE_MODE_NOT_SUPPORTED]: `ES module mode is not supported in this build of compiler.`,\r\n  [ErrorCodes.X_CACHE_HANDLER_NOT_SUPPORTED]: `\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.`,\r\n  [ErrorCodes.X_SCOPE_ID_NOT_SUPPORTED]: `\"scopeId\" option is only supported in module mode.`,\r\n\r\n  // just to fulfill types\r\n  [ErrorCodes.__EXTEND_POINT__]: ``\r\n}\r\n","export const FRAGMENT = Symbol(__DEV__ ? `Fragment` : ``)\r\nexport const TELEPORT = Symbol(__DEV__ ? `Teleport` : ``)\r\nexport const SUSPENSE = Symbol(__DEV__ ? `Suspense` : ``)\r\nexport const KEEP_ALIVE = Symbol(__DEV__ ? `KeepAlive` : ``)\r\nexport const BASE_TRANSITION = Symbol(__DEV__ ? `BaseTransition` : ``)\r\nexport const OPEN_BLOCK = Symbol(__DEV__ ? `openBlock` : ``)\r\nexport const CREATE_BLOCK = Symbol(__DEV__ ? `createBlock` : ``)\r\nexport const CREATE_ELEMENT_BLOCK = Symbol(__DEV__ ? `createElementBlock` : ``)\r\nexport const CREATE_VNODE = Symbol(__DEV__ ? `createVNode` : ``)\r\nexport const CREATE_ELEMENT_VNODE = Symbol(__DEV__ ? `createElementVNode` : ``)\r\nexport const CREATE_COMMENT = Symbol(__DEV__ ? `createCommentVNode` : ``)\r\nexport const CREATE_TEXT = Symbol(__DEV__ ? `createTextVNode` : ``)\r\nexport const CREATE_STATIC = Symbol(__DEV__ ? `createStaticVNode` : ``)\r\nexport const RESOLVE_COMPONENT = Symbol(__DEV__ ? `resolveComponent` : ``)\r\nexport const RESOLVE_DYNAMIC_COMPONENT = Symbol(\r\n  __DEV__ ? `resolveDynamicComponent` : ``\r\n)\r\nexport const RESOLVE_DIRECTIVE = Symbol(__DEV__ ? `resolveDirective` : ``)\r\nexport const RESOLVE_FILTER = Symbol(__DEV__ ? `resolveFilter` : ``)\r\nexport const WITH_DIRECTIVES = Symbol(__DEV__ ? `withDirectives` : ``)\r\nexport const RENDER_LIST = Symbol(__DEV__ ? `renderList` : ``)\r\nexport const RENDER_SLOT = Symbol(__DEV__ ? `renderSlot` : ``)\r\nexport const CREATE_SLOTS = Symbol(__DEV__ ? `createSlots` : ``)\r\nexport const TO_DISPLAY_STRING = Symbol(__DEV__ ? `toDisplayString` : ``)\r\nexport const MERGE_PROPS = Symbol(__DEV__ ? `mergeProps` : ``)\r\nexport const NORMALIZE_CLASS = Symbol(__DEV__ ? `normalizeClass` : ``)\r\nexport const NORMALIZE_STYLE = Symbol(__DEV__ ? `normalizeStyle` : ``)\r\nexport const NORMALIZE_PROPS = Symbol(__DEV__ ? `normalizeProps` : ``)\r\nexport const GUARD_REACTIVE_PROPS = Symbol(__DEV__ ? `guardReactiveProps` : ``)\r\nexport const TO_HANDLERS = Symbol(__DEV__ ? `toHandlers` : ``)\r\nexport const CAMELIZE = Symbol(__DEV__ ? `camelize` : ``)\r\nexport const CAPITALIZE = Symbol(__DEV__ ? `capitalize` : ``)\r\nexport const TO_HANDLER_KEY = Symbol(__DEV__ ? `toHandlerKey` : ``)\r\nexport const SET_BLOCK_TRACKING = Symbol(__DEV__ ? `setBlockTracking` : ``)\r\nexport const PUSH_SCOPE_ID = Symbol(__DEV__ ? `pushScopeId` : ``)\r\nexport const POP_SCOPE_ID = Symbol(__DEV__ ? `popScopeId` : ``)\r\nexport const WITH_CTX = Symbol(__DEV__ ? `withCtx` : ``)\r\nexport const UNREF = Symbol(__DEV__ ? `unref` : ``)\r\nexport const IS_REF = Symbol(__DEV__ ? `isRef` : ``)\r\nexport const WITH_MEMO = Symbol(__DEV__ ? `withMemo` : ``)\r\nexport const IS_MEMO_SAME = Symbol(__DEV__ ? `isMemoSame` : ``)\r\n\r\n// Name mapping for runtime helpers that need to be imported from 'vue' in\r\n// generated code. Make sure these are correctly exported in the runtime!\r\n// Using `any` here because TS doesn't allow symbols as index type.\r\nexport const helperNameMap: any = {\r\n  [FRAGMENT]: `Fragment`,\r\n  [TELEPORT]: `Teleport`,\r\n  [SUSPENSE]: `Suspense`,\r\n  [KEEP_ALIVE]: `KeepAlive`,\r\n  [BASE_TRANSITION]: `BaseTransition`,\r\n  [OPEN_BLOCK]: `openBlock`,\r\n  [CREATE_BLOCK]: `createBlock`,\r\n  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,\r\n  [CREATE_VNODE]: `createVNode`,\r\n  [CREATE_ELEMENT_VNODE]: `createElementVNode`,\r\n  [CREATE_COMMENT]: `createCommentVNode`,\r\n  [CREATE_TEXT]: `createTextVNode`,\r\n  [CREATE_STATIC]: `createStaticVNode`,\r\n  [RESOLVE_COMPONENT]: `resolveComponent`,\r\n  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\r\n  [RESOLVE_DIRECTIVE]: `resolveDirective`,\r\n  [RESOLVE_FILTER]: `resolveFilter`,\r\n  [WITH_DIRECTIVES]: `withDirectives`,\r\n  [RENDER_LIST]: `renderList`,\r\n  [RENDER_SLOT]: `renderSlot`,\r\n  [CREATE_SLOTS]: `createSlots`,\r\n  [TO_DISPLAY_STRING]: `toDisplayString`,\r\n  [MERGE_PROPS]: `mergeProps`,\r\n  [NORMALIZE_CLASS]: `normalizeClass`,\r\n  [NORMALIZE_STYLE]: `normalizeStyle`,\r\n  [NORMALIZE_PROPS]: `normalizeProps`,\r\n  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,\r\n  [TO_HANDLERS]: `toHandlers`,\r\n  [CAMELIZE]: `camelize`,\r\n  [CAPITALIZE]: `capitalize`,\r\n  [TO_HANDLER_KEY]: `toHandlerKey`,\r\n  [SET_BLOCK_TRACKING]: `setBlockTracking`,\r\n  [PUSH_SCOPE_ID]: `pushScopeId`,\r\n  [POP_SCOPE_ID]: `popScopeId`,\r\n  [WITH_CTX]: `withCtx`,\r\n  [UNREF]: `unref`,\r\n  [IS_REF]: `isRef`,\r\n  [WITH_MEMO]: `withMemo`,\r\n  [IS_MEMO_SAME]: `isMemoSame`\r\n}\r\n\r\nexport function registerRuntimeHelpers(helpers: any) {\r\n  Object.getOwnPropertySymbols(helpers).forEach(s => {\r\n    helperNameMap[s] = helpers[s]\r\n  })\r\n}\r\n","import { isString } from '@vue/shared'\r\nimport { ForParseResult } from './transforms/vFor'\r\nimport {\r\n  RENDER_SLOT,\r\n  CREATE_SLOTS,\r\n  RENDER_LIST,\r\n  OPEN_BLOCK,\r\n  FRAGMENT,\r\n  WITH_DIRECTIVES,\r\n  WITH_MEMO\r\n} from './runtimeHelpers'\r\nimport { PropsExpression } from './transforms/transformElement'\r\nimport { ImportItem, TransformContext } from './transform'\r\nimport { getVNodeBlockHelper, getVNodeHelper } from './utils'\r\n\r\n// Vue template is a platform-agnostic superset of HTML (syntax only).\r\n// More namespaces like SVG and MathML are declared by platform specific\r\n// compilers.\r\nexport type Namespace = number\r\n\r\nexport const enum Namespaces {\r\n  HTML\r\n}\r\n\r\nexport const enum NodeTypes {\r\n  ROOT,\r\n  ELEMENT,\r\n  TEXT,\r\n  COMMENT,\r\n  SIMPLE_EXPRESSION,\r\n  INTERPOLATION,\r\n  ATTRIBUTE,\r\n  DIRECTIVE,\r\n  // containers\r\n  COMPOUND_EXPRESSION,\r\n  IF,\r\n  IF_BRANCH,\r\n  FOR,\r\n  TEXT_CALL,\r\n  // codegen\r\n  VNODE_CALL,\r\n  JS_CALL_EXPRESSION,\r\n  JS_OBJECT_EXPRESSION,\r\n  JS_PROPERTY,\r\n  JS_ARRAY_EXPRESSION,\r\n  JS_FUNCTION_EXPRESSION,\r\n  JS_CONDITIONAL_EXPRESSION,\r\n  JS_CACHE_EXPRESSION,\r\n\r\n  // ssr codegen\r\n  JS_BLOCK_STATEMENT,\r\n  JS_TEMPLATE_LITERAL,\r\n  JS_IF_STATEMENT,\r\n  JS_ASSIGNMENT_EXPRESSION,\r\n  JS_SEQUENCE_EXPRESSION,\r\n  JS_RETURN_STATEMENT\r\n}\r\n\r\nexport const enum ElementTypes {\r\n  ELEMENT,\r\n  COMPONENT,\r\n  SLOT,\r\n  TEMPLATE\r\n}\r\n\r\nexport interface Node {\r\n  type: NodeTypes\r\n  loc: SourceLocation\r\n}\r\n\r\n// The node's range. The `start` is inclusive and `end` is exclusive.\r\n// [start, end)\r\nexport interface SourceLocation {\r\n  start: Position\r\n  end: Position\r\n  source: string\r\n}\r\n\r\nexport interface Position {\r\n  offset: number // from start of file\r\n  line: number\r\n  column: number\r\n}\r\n\r\nexport type ParentNode = RootNode | ElementNode | IfBranchNode | ForNode\r\n\r\nexport type ExpressionNode = SimpleExpressionNode | CompoundExpressionNode\r\n\r\nexport type TemplateChildNode =\r\n  | ElementNode\r\n  | InterpolationNode\r\n  | CompoundExpressionNode\r\n  | TextNode\r\n  | CommentNode\r\n  | IfNode\r\n  | IfBranchNode\r\n  | ForNode\r\n  | TextCallNode\r\n\r\nexport interface RootNode extends Node {\r\n  type: NodeTypes.ROOT\r\n  children: TemplateChildNode[]\r\n  helpers: symbol[]\r\n  components: string[]\r\n  directives: string[]\r\n  hoists: (JSChildNode | null)[]\r\n  imports: ImportItem[]\r\n  cached: number\r\n  temps: number\r\n  ssrHelpers?: symbol[]\r\n  codegenNode?: TemplateChildNode | JSChildNode | BlockStatement\r\n\r\n  // v2 compat only\r\n  filters?: string[]\r\n}\r\n\r\nexport type ElementNode =\r\n  | PlainElementNode\r\n  | ComponentNode\r\n  | SlotOutletNode\r\n  | TemplateNode\r\n\r\nexport interface BaseElementNode extends Node {\r\n  type: NodeTypes.ELEMENT\r\n  ns: Namespace\r\n  tag: string\r\n  tagType: ElementTypes\r\n  isSelfClosing: boolean\r\n  props: Array<AttributeNode | DirectiveNode>\r\n  children: TemplateChildNode[]\r\n}\r\n\r\nexport interface PlainElementNode extends BaseElementNode {\r\n  tagType: ElementTypes.ELEMENT\r\n  codegenNode:\r\n    | VNodeCall\r\n    | SimpleExpressionNode // when hoisted\r\n    | CacheExpression // when cached by v-once\r\n    | MemoExpression // when cached by v-memo\r\n    | undefined\r\n  ssrCodegenNode?: TemplateLiteral\r\n}\r\n\r\nexport interface ComponentNode extends BaseElementNode {\r\n  tagType: ElementTypes.COMPONENT\r\n  codegenNode:\r\n    | VNodeCall\r\n    | CacheExpression // when cached by v-once\r\n    | MemoExpression // when cached by v-memo\r\n    | undefined\r\n  ssrCodegenNode?: CallExpression\r\n}\r\n\r\nexport interface SlotOutletNode extends BaseElementNode {\r\n  tagType: ElementTypes.SLOT\r\n  codegenNode:\r\n    | RenderSlotCall\r\n    | CacheExpression // when cached by v-once\r\n    | undefined\r\n  ssrCodegenNode?: CallExpression\r\n}\r\n\r\nexport interface TemplateNode extends BaseElementNode {\r\n  tagType: ElementTypes.TEMPLATE\r\n  // TemplateNode is a container type that always gets compiled away\r\n  codegenNode: undefined\r\n}\r\n\r\nexport interface TextNode extends Node {\r\n  type: NodeTypes.TEXT\r\n  content: string\r\n}\r\n\r\nexport interface CommentNode extends Node {\r\n  type: NodeTypes.COMMENT\r\n  content: string\r\n}\r\n\r\nexport interface AttributeNode extends Node {\r\n  type: NodeTypes.ATTRIBUTE\r\n  name: string\r\n  value: TextNode | undefined\r\n}\r\n\r\nexport interface DirectiveNode extends Node {\r\n  type: NodeTypes.DIRECTIVE\r\n  name: string\r\n  exp: ExpressionNode | undefined\r\n  arg: ExpressionNode | undefined\r\n  modifiers: string[]\r\n  /**\r\n   * optional property to cache the expression parse result for v-for\r\n   */\r\n  parseResult?: ForParseResult\r\n}\r\n\r\n/**\r\n * Static types have several levels.\r\n * Higher levels implies lower levels. e.g. a node that can be stringified\r\n * can always be hoisted and skipped for patch.\r\n */\r\nexport const enum ConstantTypes {\r\n  NOT_CONSTANT = 0,\r\n  CAN_SKIP_PATCH,\r\n  CAN_HOIST,\r\n  CAN_STRINGIFY\r\n}\r\n\r\nexport interface SimpleExpressionNode extends Node {\r\n  type: NodeTypes.SIMPLE_EXPRESSION\r\n  content: string\r\n  isStatic: boolean\r\n  constType: ConstantTypes\r\n  /**\r\n   * Indicates this is an identifier for a hoist vnode call and points to the\r\n   * hoisted node.\r\n   */\r\n  hoisted?: JSChildNode\r\n  /**\r\n   * an expression parsed as the params of a function will track\r\n   * the identifiers declared inside the function body.\r\n   */\r\n  identifiers?: string[]\r\n  isHandlerKey?: boolean\r\n}\r\n\r\nexport interface InterpolationNode extends Node {\r\n  type: NodeTypes.INTERPOLATION\r\n  content: ExpressionNode\r\n}\r\n\r\nexport interface CompoundExpressionNode extends Node {\r\n  type: NodeTypes.COMPOUND_EXPRESSION\r\n  children: (\r\n    | SimpleExpressionNode\r\n    | CompoundExpressionNode\r\n    | InterpolationNode\r\n    | TextNode\r\n    | string\r\n    | symbol\r\n  )[]\r\n\r\n  /**\r\n   * an expression parsed as the params of a function will track\r\n   * the identifiers declared inside the function body.\r\n   */\r\n  identifiers?: string[]\r\n  isHandlerKey?: boolean\r\n}\r\n\r\nexport interface IfNode extends Node {\r\n  type: NodeTypes.IF\r\n  branches: IfBranchNode[]\r\n  codegenNode?: IfConditionalExpression | CacheExpression // <div v-if v-once>\r\n}\r\n\r\nexport interface IfBranchNode extends Node {\r\n  type: NodeTypes.IF_BRANCH\r\n  condition: ExpressionNode | undefined // else\r\n  children: TemplateChildNode[]\r\n  userKey?: AttributeNode | DirectiveNode\r\n  isTemplateIf?: boolean\r\n}\r\n\r\nexport interface ForNode extends Node {\r\n  type: NodeTypes.FOR\r\n  source: ExpressionNode\r\n  valueAlias: ExpressionNode | undefined\r\n  keyAlias: ExpressionNode | undefined\r\n  objectIndexAlias: ExpressionNode | undefined\r\n  parseResult: ForParseResult\r\n  children: TemplateChildNode[]\r\n  codegenNode?: ForCodegenNode\r\n}\r\n\r\nexport interface TextCallNode extends Node {\r\n  type: NodeTypes.TEXT_CALL\r\n  content: TextNode | InterpolationNode | CompoundExpressionNode\r\n  codegenNode: CallExpression | SimpleExpressionNode // when hoisted\r\n}\r\n\r\nexport type TemplateTextChildNode =\r\n  | TextNode\r\n  | InterpolationNode\r\n  | CompoundExpressionNode\r\n\r\nexport interface VNodeCall extends Node {\r\n  type: NodeTypes.VNODE_CALL\r\n  tag: string | symbol | CallExpression\r\n  props: PropsExpression | undefined\r\n  children:\r\n    | TemplateChildNode[] // multiple children\r\n    | TemplateTextChildNode // single text child\r\n    | SlotsExpression // component slots\r\n    | ForRenderListExpression // v-for fragment call\r\n    | SimpleExpressionNode // hoisted\r\n    | undefined\r\n  patchFlag: string | undefined\r\n  dynamicProps: string | SimpleExpressionNode | undefined\r\n  directives: DirectiveArguments | undefined\r\n  isBlock: boolean\r\n  disableTracking: boolean\r\n  isComponent: boolean\r\n}\r\n\r\n// JS Node Types ---------------------------------------------------------------\r\n\r\n// We also include a number of JavaScript AST nodes for code generation.\r\n// The AST is an intentionally minimal subset just to meet the exact needs of\r\n// Vue render function generation.\r\n\r\nexport type JSChildNode =\r\n  | VNodeCall\r\n  | CallExpression\r\n  | ObjectExpression\r\n  | ArrayExpression\r\n  | ExpressionNode\r\n  | FunctionExpression\r\n  | ConditionalExpression\r\n  | CacheExpression\r\n  | AssignmentExpression\r\n  | SequenceExpression\r\n\r\nexport interface CallExpression extends Node {\r\n  type: NodeTypes.JS_CALL_EXPRESSION\r\n  callee: string | symbol\r\n  arguments: (\r\n    | string\r\n    | symbol\r\n    | JSChildNode\r\n    | SSRCodegenNode\r\n    | TemplateChildNode\r\n    | TemplateChildNode[]\r\n  )[]\r\n}\r\n\r\nexport interface ObjectExpression extends Node {\r\n  type: NodeTypes.JS_OBJECT_EXPRESSION\r\n  properties: Array<Property>\r\n}\r\n\r\nexport interface Property extends Node {\r\n  type: NodeTypes.JS_PROPERTY\r\n  key: ExpressionNode\r\n  value: JSChildNode\r\n}\r\n\r\nexport interface ArrayExpression extends Node {\r\n  type: NodeTypes.JS_ARRAY_EXPRESSION\r\n  elements: Array<string | Node>\r\n}\r\n\r\nexport interface FunctionExpression extends Node {\r\n  type: NodeTypes.JS_FUNCTION_EXPRESSION\r\n  params: ExpressionNode | string | (ExpressionNode | string)[] | undefined\r\n  returns?: TemplateChildNode | TemplateChildNode[] | JSChildNode\r\n  body?: BlockStatement | IfStatement\r\n  newline: boolean\r\n  /**\r\n   * This flag is for codegen to determine whether it needs to generate the\r\n   * withScopeId() wrapper\r\n   */\r\n  isSlot: boolean\r\n  /**\r\n   * __COMPAT__ only, indicates a slot function that should be excluded from\r\n   * the legacy $scopedSlots instance property.\r\n   */\r\n  isNonScopedSlot?: boolean\r\n}\r\n\r\nexport interface ConditionalExpression extends Node {\r\n  type: NodeTypes.JS_CONDITIONAL_EXPRESSION\r\n  test: JSChildNode\r\n  consequent: JSChildNode\r\n  alternate: JSChildNode\r\n  newline: boolean\r\n}\r\n\r\nexport interface CacheExpression extends Node {\r\n  type: NodeTypes.JS_CACHE_EXPRESSION\r\n  index: number\r\n  value: JSChildNode\r\n  isVNode: boolean\r\n}\r\n\r\nexport interface MemoExpression extends CallExpression {\r\n  callee: typeof WITH_MEMO\r\n  arguments: [ExpressionNode, MemoFactory, string, string]\r\n}\r\n\r\ninterface MemoFactory extends FunctionExpression {\r\n  returns: BlockCodegenNode\r\n}\r\n\r\n// SSR-specific Node Types -----------------------------------------------------\r\n\r\nexport type SSRCodegenNode =\r\n  | BlockStatement\r\n  | TemplateLiteral\r\n  | IfStatement\r\n  | AssignmentExpression\r\n  | ReturnStatement\r\n  | SequenceExpression\r\n\r\nexport interface BlockStatement extends Node {\r\n  type: NodeTypes.JS_BLOCK_STATEMENT\r\n  body: (JSChildNode | IfStatement)[]\r\n}\r\n\r\nexport interface TemplateLiteral extends Node {\r\n  type: NodeTypes.JS_TEMPLATE_LITERAL\r\n  elements: (string | JSChildNode)[]\r\n}\r\n\r\nexport interface IfStatement extends Node {\r\n  type: NodeTypes.JS_IF_STATEMENT\r\n  test: ExpressionNode\r\n  consequent: BlockStatement\r\n  alternate: IfStatement | BlockStatement | ReturnStatement | undefined\r\n}\r\n\r\nexport interface AssignmentExpression extends Node {\r\n  type: NodeTypes.JS_ASSIGNMENT_EXPRESSION\r\n  left: SimpleExpressionNode\r\n  right: JSChildNode\r\n}\r\n\r\nexport interface SequenceExpression extends Node {\r\n  type: NodeTypes.JS_SEQUENCE_EXPRESSION\r\n  expressions: JSChildNode[]\r\n}\r\n\r\nexport interface ReturnStatement extends Node {\r\n  type: NodeTypes.JS_RETURN_STATEMENT\r\n  returns: TemplateChildNode | TemplateChildNode[] | JSChildNode\r\n}\r\n\r\n// Codegen Node Types ----------------------------------------------------------\r\n\r\nexport interface DirectiveArguments extends ArrayExpression {\r\n  elements: DirectiveArgumentNode[]\r\n}\r\n\r\nexport interface DirectiveArgumentNode extends ArrayExpression {\r\n  elements: // dir, exp, arg, modifiers\r\n  | [string]\r\n    | [string, ExpressionNode]\r\n    | [string, ExpressionNode, ExpressionNode]\r\n    | [string, ExpressionNode, ExpressionNode, ObjectExpression]\r\n}\r\n\r\n// renderSlot(...)\r\nexport interface RenderSlotCall extends CallExpression {\r\n  callee: typeof RENDER_SLOT\r\n  arguments: // $slots, name, props, fallback\r\n  | [string, string | ExpressionNode]\r\n    | [string, string | ExpressionNode, PropsExpression]\r\n    | [\r\n        string,\r\n        string | ExpressionNode,\r\n        PropsExpression | '{}',\r\n        TemplateChildNode[]\r\n      ]\r\n}\r\n\r\nexport type SlotsExpression = SlotsObjectExpression | DynamicSlotsExpression\r\n\r\n// { foo: () => [...] }\r\nexport interface SlotsObjectExpression extends ObjectExpression {\r\n  properties: SlotsObjectProperty[]\r\n}\r\n\r\nexport interface SlotsObjectProperty extends Property {\r\n  value: SlotFunctionExpression\r\n}\r\n\r\nexport interface SlotFunctionExpression extends FunctionExpression {\r\n  returns: TemplateChildNode[]\r\n}\r\n\r\n// createSlots({ ... }, [\r\n//    foo ? () => [] : undefined,\r\n//    renderList(list, i => () => [i])\r\n// ])\r\nexport interface DynamicSlotsExpression extends CallExpression {\r\n  callee: typeof CREATE_SLOTS\r\n  arguments: [SlotsObjectExpression, DynamicSlotEntries]\r\n}\r\n\r\nexport interface DynamicSlotEntries extends ArrayExpression {\r\n  elements: (ConditionalDynamicSlotNode | ListDynamicSlotNode)[]\r\n}\r\n\r\nexport interface ConditionalDynamicSlotNode extends ConditionalExpression {\r\n  consequent: DynamicSlotNode\r\n  alternate: DynamicSlotNode | SimpleExpressionNode\r\n}\r\n\r\nexport interface ListDynamicSlotNode extends CallExpression {\r\n  callee: typeof RENDER_LIST\r\n  arguments: [ExpressionNode, ListDynamicSlotIterator]\r\n}\r\n\r\nexport interface ListDynamicSlotIterator extends FunctionExpression {\r\n  returns: DynamicSlotNode\r\n}\r\n\r\nexport interface DynamicSlotNode extends ObjectExpression {\r\n  properties: [Property, DynamicSlotFnProperty]\r\n}\r\n\r\nexport interface DynamicSlotFnProperty extends Property {\r\n  value: SlotFunctionExpression\r\n}\r\n\r\nexport type BlockCodegenNode = VNodeCall | RenderSlotCall\r\n\r\nexport interface IfConditionalExpression extends ConditionalExpression {\r\n  consequent: BlockCodegenNode | MemoExpression\r\n  alternate: BlockCodegenNode | IfConditionalExpression | MemoExpression\r\n}\r\n\r\nexport interface ForCodegenNode extends VNodeCall {\r\n  isBlock: true\r\n  tag: typeof FRAGMENT\r\n  props: undefined\r\n  children: ForRenderListExpression\r\n  patchFlag: string\r\n  disableTracking: boolean\r\n}\r\n\r\nexport interface ForRenderListExpression extends CallExpression {\r\n  callee: typeof RENDER_LIST\r\n  arguments: [ExpressionNode, ForIteratorExpression]\r\n}\r\n\r\nexport interface ForIteratorExpression extends FunctionExpression {\r\n  returns: BlockCodegenNode\r\n}\r\n\r\n// AST Utilities ---------------------------------------------------------------\r\n\r\n// Some expressions, e.g. sequence and conditional expressions, are never\r\n// associated with template nodes, so their source locations are just a stub.\r\n// Container types like CompoundExpression also don't need a real location.\r\nexport const locStub: SourceLocation = {\r\n  source: '',\r\n  start: { line: 1, column: 1, offset: 0 },\r\n  end: { line: 1, column: 1, offset: 0 }\r\n}\r\n\r\nexport function createRoot(\r\n  children: TemplateChildNode[],\r\n  loc = locStub\r\n): RootNode {\r\n  return {\r\n    type: NodeTypes.ROOT,\r\n    children,\r\n    helpers: [],\r\n    components: [],\r\n    directives: [],\r\n    hoists: [],\r\n    imports: [],\r\n    cached: 0,\r\n    temps: 0,\r\n    codegenNode: undefined,\r\n    loc\r\n  }\r\n}\r\n\r\nexport function createVNodeCall(\r\n  context: TransformContext | null,\r\n  tag: VNodeCall['tag'],\r\n  props?: VNodeCall['props'],\r\n  children?: VNodeCall['children'],\r\n  patchFlag?: VNodeCall['patchFlag'],\r\n  dynamicProps?: VNodeCall['dynamicProps'],\r\n  directives?: VNodeCall['directives'],\r\n  isBlock: VNodeCall['isBlock'] = false,\r\n  disableTracking: VNodeCall['disableTracking'] = false,\r\n  isComponent: VNodeCall['isComponent'] = false,\r\n  loc = locStub\r\n): VNodeCall {\r\n  if (context) {\r\n    if (isBlock) {\r\n      context.helper(OPEN_BLOCK)\r\n      context.helper(getVNodeBlockHelper(context.inSSR, isComponent))\r\n    } else {\r\n      context.helper(getVNodeHelper(context.inSSR, isComponent))\r\n    }\r\n    if (directives) {\r\n      context.helper(WITH_DIRECTIVES)\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: NodeTypes.VNODE_CALL,\r\n    tag,\r\n    props,\r\n    children,\r\n    patchFlag,\r\n    dynamicProps,\r\n    directives,\r\n    isBlock,\r\n    disableTracking,\r\n    isComponent,\r\n    loc\r\n  }\r\n}\r\n\r\nexport function createArrayExpression(\r\n  elements: ArrayExpression['elements'],\r\n  loc: SourceLocation = locStub\r\n): ArrayExpression {\r\n  return {\r\n    type: NodeTypes.JS_ARRAY_EXPRESSION,\r\n    loc,\r\n    elements\r\n  }\r\n}\r\n\r\nexport function createObjectExpression(\r\n  properties: ObjectExpression['properties'],\r\n  loc: SourceLocation = locStub\r\n): ObjectExpression {\r\n  return {\r\n    type: NodeTypes.JS_OBJECT_EXPRESSION,\r\n    loc,\r\n    properties\r\n  }\r\n}\r\n\r\nexport function createObjectProperty(\r\n  key: Property['key'] | string,\r\n  value: Property['value']\r\n): Property {\r\n  return {\r\n    type: NodeTypes.JS_PROPERTY,\r\n    loc: locStub,\r\n    key: isString(key) ? createSimpleExpression(key, true) : key,\r\n    value\r\n  }\r\n}\r\n\r\nexport function createSimpleExpression(\r\n  content: SimpleExpressionNode['content'],\r\n  isStatic: SimpleExpressionNode['isStatic'] = false,\r\n  loc: SourceLocation = locStub,\r\n  constType: ConstantTypes = ConstantTypes.NOT_CONSTANT\r\n): SimpleExpressionNode {\r\n  return {\r\n    type: NodeTypes.SIMPLE_EXPRESSION,\r\n    loc,\r\n    content,\r\n    isStatic,\r\n    constType: isStatic ? ConstantTypes.CAN_STRINGIFY : constType\r\n  }\r\n}\r\n\r\nexport function createInterpolation(\r\n  content: InterpolationNode['content'] | string,\r\n  loc: SourceLocation\r\n): InterpolationNode {\r\n  return {\r\n    type: NodeTypes.INTERPOLATION,\r\n    loc,\r\n    content: isString(content)\r\n      ? createSimpleExpression(content, false, loc)\r\n      : content\r\n  }\r\n}\r\n\r\nexport function createCompoundExpression(\r\n  children: CompoundExpressionNode['children'],\r\n  loc: SourceLocation = locStub\r\n): CompoundExpressionNode {\r\n  return {\r\n    type: NodeTypes.COMPOUND_EXPRESSION,\r\n    loc,\r\n    children\r\n  }\r\n}\r\n\r\ntype InferCodegenNodeType<T> = T extends typeof RENDER_SLOT\r\n  ? RenderSlotCall\r\n  : CallExpression\r\n\r\nexport function createCallExpression<T extends CallExpression['callee']>(\r\n  callee: T,\r\n  args: CallExpression['arguments'] = [],\r\n  loc: SourceLocation = locStub\r\n): InferCodegenNodeType<T> {\r\n  return {\r\n    type: NodeTypes.JS_CALL_EXPRESSION,\r\n    loc,\r\n    callee,\r\n    arguments: args\r\n  } as InferCodegenNodeType<T>\r\n}\r\n\r\nexport function createFunctionExpression(\r\n  params: FunctionExpression['params'],\r\n  returns: FunctionExpression['returns'] = undefined,\r\n  newline: boolean = false,\r\n  isSlot: boolean = false,\r\n  loc: SourceLocation = locStub\r\n): FunctionExpression {\r\n  return {\r\n    type: NodeTypes.JS_FUNCTION_EXPRESSION,\r\n    params,\r\n    returns,\r\n    newline,\r\n    isSlot,\r\n    loc\r\n  }\r\n}\r\n\r\nexport function createConditionalExpression(\r\n  test: ConditionalExpression['test'],\r\n  consequent: ConditionalExpression['consequent'],\r\n  alternate: ConditionalExpression['alternate'],\r\n  newline = true\r\n): ConditionalExpression {\r\n  return {\r\n    type: NodeTypes.JS_CONDITIONAL_EXPRESSION,\r\n    test,\r\n    consequent,\r\n    alternate,\r\n    newline,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createCacheExpression(\r\n  index: number,\r\n  value: JSChildNode,\r\n  isVNode: boolean = false\r\n): CacheExpression {\r\n  return {\r\n    type: NodeTypes.JS_CACHE_EXPRESSION,\r\n    index,\r\n    value,\r\n    isVNode,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createBlockStatement(\r\n  body: BlockStatement['body']\r\n): BlockStatement {\r\n  return {\r\n    type: NodeTypes.JS_BLOCK_STATEMENT,\r\n    body,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createTemplateLiteral(\r\n  elements: TemplateLiteral['elements']\r\n): TemplateLiteral {\r\n  return {\r\n    type: NodeTypes.JS_TEMPLATE_LITERAL,\r\n    elements,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createIfStatement(\r\n  test: IfStatement['test'],\r\n  consequent: IfStatement['consequent'],\r\n  alternate?: IfStatement['alternate']\r\n): IfStatement {\r\n  return {\r\n    type: NodeTypes.JS_IF_STATEMENT,\r\n    test,\r\n    consequent,\r\n    alternate,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createAssignmentExpression(\r\n  left: AssignmentExpression['left'],\r\n  right: AssignmentExpression['right']\r\n): AssignmentExpression {\r\n  return {\r\n    type: NodeTypes.JS_ASSIGNMENT_EXPRESSION,\r\n    left,\r\n    right,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createSequenceExpression(\r\n  expressions: SequenceExpression['expressions']\r\n): SequenceExpression {\r\n  return {\r\n    type: NodeTypes.JS_SEQUENCE_EXPRESSION,\r\n    expressions,\r\n    loc: locStub\r\n  }\r\n}\r\n\r\nexport function createReturnStatement(\r\n  returns: ReturnStatement['returns']\r\n): ReturnStatement {\r\n  return {\r\n    type: NodeTypes.JS_RETURN_STATEMENT,\r\n    returns,\r\n    loc: locStub\r\n  }\r\n}\r\n","import {\r\n  SourceLocation,\r\n  Position,\r\n  ElementNode,\r\n  NodeTypes,\r\n  CallExpression,\r\n  createCallExpression,\r\n  DirectiveNode,\r\n  ElementTypes,\r\n  TemplateChildNode,\r\n  RootNode,\r\n  ObjectExpression,\r\n  Property,\r\n  JSChildNode,\r\n  createObjectExpression,\r\n  SlotOutletNode,\r\n  TemplateNode,\r\n  RenderSlotCall,\r\n  ExpressionNode,\r\n  IfBranchNode,\r\n  TextNode,\r\n  InterpolationNode,\r\n  VNodeCall,\r\n  SimpleExpressionNode,\r\n  BlockCodegenNode,\r\n  MemoExpression\r\n} from './ast'\r\nimport { TransformContext } from './transform'\r\nimport {\r\n  MERGE_PROPS,\r\n  TELEPORT,\r\n  SUSPENSE,\r\n  KEEP_ALIVE,\r\n  BASE_TRANSITION,\r\n  TO_HANDLERS,\r\n  NORMALIZE_PROPS,\r\n  GUARD_REACTIVE_PROPS,\r\n  CREATE_BLOCK,\r\n  CREATE_ELEMENT_BLOCK,\r\n  CREATE_VNODE,\r\n  CREATE_ELEMENT_VNODE,\r\n  WITH_MEMO,\r\n  OPEN_BLOCK\r\n} from './runtimeHelpers'\r\nimport { isString, isObject, hyphenate, extend, NOOP } from '@vue/shared'\r\nimport { PropsExpression } from './transforms/transformElement'\r\nimport { parseExpression } from '@babel/parser'\r\nimport { Expression } from '@babel/types'\r\n\r\nexport const isStaticExp = (p: JSChildNode): p is SimpleExpressionNode =>\r\n  p.type === NodeTypes.SIMPLE_EXPRESSION && p.isStatic\r\n\r\nexport const isBuiltInType = (tag: string, expected: string): boolean =>\r\n  tag === expected || tag === hyphenate(expected)\r\n\r\nexport function isCoreComponent(tag: string): symbol | void {\r\n  if (isBuiltInType(tag, 'Teleport')) {\r\n    return TELEPORT\r\n  } else if (isBuiltInType(tag, 'Suspense')) {\r\n    return SUSPENSE\r\n  } else if (isBuiltInType(tag, 'KeepAlive')) {\r\n    return KEEP_ALIVE\r\n  } else if (isBuiltInType(tag, 'BaseTransition')) {\r\n    return BASE_TRANSITION\r\n  }\r\n}\r\n\r\nconst nonIdentifierRE = /^\\d|[^\\$\\w]/\r\nexport const isSimpleIdentifier = (name: string): boolean =>\r\n  !nonIdentifierRE.test(name)\r\n\r\nconst enum MemberExpLexState {\r\n  inMemberExp,\r\n  inBrackets,\r\n  inParens,\r\n  inString\r\n}\r\n\r\nconst validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/\r\nconst validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/\r\nconst whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g\r\n\r\n/**\r\n * Simple lexer to check if an expression is a member expression. This is\r\n * lax and only checks validity at the root level (i.e. does not validate exps\r\n * inside square brackets), but it's ok since these are only used on template\r\n * expressions and false positives are invalid expressions in the first place.\r\n */\r\nexport const isMemberExpressionBrowser = (path: string): boolean => {\r\n  // remove whitespaces around . or [ first\r\n  path = path.trim().replace(whitespaceRE, s => s.trim())\r\n\r\n  let state = MemberExpLexState.inMemberExp\r\n  let stateStack: MemberExpLexState[] = []\r\n  let currentOpenBracketCount = 0\r\n  let currentOpenParensCount = 0\r\n  let currentStringType: \"'\" | '\"' | '`' | null = null\r\n\r\n  for (let i = 0; i < path.length; i++) {\r\n    const char = path.charAt(i)\r\n    switch (state) {\r\n      case MemberExpLexState.inMemberExp:\r\n        if (char === '[') {\r\n          stateStack.push(state)\r\n          state = MemberExpLexState.inBrackets\r\n          currentOpenBracketCount++\r\n        } else if (char === '(') {\r\n          stateStack.push(state)\r\n          state = MemberExpLexState.inParens\r\n          currentOpenParensCount++\r\n        } else if (\r\n          !(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)\r\n        ) {\r\n          return false\r\n        }\r\n        break\r\n      case MemberExpLexState.inBrackets:\r\n        if (char === `'` || char === `\"` || char === '`') {\r\n          stateStack.push(state)\r\n          state = MemberExpLexState.inString\r\n          currentStringType = char\r\n        } else if (char === `[`) {\r\n          currentOpenBracketCount++\r\n        } else if (char === `]`) {\r\n          if (!--currentOpenBracketCount) {\r\n            state = stateStack.pop()!\r\n          }\r\n        }\r\n        break\r\n      case MemberExpLexState.inParens:\r\n        if (char === `'` || char === `\"` || char === '`') {\r\n          stateStack.push(state)\r\n          state = MemberExpLexState.inString\r\n          currentStringType = char\r\n        } else if (char === `(`) {\r\n          currentOpenParensCount++\r\n        } else if (char === `)`) {\r\n          // if the exp ends as a call then it should not be considered valid\r\n          if (i === path.length - 1) {\r\n            return false\r\n          }\r\n          if (!--currentOpenParensCount) {\r\n            state = stateStack.pop()!\r\n          }\r\n        }\r\n        break\r\n      case MemberExpLexState.inString:\r\n        if (char === currentStringType) {\r\n          state = stateStack.pop()!\r\n          currentStringType = null\r\n        }\r\n        break\r\n    }\r\n  }\r\n  return !currentOpenBracketCount && !currentOpenParensCount\r\n}\r\n\r\nexport const isMemberExpressionNode = __BROWSER__\r\n  ? (NOOP as any as (path: string, context: TransformContext) => boolean)\r\n  : (path: string, context: TransformContext): boolean => {\r\n      try {\r\n        let ret: Expression = parseExpression(path, {\r\n          plugins: context.expressionPlugins\r\n        })\r\n        if (ret.type === 'TSAsExpression' || ret.type === 'TSTypeAssertion') {\r\n          ret = ret.expression\r\n        }\r\n        return (\r\n          ret.type === 'MemberExpression' ||\r\n          ret.type === 'OptionalMemberExpression' ||\r\n          ret.type === 'Identifier'\r\n        )\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    }\r\n\r\nexport const isMemberExpression = __BROWSER__\r\n  ? isMemberExpressionBrowser\r\n  : isMemberExpressionNode\r\n\r\nexport function getInnerRange(\r\n  loc: SourceLocation,\r\n  offset: number,\r\n  length: number\r\n): SourceLocation {\r\n  __TEST__ && assert(offset <= loc.source.length)\r\n  const source = loc.source.slice(offset, offset + length)\r\n  const newLoc: SourceLocation = {\r\n    source,\r\n    start: advancePositionWithClone(loc.start, loc.source, offset),\r\n    end: loc.end\r\n  }\r\n\r\n  if (length != null) {\r\n    __TEST__ && assert(offset + length <= loc.source.length)\r\n    newLoc.end = advancePositionWithClone(\r\n      loc.start,\r\n      loc.source,\r\n      offset + length\r\n    )\r\n  }\r\n\r\n  return newLoc\r\n}\r\n\r\nexport function advancePositionWithClone(\r\n  pos: Position,\r\n  source: string,\r\n  numberOfCharacters: number = source.length\r\n): Position {\r\n  return advancePositionWithMutation(\r\n    extend({}, pos),\r\n    source,\r\n    numberOfCharacters\r\n  )\r\n}\r\n\r\n// advance by mutation without cloning (for performance reasons), since this\r\n// gets called a lot in the parser\r\nexport function advancePositionWithMutation(\r\n  pos: Position,\r\n  source: string,\r\n  numberOfCharacters: number = source.length\r\n): Position {\r\n  let linesCount = 0\r\n  let lastNewLinePos = -1\r\n  for (let i = 0; i < numberOfCharacters; i++) {\r\n    if (source.charCodeAt(i) === 10 /* newline char code */) {\r\n      linesCount++\r\n      lastNewLinePos = i\r\n    }\r\n  }\r\n\r\n  pos.offset += numberOfCharacters\r\n  pos.line += linesCount\r\n  pos.column =\r\n    lastNewLinePos === -1\r\n      ? pos.column + numberOfCharacters\r\n      : numberOfCharacters - lastNewLinePos\r\n\r\n  return pos\r\n}\r\n\r\nexport function assert(condition: boolean, msg?: string) {\r\n  /* istanbul ignore if */\r\n  if (!condition) {\r\n    throw new Error(msg || `unexpected compiler condition`)\r\n  }\r\n}\r\n\r\nexport function findDir(\r\n  node: ElementNode,\r\n  name: string | RegExp,\r\n  allowEmpty: boolean = false\r\n): DirectiveNode | undefined {\r\n  for (let i = 0; i < node.props.length; i++) {\r\n    const p = node.props[i]\r\n    if (\r\n      p.type === NodeTypes.DIRECTIVE &&\r\n      (allowEmpty || p.exp) &&\r\n      (isString(name) ? p.name === name : name.test(p.name))\r\n    ) {\r\n      return p\r\n    }\r\n  }\r\n}\r\n\r\nexport function findProp(\r\n  node: ElementNode,\r\n  name: string,\r\n  dynamicOnly: boolean = false,\r\n  allowEmpty: boolean = false\r\n): ElementNode['props'][0] | undefined {\r\n  for (let i = 0; i < node.props.length; i++) {\r\n    const p = node.props[i]\r\n    if (p.type === NodeTypes.ATTRIBUTE) {\r\n      if (dynamicOnly) continue\r\n      if (p.name === name && (p.value || allowEmpty)) {\r\n        return p\r\n      }\r\n    } else if (\r\n      p.name === 'bind' &&\r\n      (p.exp || allowEmpty) &&\r\n      isStaticArgOf(p.arg, name)\r\n    ) {\r\n      return p\r\n    }\r\n  }\r\n}\r\n\r\nexport function isStaticArgOf(\r\n  arg: DirectiveNode['arg'],\r\n  name: string\r\n): boolean {\r\n  return !!(arg && isStaticExp(arg) && arg.content === name)\r\n}\r\n\r\nexport function hasDynamicKeyVBind(node: ElementNode): boolean {\r\n  return node.props.some(\r\n    p =>\r\n      p.type === NodeTypes.DIRECTIVE &&\r\n      p.name === 'bind' &&\r\n      (!p.arg || // v-bind=\"obj\"\r\n        p.arg.type !== NodeTypes.SIMPLE_EXPRESSION || // v-bind:[_ctx.foo]\r\n        !p.arg.isStatic) // v-bind:[foo]\r\n  )\r\n}\r\n\r\nexport function isText(\r\n  node: TemplateChildNode\r\n): node is TextNode | InterpolationNode {\r\n  return node.type === NodeTypes.INTERPOLATION || node.type === NodeTypes.TEXT\r\n}\r\n\r\nexport function isVSlot(p: ElementNode['props'][0]): p is DirectiveNode {\r\n  return p.type === NodeTypes.DIRECTIVE && p.name === 'slot'\r\n}\r\n\r\nexport function isTemplateNode(\r\n  node: RootNode | TemplateChildNode\r\n): node is TemplateNode {\r\n  return (\r\n    node.type === NodeTypes.ELEMENT && node.tagType === ElementTypes.TEMPLATE\r\n  )\r\n}\r\n\r\nexport function isSlotOutlet(\r\n  node: RootNode | TemplateChildNode\r\n): node is SlotOutletNode {\r\n  return node.type === NodeTypes.ELEMENT && node.tagType === ElementTypes.SLOT\r\n}\r\n\r\nexport function getVNodeHelper(ssr: boolean, isComponent: boolean) {\r\n  return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE\r\n}\r\n\r\nexport function getVNodeBlockHelper(ssr: boolean, isComponent: boolean) {\r\n  return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK\r\n}\r\n\r\nconst propsHelperSet = new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS])\r\n\r\nfunction getUnnormalizedProps(\r\n  props: PropsExpression | '{}',\r\n  callPath: CallExpression[] = []\r\n): [PropsExpression | '{}', CallExpression[]] {\r\n  if (\r\n    props &&\r\n    !isString(props) &&\r\n    props.type === NodeTypes.JS_CALL_EXPRESSION\r\n  ) {\r\n    const callee = props.callee\r\n    if (!isString(callee) && propsHelperSet.has(callee)) {\r\n      return getUnnormalizedProps(\r\n        props.arguments[0] as PropsExpression,\r\n        callPath.concat(props)\r\n      )\r\n    }\r\n  }\r\n  return [props, callPath]\r\n}\r\nexport function injectProp(\r\n  node: VNodeCall | RenderSlotCall,\r\n  prop: Property,\r\n  context: TransformContext\r\n) {\r\n  let propsWithInjection: ObjectExpression | CallExpression | undefined\r\n  /**\r\n   * 1. mergeProps(...)\r\n   * 2. toHandlers(...)\r\n   * 3. normalizeProps(...)\r\n   * 4. normalizeProps(guardReactiveProps(...))\r\n   *\r\n   * we need to get the real props before normalization\r\n   */\r\n  let props =\r\n    node.type === NodeTypes.VNODE_CALL ? node.props : node.arguments[2]\r\n  let callPath: CallExpression[] = []\r\n  let parentCall: CallExpression | undefined\r\n  if (\r\n    props &&\r\n    !isString(props) &&\r\n    props.type === NodeTypes.JS_CALL_EXPRESSION\r\n  ) {\r\n    const ret = getUnnormalizedProps(props)\r\n    props = ret[0]\r\n    callPath = ret[1]\r\n    parentCall = callPath[callPath.length - 1]\r\n  }\r\n\r\n  if (props == null || isString(props)) {\r\n    propsWithInjection = createObjectExpression([prop])\r\n  } else if (props.type === NodeTypes.JS_CALL_EXPRESSION) {\r\n    // merged props... add ours\r\n    // only inject key to object literal if it's the first argument so that\r\n    // if doesn't override user provided keys\r\n    const first = props.arguments[0] as string | JSChildNode\r\n    if (!isString(first) && first.type === NodeTypes.JS_OBJECT_EXPRESSION) {\r\n      first.properties.unshift(prop)\r\n    } else {\r\n      if (props.callee === TO_HANDLERS) {\r\n        // #2366\r\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n          createObjectExpression([prop]),\r\n          props\r\n        ])\r\n      } else {\r\n        props.arguments.unshift(createObjectExpression([prop]))\r\n      }\r\n    }\r\n    !propsWithInjection && (propsWithInjection = props)\r\n  } else if (props.type === NodeTypes.JS_OBJECT_EXPRESSION) {\r\n    let alreadyExists = false\r\n    // check existing key to avoid overriding user provided keys\r\n    if (prop.key.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n      const propKeyName = prop.key.content\r\n      alreadyExists = props.properties.some(\r\n        p =>\r\n          p.key.type === NodeTypes.SIMPLE_EXPRESSION &&\r\n          p.key.content === propKeyName\r\n      )\r\n    }\r\n    if (!alreadyExists) {\r\n      props.properties.unshift(prop)\r\n    }\r\n    propsWithInjection = props\r\n  } else {\r\n    // single v-bind with expression, return a merged replacement\r\n    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n      createObjectExpression([prop]),\r\n      props\r\n    ])\r\n    // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(props))`,\r\n    // it will be rewritten as `normalizeProps(mergeProps({ key: 0 }, props))`,\r\n    // the `guardReactiveProps` will no longer be needed\r\n    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\r\n      parentCall = callPath[callPath.length - 2]\r\n    }\r\n  }\r\n  if (node.type === NodeTypes.VNODE_CALL) {\r\n    if (parentCall) {\r\n      parentCall.arguments[0] = propsWithInjection\r\n    } else {\r\n      node.props = propsWithInjection\r\n    }\r\n  } else {\r\n    if (parentCall) {\r\n      parentCall.arguments[0] = propsWithInjection\r\n    } else {\r\n      node.arguments[2] = propsWithInjection\r\n    }\r\n  }\r\n}\r\n\r\nexport function toValidAssetId(\r\n  name: string,\r\n  type: 'component' | 'directive' | 'filter'\r\n): string {\r\n  // see issue#4422, we need adding identifier on validAssetId if variable `name` has specific character\r\n  return `_${type}_${name.replace(/[^\\w]/g, (searchValue, replaceValue) => {\r\n    return searchValue === '-' ? '_' : name.charCodeAt(replaceValue).toString()\r\n  })}`\r\n}\r\n\r\n// Check if a node contains expressions that reference current context scope ids\r\nexport function hasScopeRef(\r\n  node: TemplateChildNode | IfBranchNode | ExpressionNode | undefined,\r\n  ids: TransformContext['identifiers']\r\n): boolean {\r\n  if (!node || Object.keys(ids).length === 0) {\r\n    return false\r\n  }\r\n  switch (node.type) {\r\n    case NodeTypes.ELEMENT:\r\n      for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i]\r\n        if (\r\n          p.type === NodeTypes.DIRECTIVE &&\r\n          (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return node.children.some(c => hasScopeRef(c, ids))\r\n    case NodeTypes.FOR:\r\n      if (hasScopeRef(node.source, ids)) {\r\n        return true\r\n      }\r\n      return node.children.some(c => hasScopeRef(c, ids))\r\n    case NodeTypes.IF:\r\n      return node.branches.some(b => hasScopeRef(b, ids))\r\n    case NodeTypes.IF_BRANCH:\r\n      if (hasScopeRef(node.condition, ids)) {\r\n        return true\r\n      }\r\n      return node.children.some(c => hasScopeRef(c, ids))\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      return (\r\n        !node.isStatic &&\r\n        isSimpleIdentifier(node.content) &&\r\n        !!ids[node.content]\r\n      )\r\n    case NodeTypes.COMPOUND_EXPRESSION:\r\n      return node.children.some(c => isObject(c) && hasScopeRef(c, ids))\r\n    case NodeTypes.INTERPOLATION:\r\n    case NodeTypes.TEXT_CALL:\r\n      return hasScopeRef(node.content, ids)\r\n    case NodeTypes.TEXT:\r\n    case NodeTypes.COMMENT:\r\n      return false\r\n    default:\r\n      if (__DEV__) {\r\n        const exhaustiveCheck: never = node\r\n        exhaustiveCheck\r\n      }\r\n      return false\r\n  }\r\n}\r\n\r\nexport function getMemoedVNodeCall(node: BlockCodegenNode | MemoExpression) {\r\n  if (node.type === NodeTypes.JS_CALL_EXPRESSION && node.callee === WITH_MEMO) {\r\n    return node.arguments[1].returns as VNodeCall\r\n  } else {\r\n    return node\r\n  }\r\n}\r\n\r\nexport function makeBlock(\r\n  node: VNodeCall,\r\n  { helper, removeHelper, inSSR }: TransformContext\r\n) {\r\n  if (!node.isBlock) {\r\n    node.isBlock = true\r\n    removeHelper(getVNodeHelper(inSSR, node.isComponent))\r\n    helper(OPEN_BLOCK)\r\n    helper(getVNodeBlockHelper(inSSR, node.isComponent))\r\n  }\r\n}\r\n","import { SourceLocation } from '../ast'\r\nimport { CompilerError } from '../errors'\r\nimport { ParserContext } from '../parse'\r\nimport { TransformContext } from '../transform'\r\n\r\nexport type CompilerCompatConfig = Partial<\r\n  Record<CompilerDeprecationTypes, boolean | 'suppress-warning'>\r\n> & {\r\n  MODE?: 2 | 3\r\n}\r\n\r\nexport interface CompilerCompatOptions {\r\n  compatConfig?: CompilerCompatConfig\r\n}\r\n\r\nexport const enum CompilerDeprecationTypes {\r\n  COMPILER_IS_ON_ELEMENT = 'COMPILER_IS_ON_ELEMENT',\r\n  COMPILER_V_BIND_SYNC = 'COMPILER_V_BIND_SYNC',\r\n  COMPILER_V_BIND_PROP = 'COMPILER_V_BIND_PROP',\r\n  COMPILER_V_BIND_OBJECT_ORDER = 'COMPILER_V_BIND_OBJECT_ORDER',\r\n  COMPILER_V_ON_NATIVE = 'COMPILER_V_ON_NATIVE',\r\n  COMPILER_V_IF_V_FOR_PRECEDENCE = 'COMPILER_V_IF_V_FOR_PRECEDENCE',\r\n  COMPILER_NATIVE_TEMPLATE = 'COMPILER_NATIVE_TEMPLATE',\r\n  COMPILER_INLINE_TEMPLATE = 'COMPILER_INLINE_TEMPLATE',\r\n  COMPILER_FILTERS = 'COMPILER_FILTER'\r\n}\r\n\r\ntype DeprecationData = {\r\n  message: string | ((...args: any[]) => string)\r\n  link?: string\r\n}\r\n\r\nconst deprecationData: Record<CompilerDeprecationTypes, DeprecationData> = {\r\n  [CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT]: {\r\n    message:\r\n      `Platform-native elements with \"is\" prop will no longer be ` +\r\n      `treated as components in Vue 3 unless the \"is\" value is explicitly ` +\r\n      `prefixed with \"vue:\".`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_V_BIND_SYNC]: {\r\n    message: key =>\r\n      `.sync modifier for v-bind has been removed. Use v-model with ` +\r\n      `argument instead. \\`v-bind:${key}.sync\\` should be changed to ` +\r\n      `\\`v-model:${key}\\`.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_V_BIND_PROP]: {\r\n    message:\r\n      `.prop modifier for v-bind has been removed and no longer necessary. ` +\r\n      `Vue 3 will automatically set a binding as DOM property when appropriate.`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_V_BIND_OBJECT_ORDER]: {\r\n    message:\r\n      `v-bind=\"obj\" usage is now order sensitive and behaves like JavaScript ` +\r\n      `object spread: it will now overwrite an existing non-mergeable attribute ` +\r\n      `that appears before v-bind in the case of conflict. ` +\r\n      `To retain 2.x behavior, move v-bind to make it the first attribute. ` +\r\n      `You can also suppress this warning if the usage is intended.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_V_ON_NATIVE]: {\r\n    message: `.native modifier for v-on has been removed as is no longer necessary.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_V_IF_V_FOR_PRECEDENCE]: {\r\n    message:\r\n      `v-if / v-for precedence when used on the same element has changed ` +\r\n      `in Vue 3: v-if now takes higher precedence and will no longer have ` +\r\n      `access to v-for scope variables. It is best to avoid the ambiguity ` +\r\n      `with <template> tags or use a computed property that filters v-for ` +\r\n      `data source.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_NATIVE_TEMPLATE]: {\r\n    message:\r\n      `<template> with no special directives will render as a native template ` +\r\n      `element instead of its inner content in Vue 3.`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_INLINE_TEMPLATE]: {\r\n    message: `\"inline-template\" has been removed in Vue 3.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`\r\n  },\r\n\r\n  [CompilerDeprecationTypes.COMPILER_FILTERS]: {\r\n    message:\r\n      `filters have been removed in Vue 3. ` +\r\n      `The \"|\" symbol will be treated as native JavaScript bitwise OR operator. ` +\r\n      `Use method calls or computed properties instead.`,\r\n    link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`\r\n  }\r\n}\r\n\r\nfunction getCompatValue(\r\n  key: CompilerDeprecationTypes | 'MODE',\r\n  context: ParserContext | TransformContext\r\n) {\r\n  const config = (context as ParserContext).options\r\n    ? (context as ParserContext).options.compatConfig\r\n    : (context as TransformContext).compatConfig\r\n  const value = config && config[key]\r\n  if (key === 'MODE') {\r\n    return value || 3 // compiler defaults to v3 behavior\r\n  } else {\r\n    return value\r\n  }\r\n}\r\n\r\nexport function isCompatEnabled(\r\n  key: CompilerDeprecationTypes,\r\n  context: ParserContext | TransformContext\r\n) {\r\n  const mode = getCompatValue('MODE', context)\r\n  const value = getCompatValue(key, context)\r\n  // in v3 mode, only enable if explicitly set to true\r\n  // otherwise enable for any non-false value\r\n  return mode === 3 ? value === true : value !== false\r\n}\r\n\r\nexport function checkCompatEnabled(\r\n  key: CompilerDeprecationTypes,\r\n  context: ParserContext | TransformContext,\r\n  loc: SourceLocation | null,\r\n  ...args: any[]\r\n): boolean {\r\n  const enabled = isCompatEnabled(key, context)\r\n  if (__DEV__ && enabled) {\r\n    warnDeprecation(key, context, loc, ...args)\r\n  }\r\n  return enabled\r\n}\r\n\r\nexport function warnDeprecation(\r\n  key: CompilerDeprecationTypes,\r\n  context: ParserContext | TransformContext,\r\n  loc: SourceLocation | null,\r\n  ...args: any[]\r\n) {\r\n  const val = getCompatValue(key, context)\r\n  if (val === 'suppress-warning') {\r\n    return\r\n  }\r\n  const { message, link } = deprecationData[key]\r\n  const msg = `(deprecation ${key}) ${\r\n    typeof message === 'function' ? message(...args) : message\r\n  }${link ? `\\n  Details: ${link}` : ``}`\r\n\r\n  const err = new SyntaxError(msg) as CompilerError\r\n  err.code = key\r\n  if (loc) err.loc = loc\r\n  context.onWarn(err)\r\n}\r\n","import { ErrorHandlingOptions, ParserOptions } from './options'\r\nimport { NO, isArray, makeMap, extend } from '@vue/shared'\r\nimport {\r\n  ErrorCodes,\r\n  createCompilerError,\r\n  defaultOnError,\r\n  defaultOnWarn\r\n} from './errors'\r\nimport {\r\n  assert,\r\n  advancePositionWithMutation,\r\n  advancePositionWithClone,\r\n  isCoreComponent,\r\n  isStaticArgOf\r\n} from './utils'\r\nimport {\r\n  Namespaces,\r\n  AttributeNode,\r\n  CommentNode,\r\n  DirectiveNode,\r\n  ElementNode,\r\n  ElementTypes,\r\n  ExpressionNode,\r\n  NodeTypes,\r\n  Position,\r\n  RootNode,\r\n  SourceLocation,\r\n  TextNode,\r\n  TemplateChildNode,\r\n  InterpolationNode,\r\n  createRoot,\r\n  ConstantTypes\r\n} from './ast'\r\nimport {\r\n  checkCompatEnabled,\r\n  CompilerCompatOptions,\r\n  CompilerDeprecationTypes,\r\n  isCompatEnabled,\r\n  warnDeprecation\r\n} from './compat/compatConfig'\r\n\r\ntype OptionalOptions =\r\n  | 'whitespace'\r\n  | 'isNativeTag'\r\n  | 'isBuiltInComponent'\r\n  | keyof CompilerCompatOptions\r\ntype MergedParserOptions = Omit<Required<ParserOptions>, OptionalOptions> &\r\n  Pick<ParserOptions, OptionalOptions>\r\ntype AttributeValue =\r\n  | {\r\n      content: string\r\n      isQuoted: boolean\r\n      loc: SourceLocation\r\n    }\r\n  | undefined\r\n\r\n// The default decoder only provides escapes for characters reserved as part of\r\n// the template syntax, and is only used if the custom renderer did not provide\r\n// a platform-specific decoder.\r\nconst decodeRE = /&(gt|lt|amp|apos|quot);/g\r\nconst decodeMap: Record<string, string> = {\r\n  gt: '>',\r\n  lt: '<',\r\n  amp: '&',\r\n  apos: \"'\",\r\n  quot: '\"'\r\n}\r\n\r\nexport const defaultParserOptions: MergedParserOptions = {\r\n  delimiters: [`{{`, `}}`],\r\n  getNamespace: () => Namespaces.HTML,\r\n  getTextMode: () => TextModes.DATA,\r\n  isVoidTag: NO,\r\n  isPreTag: NO,\r\n  isCustomElement: NO,\r\n  decodeEntities: (rawText: string): string =>\r\n    rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),\r\n  onError: defaultOnError,\r\n  onWarn: defaultOnWarn,\r\n  comments: __DEV__\r\n}\r\n\r\nexport const enum TextModes {\r\n  //          | Elements | Entities | End sign              | Inside of\r\n  DATA, //    | ✔        | ✔        | End tags of ancestors |\r\n  RCDATA, //  | ✘        | ✔        | End tag of the parent | <textarea>\r\n  RAWTEXT, // | ✘        | ✘        | End tag of the parent | <style>,<script>\r\n  CDATA,\r\n  ATTRIBUTE_VALUE\r\n}\r\n\r\nexport interface ParserContext {\r\n  options: MergedParserOptions\r\n  readonly originalSource: string\r\n  source: string\r\n  offset: number\r\n  line: number\r\n  column: number\r\n  inPre: boolean // HTML <pre> tag, preserve whitespaces\r\n  inVPre: boolean // v-pre, do not process directives and interpolations\r\n  onWarn: NonNullable<ErrorHandlingOptions['onWarn']>\r\n}\r\n\r\nexport function baseParse(\r\n  content: string,\r\n  options: ParserOptions = {}\r\n): RootNode {\r\n  const context = createParserContext(content, options)\r\n  const start = getCursor(context)\r\n  return createRoot(\r\n    parseChildren(context, TextModes.DATA, []),\r\n    getSelection(context, start)\r\n  )\r\n}\r\n\r\nfunction createParserContext(\r\n  content: string,\r\n  rawOptions: ParserOptions\r\n): ParserContext {\r\n  const options = extend({}, defaultParserOptions)\r\n\r\n  let key: keyof ParserOptions\r\n  for (key in rawOptions) {\r\n    // @ts-ignore\r\n    options[key] =\r\n      rawOptions[key] === undefined\r\n        ? defaultParserOptions[key]\r\n        : rawOptions[key]\r\n  }\r\n  return {\r\n    options,\r\n    column: 1,\r\n    line: 1,\r\n    offset: 0,\r\n    originalSource: content,\r\n    source: content,\r\n    inPre: false,\r\n    inVPre: false,\r\n    onWarn: options.onWarn\r\n  }\r\n}\r\n\r\nfunction parseChildren(\r\n  context: ParserContext,\r\n  mode: TextModes,\r\n  ancestors: ElementNode[]\r\n): TemplateChildNode[] {\r\n  const parent = last(ancestors)\r\n  const ns = parent ? parent.ns : Namespaces.HTML\r\n  const nodes: TemplateChildNode[] = []\r\n\r\n  while (!isEnd(context, mode, ancestors)) {\r\n    __TEST__ && assert(context.source.length > 0)\r\n    const s = context.source\r\n    let node: TemplateChildNode | TemplateChildNode[] | undefined = undefined\r\n\r\n    if (mode === TextModes.DATA || mode === TextModes.RCDATA) {\r\n      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {\r\n        // '{{'\r\n        node = parseInterpolation(context, mode)\r\n      } else if (mode === TextModes.DATA && s[0] === '<') {\r\n        // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\r\n        if (s.length === 1) {\r\n          emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, 1)\r\n        } else if (s[1] === '!') {\r\n          // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\r\n          if (startsWith(s, '<!--')) {\r\n            node = parseComment(context)\r\n          } else if (startsWith(s, '<!DOCTYPE')) {\r\n            // Ignore DOCTYPE by a limitation.\r\n            node = parseBogusComment(context)\r\n          } else if (startsWith(s, '<![CDATA[')) {\r\n            if (ns !== Namespaces.HTML) {\r\n              node = parseCDATA(context, ancestors)\r\n            } else {\r\n              emitError(context, ErrorCodes.CDATA_IN_HTML_CONTENT)\r\n              node = parseBogusComment(context)\r\n            }\r\n          } else {\r\n            emitError(context, ErrorCodes.INCORRECTLY_OPENED_COMMENT)\r\n            node = parseBogusComment(context)\r\n          }\r\n        } else if (s[1] === '/') {\r\n          // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\r\n          if (s.length === 2) {\r\n            emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, 2)\r\n          } else if (s[2] === '>') {\r\n            emitError(context, ErrorCodes.MISSING_END_TAG_NAME, 2)\r\n            advanceBy(context, 3)\r\n            continue\r\n          } else if (/[a-z]/i.test(s[2])) {\r\n            emitError(context, ErrorCodes.X_INVALID_END_TAG)\r\n            parseTag(context, TagType.End, parent)\r\n            continue\r\n          } else {\r\n            emitError(\r\n              context,\r\n              ErrorCodes.INVALID_FIRST_CHARACTER_OF_TAG_NAME,\r\n              2\r\n            )\r\n            node = parseBogusComment(context)\r\n          }\r\n        } else if (/[a-z]/i.test(s[1])) {\r\n          node = parseElement(context, ancestors)\r\n\r\n          // 2.x <template> with no directive compat\r\n          if (\r\n            __COMPAT__ &&\r\n            isCompatEnabled(\r\n              CompilerDeprecationTypes.COMPILER_NATIVE_TEMPLATE,\r\n              context\r\n            ) &&\r\n            node &&\r\n            node.tag === 'template' &&\r\n            !node.props.some(\r\n              p =>\r\n                p.type === NodeTypes.DIRECTIVE &&\r\n                isSpecialTemplateDirective(p.name)\r\n            )\r\n          ) {\r\n            __DEV__ &&\r\n              warnDeprecation(\r\n                CompilerDeprecationTypes.COMPILER_NATIVE_TEMPLATE,\r\n                context,\r\n                node.loc\r\n              )\r\n            node = node.children\r\n          }\r\n        } else if (s[1] === '?') {\r\n          emitError(\r\n            context,\r\n            ErrorCodes.UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME,\r\n            1\r\n          )\r\n          node = parseBogusComment(context)\r\n        } else {\r\n          emitError(context, ErrorCodes.INVALID_FIRST_CHARACTER_OF_TAG_NAME, 1)\r\n        }\r\n      }\r\n    }\r\n    if (!node) {\r\n      node = parseText(context, mode)\r\n    }\r\n\r\n    if (isArray(node)) {\r\n      for (let i = 0; i < node.length; i++) {\r\n        pushNode(nodes, node[i])\r\n      }\r\n    } else {\r\n      pushNode(nodes, node)\r\n    }\r\n  }\r\n\r\n  // Whitespace handling strategy like v2\r\n  let removedWhitespace = false\r\n  if (mode !== TextModes.RAWTEXT && mode !== TextModes.RCDATA) {\r\n    const shouldCondense = context.options.whitespace !== 'preserve'\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i]\r\n      if (!context.inPre && node.type === NodeTypes.TEXT) {\r\n        if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n          const prev = nodes[i - 1]\r\n          const next = nodes[i + 1]\r\n          // Remove if:\r\n          // - the whitespace is the first or last node, or:\r\n          // - (condense mode) the whitespace is adjacent to a comment, or:\r\n          // - (condense mode) the whitespace is between two elements AND contains newline\r\n          if (\r\n            !prev ||\r\n            !next ||\r\n            (shouldCondense &&\r\n              (prev.type === NodeTypes.COMMENT ||\r\n                next.type === NodeTypes.COMMENT ||\r\n                (prev.type === NodeTypes.ELEMENT &&\r\n                  next.type === NodeTypes.ELEMENT &&\r\n                  /[\\r\\n]/.test(node.content))))\r\n          ) {\r\n            removedWhitespace = true\r\n            nodes[i] = null as any\r\n          } else {\r\n            // Otherwise, the whitespace is condensed into a single space\r\n            node.content = ' '\r\n          }\r\n        } else if (shouldCondense) {\r\n          // in condense mode, consecutive whitespaces in text are condensed\r\n          // down to a single space.\r\n          node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, ' ')\r\n        }\r\n      }\r\n      // Remove comment nodes if desired by configuration.\r\n      else if (node.type === NodeTypes.COMMENT && !context.options.comments) {\r\n        removedWhitespace = true\r\n        nodes[i] = null as any\r\n      }\r\n    }\r\n    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {\r\n      // remove leading newline per html spec\r\n      // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\r\n      const first = nodes[0]\r\n      if (first && first.type === NodeTypes.TEXT) {\r\n        first.content = first.content.replace(/^\\r?\\n/, '')\r\n      }\r\n    }\r\n  }\r\n\r\n  return removedWhitespace ? nodes.filter(Boolean) : nodes\r\n}\r\n\r\nfunction pushNode(nodes: TemplateChildNode[], node: TemplateChildNode): void {\r\n  if (node.type === NodeTypes.TEXT) {\r\n    const prev = last(nodes)\r\n    // Merge if both this and the previous node are text and those are\r\n    // consecutive. This happens for cases like \"a < b\".\r\n    if (\r\n      prev &&\r\n      prev.type === NodeTypes.TEXT &&\r\n      prev.loc.end.offset === node.loc.start.offset\r\n    ) {\r\n      prev.content += node.content\r\n      prev.loc.end = node.loc.end\r\n      prev.loc.source += node.loc.source\r\n      return\r\n    }\r\n  }\r\n\r\n  nodes.push(node)\r\n}\r\n\r\nfunction parseCDATA(\r\n  context: ParserContext,\r\n  ancestors: ElementNode[]\r\n): TemplateChildNode[] {\r\n  __TEST__ &&\r\n    assert(last(ancestors) == null || last(ancestors)!.ns !== Namespaces.HTML)\r\n  __TEST__ && assert(startsWith(context.source, '<![CDATA['))\r\n\r\n  advanceBy(context, 9)\r\n  const nodes = parseChildren(context, TextModes.CDATA, ancestors)\r\n  if (context.source.length === 0) {\r\n    emitError(context, ErrorCodes.EOF_IN_CDATA)\r\n  } else {\r\n    __TEST__ && assert(startsWith(context.source, ']]>'))\r\n    advanceBy(context, 3)\r\n  }\r\n\r\n  return nodes\r\n}\r\n\r\nfunction parseComment(context: ParserContext): CommentNode {\r\n  __TEST__ && assert(startsWith(context.source, '<!--'))\r\n\r\n  const start = getCursor(context)\r\n  let content: string\r\n\r\n  // Regular comment.\r\n  const match = /--(\\!)?>/.exec(context.source)\r\n  if (!match) {\r\n    content = context.source.slice(4)\r\n    advanceBy(context, context.source.length)\r\n    emitError(context, ErrorCodes.EOF_IN_COMMENT)\r\n  } else {\r\n    if (match.index <= 3) {\r\n      emitError(context, ErrorCodes.ABRUPT_CLOSING_OF_EMPTY_COMMENT)\r\n    }\r\n    if (match[1]) {\r\n      emitError(context, ErrorCodes.INCORRECTLY_CLOSED_COMMENT)\r\n    }\r\n    content = context.source.slice(4, match.index)\r\n\r\n    // Advancing with reporting nested comments.\r\n    const s = context.source.slice(0, match.index)\r\n    let prevIndex = 1,\r\n      nestedIndex = 0\r\n    while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {\r\n      advanceBy(context, nestedIndex - prevIndex + 1)\r\n      if (nestedIndex + 4 < s.length) {\r\n        emitError(context, ErrorCodes.NESTED_COMMENT)\r\n      }\r\n      prevIndex = nestedIndex + 1\r\n    }\r\n    advanceBy(context, match.index + match[0].length - prevIndex + 1)\r\n  }\r\n\r\n  return {\r\n    type: NodeTypes.COMMENT,\r\n    content,\r\n    loc: getSelection(context, start)\r\n  }\r\n}\r\n\r\nfunction parseBogusComment(context: ParserContext): CommentNode | undefined {\r\n  __TEST__ && assert(/^<(?:[\\!\\?]|\\/[^a-z>])/i.test(context.source))\r\n\r\n  const start = getCursor(context)\r\n  const contentStart = context.source[1] === '?' ? 1 : 2\r\n  let content: string\r\n\r\n  const closeIndex = context.source.indexOf('>')\r\n  if (closeIndex === -1) {\r\n    content = context.source.slice(contentStart)\r\n    advanceBy(context, context.source.length)\r\n  } else {\r\n    content = context.source.slice(contentStart, closeIndex)\r\n    advanceBy(context, closeIndex + 1)\r\n  }\r\n\r\n  return {\r\n    type: NodeTypes.COMMENT,\r\n    content,\r\n    loc: getSelection(context, start)\r\n  }\r\n}\r\n\r\nfunction parseElement(\r\n  context: ParserContext,\r\n  ancestors: ElementNode[]\r\n): ElementNode | undefined {\r\n  __TEST__ && assert(/^<[a-z]/i.test(context.source))\r\n\r\n  // Start tag.\r\n  const wasInPre = context.inPre\r\n  const wasInVPre = context.inVPre\r\n  const parent = last(ancestors)\r\n  const element = parseTag(context, TagType.Start, parent)\r\n  const isPreBoundary = context.inPre && !wasInPre\r\n  const isVPreBoundary = context.inVPre && !wasInVPre\r\n\r\n  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\r\n    // #4030 self-closing <pre> tag\r\n    if (isPreBoundary) {\r\n      context.inPre = false\r\n    }\r\n    if (isVPreBoundary) {\r\n      context.inVPre = false\r\n    }\r\n    return element\r\n  }\r\n\r\n  // Children.\r\n  ancestors.push(element)\r\n  const mode = context.options.getTextMode(element, parent)\r\n  const children = parseChildren(context, mode, ancestors)\r\n  ancestors.pop()\r\n\r\n  // 2.x inline-template compat\r\n  if (__COMPAT__) {\r\n    const inlineTemplateProp = element.props.find(\r\n      p => p.type === NodeTypes.ATTRIBUTE && p.name === 'inline-template'\r\n    ) as AttributeNode\r\n    if (\r\n      inlineTemplateProp &&\r\n      checkCompatEnabled(\r\n        CompilerDeprecationTypes.COMPILER_INLINE_TEMPLATE,\r\n        context,\r\n        inlineTemplateProp.loc\r\n      )\r\n    ) {\r\n      const loc = getSelection(context, element.loc.end)\r\n      inlineTemplateProp.value = {\r\n        type: NodeTypes.TEXT,\r\n        content: loc.source,\r\n        loc\r\n      }\r\n    }\r\n  }\r\n\r\n  element.children = children\r\n\r\n  // End tag.\r\n  if (startsWithEndTagOpen(context.source, element.tag)) {\r\n    parseTag(context, TagType.End, parent)\r\n  } else {\r\n    emitError(context, ErrorCodes.X_MISSING_END_TAG, 0, element.loc.start)\r\n    if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {\r\n      const first = children[0]\r\n      if (first && startsWith(first.loc.source, '<!--')) {\r\n        emitError(context, ErrorCodes.EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT)\r\n      }\r\n    }\r\n  }\r\n\r\n  element.loc = getSelection(context, element.loc.start)\r\n\r\n  if (isPreBoundary) {\r\n    context.inPre = false\r\n  }\r\n  if (isVPreBoundary) {\r\n    context.inVPre = false\r\n  }\r\n  return element\r\n}\r\n\r\nconst enum TagType {\r\n  Start,\r\n  End\r\n}\r\n\r\nconst isSpecialTemplateDirective = /*#__PURE__*/ makeMap(\r\n  `if,else,else-if,for,slot`\r\n)\r\n\r\n/**\r\n * Parse a tag (E.g. `<div id=a>`) with that type (start tag or end tag).\r\n */\r\nfunction parseTag(\r\n  context: ParserContext,\r\n  type: TagType.Start,\r\n  parent: ElementNode | undefined\r\n): ElementNode\r\nfunction parseTag(\r\n  context: ParserContext,\r\n  type: TagType.End,\r\n  parent: ElementNode | undefined\r\n): void\r\nfunction parseTag(\r\n  context: ParserContext,\r\n  type: TagType,\r\n  parent: ElementNode | undefined\r\n): ElementNode | undefined {\r\n  __TEST__ && assert(/^<\\/?[a-z]/i.test(context.source))\r\n  __TEST__ &&\r\n    assert(\r\n      type === (startsWith(context.source, '</') ? TagType.End : TagType.Start)\r\n    )\r\n\r\n  // Tag open.\r\n  const start = getCursor(context)\r\n  const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source)!\r\n  const tag = match[1]\r\n  const ns = context.options.getNamespace(tag, parent)\r\n\r\n  advanceBy(context, match[0].length)\r\n  advanceSpaces(context)\r\n\r\n  // save current state in case we need to re-parse attributes with v-pre\r\n  const cursor = getCursor(context)\r\n  const currentSource = context.source\r\n\r\n  // check <pre> tag\r\n  if (context.options.isPreTag(tag)) {\r\n    context.inPre = true\r\n  }\r\n\r\n  // Attributes.\r\n  let props = parseAttributes(context, type)\r\n\r\n  // check v-pre\r\n  if (\r\n    type === TagType.Start &&\r\n    !context.inVPre &&\r\n    props.some(p => p.type === NodeTypes.DIRECTIVE && p.name === 'pre')\r\n  ) {\r\n    context.inVPre = true\r\n    // reset context\r\n    extend(context, cursor)\r\n    context.source = currentSource\r\n    // re-parse attrs and filter out v-pre itself\r\n    props = parseAttributes(context, type).filter(p => p.name !== 'v-pre')\r\n  }\r\n\r\n  // Tag close.\r\n  let isSelfClosing = false\r\n  if (context.source.length === 0) {\r\n    emitError(context, ErrorCodes.EOF_IN_TAG)\r\n  } else {\r\n    isSelfClosing = startsWith(context.source, '/>')\r\n    if (type === TagType.End && isSelfClosing) {\r\n      emitError(context, ErrorCodes.END_TAG_WITH_TRAILING_SOLIDUS)\r\n    }\r\n    advanceBy(context, isSelfClosing ? 2 : 1)\r\n  }\r\n\r\n  if (type === TagType.End) {\r\n    return\r\n  }\r\n\r\n  // 2.x deprecation checks\r\n  if (\r\n    __COMPAT__ &&\r\n    __DEV__ &&\r\n    isCompatEnabled(\r\n      CompilerDeprecationTypes.COMPILER_V_IF_V_FOR_PRECEDENCE,\r\n      context\r\n    )\r\n  ) {\r\n    let hasIf = false\r\n    let hasFor = false\r\n    for (let i = 0; i < props.length; i++) {\r\n      const p = props[i]\r\n      if (p.type === NodeTypes.DIRECTIVE) {\r\n        if (p.name === 'if') {\r\n          hasIf = true\r\n        } else if (p.name === 'for') {\r\n          hasFor = true\r\n        }\r\n      }\r\n      if (hasIf && hasFor) {\r\n        warnDeprecation(\r\n          CompilerDeprecationTypes.COMPILER_V_IF_V_FOR_PRECEDENCE,\r\n          context,\r\n          getSelection(context, start)\r\n        )\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  let tagType = ElementTypes.ELEMENT\r\n  if (!context.inVPre) {\r\n    if (tag === 'slot') {\r\n      tagType = ElementTypes.SLOT\r\n    } else if (tag === 'template') {\r\n      if (\r\n        props.some(\r\n          p =>\r\n            p.type === NodeTypes.DIRECTIVE && isSpecialTemplateDirective(p.name)\r\n        )\r\n      ) {\r\n        tagType = ElementTypes.TEMPLATE\r\n      }\r\n    } else if (isComponent(tag, props, context)) {\r\n      tagType = ElementTypes.COMPONENT\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: NodeTypes.ELEMENT,\r\n    ns,\r\n    tag,\r\n    tagType,\r\n    props,\r\n    isSelfClosing,\r\n    children: [],\r\n    loc: getSelection(context, start),\r\n    codegenNode: undefined // to be created during transform phase\r\n  }\r\n}\r\n\r\nfunction isComponent(\r\n  tag: string,\r\n  props: (AttributeNode | DirectiveNode)[],\r\n  context: ParserContext\r\n) {\r\n  const options = context.options\r\n  if (options.isCustomElement(tag)) {\r\n    return false\r\n  }\r\n  if (\r\n    tag === 'component' ||\r\n    /^[A-Z]/.test(tag) ||\r\n    isCoreComponent(tag) ||\r\n    (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||\r\n    (options.isNativeTag && !options.isNativeTag(tag))\r\n  ) {\r\n    return true\r\n  }\r\n  // at this point the tag should be a native tag, but check for potential \"is\"\r\n  // casting\r\n  for (let i = 0; i < props.length; i++) {\r\n    const p = props[i]\r\n    if (p.type === NodeTypes.ATTRIBUTE) {\r\n      if (p.name === 'is' && p.value) {\r\n        if (p.value.content.startsWith('vue:')) {\r\n          return true\r\n        } else if (\r\n          __COMPAT__ &&\r\n          checkCompatEnabled(\r\n            CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT,\r\n            context,\r\n            p.loc\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n    } else {\r\n      // directive\r\n      // v-is (TODO Deprecate)\r\n      if (p.name === 'is') {\r\n        return true\r\n      } else if (\r\n        // :is on plain element - only treat as component in compat mode\r\n        p.name === 'bind' &&\r\n        isStaticArgOf(p.arg, 'is') &&\r\n        __COMPAT__ &&\r\n        checkCompatEnabled(\r\n          CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT,\r\n          context,\r\n          p.loc\r\n        )\r\n      ) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseAttributes(\r\n  context: ParserContext,\r\n  type: TagType\r\n): (AttributeNode | DirectiveNode)[] {\r\n  const props = []\r\n  const attributeNames = new Set<string>()\r\n  while (\r\n    context.source.length > 0 &&\r\n    !startsWith(context.source, '>') &&\r\n    !startsWith(context.source, '/>')\r\n  ) {\r\n    if (startsWith(context.source, '/')) {\r\n      emitError(context, ErrorCodes.UNEXPECTED_SOLIDUS_IN_TAG)\r\n      advanceBy(context, 1)\r\n      advanceSpaces(context)\r\n      continue\r\n    }\r\n    if (type === TagType.End) {\r\n      emitError(context, ErrorCodes.END_TAG_WITH_ATTRIBUTES)\r\n    }\r\n\r\n    const attr = parseAttribute(context, attributeNames)\r\n\r\n    // Trim whitespace between class\r\n    // https://github.com/vuejs/core/issues/4251\r\n    if (\r\n      attr.type === NodeTypes.ATTRIBUTE &&\r\n      attr.value &&\r\n      attr.name === 'class'\r\n    ) {\r\n      attr.value.content = attr.value.content.replace(/\\s+/g, ' ').trim()\r\n    }\r\n\r\n    if (type === TagType.Start) {\r\n      props.push(attr)\r\n    }\r\n\r\n    if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\r\n      emitError(context, ErrorCodes.MISSING_WHITESPACE_BETWEEN_ATTRIBUTES)\r\n    }\r\n    advanceSpaces(context)\r\n  }\r\n  return props\r\n}\r\n\r\nfunction parseAttribute(\r\n  context: ParserContext,\r\n  nameSet: Set<string>\r\n): AttributeNode | DirectiveNode {\r\n  __TEST__ && assert(/^[^\\t\\r\\n\\f />]/.test(context.source))\r\n\r\n  // Name.\r\n  const start = getCursor(context)\r\n  const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source)!\r\n  const name = match[0]\r\n\r\n  if (nameSet.has(name)) {\r\n    emitError(context, ErrorCodes.DUPLICATE_ATTRIBUTE)\r\n  }\r\n  nameSet.add(name)\r\n\r\n  if (name[0] === '=') {\r\n    emitError(context, ErrorCodes.UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME)\r\n  }\r\n  {\r\n    const pattern = /[\"'<]/g\r\n    let m: RegExpExecArray | null\r\n    while ((m = pattern.exec(name))) {\r\n      emitError(\r\n        context,\r\n        ErrorCodes.UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME,\r\n        m.index\r\n      )\r\n    }\r\n  }\r\n\r\n  advanceBy(context, name.length)\r\n\r\n  // Value\r\n  let value: AttributeValue = undefined\r\n\r\n  if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n    advanceSpaces(context)\r\n    advanceBy(context, 1)\r\n    advanceSpaces(context)\r\n    value = parseAttributeValue(context)\r\n    if (!value) {\r\n      emitError(context, ErrorCodes.MISSING_ATTRIBUTE_VALUE)\r\n    }\r\n  }\r\n  const loc = getSelection(context, start)\r\n\r\n  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\\.|@|#)/.test(name)) {\r\n    const match =\r\n      /(?:^v-([a-z0-9-]+))?(?:(?::|^\\.|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$/i.exec(\r\n        name\r\n      )!\r\n\r\n    let isPropShorthand = startsWith(name, '.')\r\n    let dirName =\r\n      match[1] ||\r\n      (isPropShorthand || startsWith(name, ':')\r\n        ? 'bind'\r\n        : startsWith(name, '@')\r\n        ? 'on'\r\n        : 'slot')\r\n    let arg: ExpressionNode | undefined\r\n\r\n    if (match[2]) {\r\n      const isSlot = dirName === 'slot'\r\n      const startOffset = name.lastIndexOf(match[2])\r\n      const loc = getSelection(\r\n        context,\r\n        getNewPosition(context, start, startOffset),\r\n        getNewPosition(\r\n          context,\r\n          start,\r\n          startOffset + match[2].length + ((isSlot && match[3]) || '').length\r\n        )\r\n      )\r\n      let content = match[2]\r\n      let isStatic = true\r\n\r\n      if (content.startsWith('[')) {\r\n        isStatic = false\r\n\r\n        if (!content.endsWith(']')) {\r\n          emitError(\r\n            context,\r\n            ErrorCodes.X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END\r\n          )\r\n          content = content.slice(1)\r\n        } else {\r\n          content = content.slice(1, content.length - 1)\r\n        }\r\n      } else if (isSlot) {\r\n        // #1241 special case for v-slot: vuetify relies extensively on slot\r\n        // names containing dots. v-slot doesn't have any modifiers and Vue 2.x\r\n        // supports such usage so we are keeping it consistent with 2.x.\r\n        content += match[3] || ''\r\n      }\r\n\r\n      arg = {\r\n        type: NodeTypes.SIMPLE_EXPRESSION,\r\n        content,\r\n        isStatic,\r\n        constType: isStatic\r\n          ? ConstantTypes.CAN_STRINGIFY\r\n          : ConstantTypes.NOT_CONSTANT,\r\n        loc\r\n      }\r\n    }\r\n\r\n    if (value && value.isQuoted) {\r\n      const valueLoc = value.loc\r\n      valueLoc.start.offset++\r\n      valueLoc.start.column++\r\n      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content)\r\n      valueLoc.source = valueLoc.source.slice(1, -1)\r\n    }\r\n\r\n    const modifiers = match[3] ? match[3].slice(1).split('.') : []\r\n    if (isPropShorthand) modifiers.push('prop')\r\n\r\n    // 2.x compat v-bind:foo.sync -> v-model:foo\r\n    if (__COMPAT__ && dirName === 'bind' && arg) {\r\n      if (\r\n        modifiers.includes('sync') &&\r\n        checkCompatEnabled(\r\n          CompilerDeprecationTypes.COMPILER_V_BIND_SYNC,\r\n          context,\r\n          loc,\r\n          arg.loc.source\r\n        )\r\n      ) {\r\n        dirName = 'model'\r\n        modifiers.splice(modifiers.indexOf('sync'), 1)\r\n      }\r\n\r\n      if (__DEV__ && modifiers.includes('prop')) {\r\n        checkCompatEnabled(\r\n          CompilerDeprecationTypes.COMPILER_V_BIND_PROP,\r\n          context,\r\n          loc\r\n        )\r\n      }\r\n    }\r\n\r\n    return {\r\n      type: NodeTypes.DIRECTIVE,\r\n      name: dirName,\r\n      exp: value && {\r\n        type: NodeTypes.SIMPLE_EXPRESSION,\r\n        content: value.content,\r\n        isStatic: false,\r\n        // Treat as non-constant by default. This can be potentially set to\r\n        // other values by `transformExpression` to make it eligible for hoisting.\r\n        constType: ConstantTypes.NOT_CONSTANT,\r\n        loc: value.loc\r\n      },\r\n      arg,\r\n      modifiers,\r\n      loc\r\n    }\r\n  }\r\n\r\n  // missing directive name or illegal directive name\r\n  if (!context.inVPre && startsWith(name, 'v-')) {\r\n    emitError(context, ErrorCodes.X_MISSING_DIRECTIVE_NAME)\r\n  }\r\n\r\n  return {\r\n    type: NodeTypes.ATTRIBUTE,\r\n    name,\r\n    value: value && {\r\n      type: NodeTypes.TEXT,\r\n      content: value.content,\r\n      loc: value.loc\r\n    },\r\n    loc\r\n  }\r\n}\r\n\r\nfunction parseAttributeValue(context: ParserContext): AttributeValue {\r\n  const start = getCursor(context)\r\n  let content: string\r\n\r\n  const quote = context.source[0]\r\n  const isQuoted = quote === `\"` || quote === `'`\r\n  if (isQuoted) {\r\n    // Quoted value.\r\n    advanceBy(context, 1)\r\n\r\n    const endIndex = context.source.indexOf(quote)\r\n    if (endIndex === -1) {\r\n      content = parseTextData(\r\n        context,\r\n        context.source.length,\r\n        TextModes.ATTRIBUTE_VALUE\r\n      )\r\n    } else {\r\n      content = parseTextData(context, endIndex, TextModes.ATTRIBUTE_VALUE)\r\n      advanceBy(context, 1)\r\n    }\r\n  } else {\r\n    // Unquoted\r\n    const match = /^[^\\t\\r\\n\\f >]+/.exec(context.source)\r\n    if (!match) {\r\n      return undefined\r\n    }\r\n    const unexpectedChars = /[\"'<=`]/g\r\n    let m: RegExpExecArray | null\r\n    while ((m = unexpectedChars.exec(match[0]))) {\r\n      emitError(\r\n        context,\r\n        ErrorCodes.UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE,\r\n        m.index\r\n      )\r\n    }\r\n    content = parseTextData(context, match[0].length, TextModes.ATTRIBUTE_VALUE)\r\n  }\r\n\r\n  return { content, isQuoted, loc: getSelection(context, start) }\r\n}\r\n\r\nfunction parseInterpolation(\r\n  context: ParserContext,\r\n  mode: TextModes\r\n): InterpolationNode | undefined {\r\n  const [open, close] = context.options.delimiters\r\n  __TEST__ && assert(startsWith(context.source, open))\r\n\r\n  const closeIndex = context.source.indexOf(close, open.length)\r\n  if (closeIndex === -1) {\r\n    emitError(context, ErrorCodes.X_MISSING_INTERPOLATION_END)\r\n    return undefined\r\n  }\r\n\r\n  const start = getCursor(context)\r\n  advanceBy(context, open.length)\r\n  const innerStart = getCursor(context)\r\n  const innerEnd = getCursor(context)\r\n  const rawContentLength = closeIndex - open.length\r\n  const rawContent = context.source.slice(0, rawContentLength)\r\n  const preTrimContent = parseTextData(context, rawContentLength, mode)\r\n  const content = preTrimContent.trim()\r\n  const startOffset = preTrimContent.indexOf(content)\r\n  if (startOffset > 0) {\r\n    advancePositionWithMutation(innerStart, rawContent, startOffset)\r\n  }\r\n  const endOffset =\r\n    rawContentLength - (preTrimContent.length - content.length - startOffset)\r\n  advancePositionWithMutation(innerEnd, rawContent, endOffset)\r\n  advanceBy(context, close.length)\r\n\r\n  return {\r\n    type: NodeTypes.INTERPOLATION,\r\n    content: {\r\n      type: NodeTypes.SIMPLE_EXPRESSION,\r\n      isStatic: false,\r\n      // Set `isConstant` to false by default and will decide in transformExpression\r\n      constType: ConstantTypes.NOT_CONSTANT,\r\n      content,\r\n      loc: getSelection(context, innerStart, innerEnd)\r\n    },\r\n    loc: getSelection(context, start)\r\n  }\r\n}\r\n\r\nfunction parseText(context: ParserContext, mode: TextModes): TextNode {\r\n  __TEST__ && assert(context.source.length > 0)\r\n\r\n  const endTokens =\r\n    mode === TextModes.CDATA ? [']]>'] : ['<', context.options.delimiters[0]]\r\n\r\n  let endIndex = context.source.length\r\n  for (let i = 0; i < endTokens.length; i++) {\r\n    const index = context.source.indexOf(endTokens[i], 1)\r\n    if (index !== -1 && endIndex > index) {\r\n      endIndex = index\r\n    }\r\n  }\r\n\r\n  __TEST__ && assert(endIndex > 0)\r\n\r\n  const start = getCursor(context)\r\n  const content = parseTextData(context, endIndex, mode)\r\n\r\n  return {\r\n    type: NodeTypes.TEXT,\r\n    content,\r\n    loc: getSelection(context, start)\r\n  }\r\n}\r\n\r\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\r\nfunction parseTextData(\r\n  context: ParserContext,\r\n  length: number,\r\n  mode: TextModes\r\n): string {\r\n  const rawText = context.source.slice(0, length)\r\n  advanceBy(context, length)\r\n  if (\r\n    mode === TextModes.RAWTEXT ||\r\n    mode === TextModes.CDATA ||\r\n    !rawText.includes('&')\r\n  ) {\r\n    return rawText\r\n  } else {\r\n    // DATA or RCDATA containing \"&\"\". Entity decoding required.\r\n    return context.options.decodeEntities(\r\n      rawText,\r\n      mode === TextModes.ATTRIBUTE_VALUE\r\n    )\r\n  }\r\n}\r\n\r\nfunction getCursor(context: ParserContext): Position {\r\n  const { column, line, offset } = context\r\n  return { column, line, offset }\r\n}\r\n\r\nfunction getSelection(\r\n  context: ParserContext,\r\n  start: Position,\r\n  end?: Position\r\n): SourceLocation {\r\n  end = end || getCursor(context)\r\n  return {\r\n    start,\r\n    end,\r\n    source: context.originalSource.slice(start.offset, end.offset)\r\n  }\r\n}\r\n\r\nfunction last<T>(xs: T[]): T | undefined {\r\n  return xs[xs.length - 1]\r\n}\r\n\r\nfunction startsWith(source: string, searchString: string): boolean {\r\n  return source.startsWith(searchString)\r\n}\r\n\r\nfunction advanceBy(context: ParserContext, numberOfCharacters: number): void {\r\n  const { source } = context\r\n  __TEST__ && assert(numberOfCharacters <= source.length)\r\n  advancePositionWithMutation(context, source, numberOfCharacters)\r\n  context.source = source.slice(numberOfCharacters)\r\n}\r\n\r\nfunction advanceSpaces(context: ParserContext): void {\r\n  const match = /^[\\t\\r\\n\\f ]+/.exec(context.source)\r\n  if (match) {\r\n    advanceBy(context, match[0].length)\r\n  }\r\n}\r\n\r\nfunction getNewPosition(\r\n  context: ParserContext,\r\n  start: Position,\r\n  numberOfCharacters: number\r\n): Position {\r\n  return advancePositionWithClone(\r\n    start,\r\n    context.originalSource.slice(start.offset, numberOfCharacters),\r\n    numberOfCharacters\r\n  )\r\n}\r\n\r\nfunction emitError(\r\n  context: ParserContext,\r\n  code: ErrorCodes,\r\n  offset?: number,\r\n  loc: Position = getCursor(context)\r\n): void {\r\n  if (offset) {\r\n    loc.offset += offset\r\n    loc.column += offset\r\n  }\r\n  context.options.onError(\r\n    createCompilerError(code, {\r\n      start: loc,\r\n      end: loc,\r\n      source: ''\r\n    })\r\n  )\r\n}\r\n\r\nfunction isEnd(\r\n  context: ParserContext,\r\n  mode: TextModes,\r\n  ancestors: ElementNode[]\r\n): boolean {\r\n  const s = context.source\r\n\r\n  switch (mode) {\r\n    case TextModes.DATA:\r\n      if (startsWith(s, '</')) {\r\n        // TODO: probably bad performance\r\n        for (let i = ancestors.length - 1; i >= 0; --i) {\r\n          if (startsWithEndTagOpen(s, ancestors[i].tag)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n      break\r\n\r\n    case TextModes.RCDATA:\r\n    case TextModes.RAWTEXT: {\r\n      const parent = last(ancestors)\r\n      if (parent && startsWithEndTagOpen(s, parent.tag)) {\r\n        return true\r\n      }\r\n      break\r\n    }\r\n\r\n    case TextModes.CDATA:\r\n      if (startsWith(s, ']]>')) {\r\n        return true\r\n      }\r\n      break\r\n  }\r\n\r\n  return !s\r\n}\r\n\r\nfunction startsWithEndTagOpen(source: string, tag: string): boolean {\r\n  return (\r\n    startsWith(source, '</') &&\r\n    source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() &&\r\n    /[\\t\\r\\n\\f />]/.test(source[2 + tag.length] || '>')\r\n  )\r\n}\r\n","import {\r\n  ConstantTypes,\r\n  RootNode,\r\n  NodeTypes,\r\n  TemplateChildNode,\r\n  SimpleExpressionNode,\r\n  ElementTypes,\r\n  PlainElementNode,\r\n  ComponentNode,\r\n  TemplateNode,\r\n  VNodeCall,\r\n  ParentNode,\r\n  JSChildNode,\r\n  CallExpression,\r\n  createArrayExpression\r\n} from '../ast'\r\nimport { TransformContext } from '../transform'\r\nimport { PatchFlags, isString, isSymbol, isArray } from '@vue/shared'\r\nimport { getVNodeBlockHelper, getVNodeHelper, isSlotOutlet } from '../utils'\r\nimport {\r\n  OPEN_BLOCK,\r\n  GUARD_REACTIVE_PROPS,\r\n  NORMALIZE_CLASS,\r\n  NORMALIZE_PROPS,\r\n  NORMALIZE_STYLE\r\n} from '../runtimeHelpers'\r\n\r\nexport function hoistStatic(root: RootNode, context: TransformContext) {\r\n  walk(\r\n    root,\r\n    context,\r\n    // Root node is unfortunately non-hoistable due to potential parent\r\n    // fallthrough attributes.\r\n    isSingleElementRoot(root, root.children[0])\r\n  )\r\n}\r\n\r\nexport function isSingleElementRoot(\r\n  root: RootNode,\r\n  child: TemplateChildNode\r\n): child is PlainElementNode | ComponentNode | TemplateNode {\r\n  const { children } = root\r\n  return (\r\n    children.length === 1 &&\r\n    child.type === NodeTypes.ELEMENT &&\r\n    !isSlotOutlet(child)\r\n  )\r\n}\r\n\r\nfunction walk(\r\n  node: ParentNode,\r\n  context: TransformContext,\r\n  doNotHoistNode: boolean = false\r\n) {\r\n  const { children } = node\r\n  const originalCount = children.length\r\n  let hoistedCount = 0\r\n\r\n  for (let i = 0; i < children.length; i++) {\r\n    const child = children[i]\r\n    // only plain elements & text calls are eligible for hoisting.\r\n    if (\r\n      child.type === NodeTypes.ELEMENT &&\r\n      child.tagType === ElementTypes.ELEMENT\r\n    ) {\r\n      const constantType = doNotHoistNode\r\n        ? ConstantTypes.NOT_CONSTANT\r\n        : getConstantType(child, context)\r\n      if (constantType > ConstantTypes.NOT_CONSTANT) {\r\n        if (constantType >= ConstantTypes.CAN_HOIST) {\r\n          ;(child.codegenNode as VNodeCall).patchFlag =\r\n            PatchFlags.HOISTED + (__DEV__ ? ` /* HOISTED */` : ``)\r\n          child.codegenNode = context.hoist(child.codegenNode!)\r\n          hoistedCount++\r\n          continue\r\n        }\r\n      } else {\r\n        // node may contain dynamic children, but its props may be eligible for\r\n        // hoisting.\r\n        const codegenNode = child.codegenNode!\r\n        if (codegenNode.type === NodeTypes.VNODE_CALL) {\r\n          const flag = getPatchFlag(codegenNode)\r\n          if (\r\n            (!flag ||\r\n              flag === PatchFlags.NEED_PATCH ||\r\n              flag === PatchFlags.TEXT) &&\r\n            getGeneratedPropsConstantType(child, context) >=\r\n              ConstantTypes.CAN_HOIST\r\n          ) {\r\n            const props = getNodeProps(child)\r\n            if (props) {\r\n              codegenNode.props = context.hoist(props)\r\n            }\r\n          }\r\n          if (codegenNode.dynamicProps) {\r\n            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps)\r\n          }\r\n        }\r\n      }\r\n    } else if (\r\n      child.type === NodeTypes.TEXT_CALL &&\r\n      getConstantType(child.content, context) >= ConstantTypes.CAN_HOIST\r\n    ) {\r\n      child.codegenNode = context.hoist(child.codegenNode)\r\n      hoistedCount++\r\n    }\r\n\r\n    // walk further\r\n    if (child.type === NodeTypes.ELEMENT) {\r\n      const isComponent = child.tagType === ElementTypes.COMPONENT\r\n      if (isComponent) {\r\n        context.scopes.vSlot++\r\n      }\r\n      walk(child, context)\r\n      if (isComponent) {\r\n        context.scopes.vSlot--\r\n      }\r\n    } else if (child.type === NodeTypes.FOR) {\r\n      // Do not hoist v-for single child because it has to be a block\r\n      walk(child, context, child.children.length === 1)\r\n    } else if (child.type === NodeTypes.IF) {\r\n      for (let i = 0; i < child.branches.length; i++) {\r\n        // Do not hoist v-if single child because it has to be a block\r\n        walk(\r\n          child.branches[i],\r\n          context,\r\n          child.branches[i].children.length === 1\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  if (hoistedCount && context.transformHoist) {\r\n    context.transformHoist(children, context, node)\r\n  }\r\n\r\n  // all children were hoisted - the entire children array is hoistable.\r\n  if (\r\n    hoistedCount &&\r\n    hoistedCount === originalCount &&\r\n    node.type === NodeTypes.ELEMENT &&\r\n    node.tagType === ElementTypes.ELEMENT &&\r\n    node.codegenNode &&\r\n    node.codegenNode.type === NodeTypes.VNODE_CALL &&\r\n    isArray(node.codegenNode.children)\r\n  ) {\r\n    node.codegenNode.children = context.hoist(\r\n      createArrayExpression(node.codegenNode.children)\r\n    )\r\n  }\r\n}\r\n\r\nexport function getConstantType(\r\n  node: TemplateChildNode | SimpleExpressionNode,\r\n  context: TransformContext\r\n): ConstantTypes {\r\n  const { constantCache } = context\r\n  switch (node.type) {\r\n    case NodeTypes.ELEMENT:\r\n      if (node.tagType !== ElementTypes.ELEMENT) {\r\n        return ConstantTypes.NOT_CONSTANT\r\n      }\r\n      const cached = constantCache.get(node)\r\n      if (cached !== undefined) {\r\n        return cached\r\n      }\r\n      const codegenNode = node.codegenNode!\r\n      if (codegenNode.type !== NodeTypes.VNODE_CALL) {\r\n        return ConstantTypes.NOT_CONSTANT\r\n      }\r\n      if (\r\n        codegenNode.isBlock &&\r\n        node.tag !== 'svg' &&\r\n        node.tag !== 'foreignObject'\r\n      ) {\r\n        return ConstantTypes.NOT_CONSTANT\r\n      }\r\n      const flag = getPatchFlag(codegenNode)\r\n      if (!flag) {\r\n        let returnType = ConstantTypes.CAN_STRINGIFY\r\n\r\n        // Element itself has no patch flag. However we still need to check:\r\n\r\n        // 1. Even for a node with no patch flag, it is possible for it to contain\r\n        // non-hoistable expressions that refers to scope variables, e.g. compiler\r\n        // injected keys or cached event handlers. Therefore we need to always\r\n        // check the codegenNode's props to be sure.\r\n        const generatedPropsType = getGeneratedPropsConstantType(node, context)\r\n        if (generatedPropsType === ConstantTypes.NOT_CONSTANT) {\r\n          constantCache.set(node, ConstantTypes.NOT_CONSTANT)\r\n          return ConstantTypes.NOT_CONSTANT\r\n        }\r\n        if (generatedPropsType < returnType) {\r\n          returnType = generatedPropsType\r\n        }\r\n\r\n        // 2. its children.\r\n        for (let i = 0; i < node.children.length; i++) {\r\n          const childType = getConstantType(node.children[i], context)\r\n          if (childType === ConstantTypes.NOT_CONSTANT) {\r\n            constantCache.set(node, ConstantTypes.NOT_CONSTANT)\r\n            return ConstantTypes.NOT_CONSTANT\r\n          }\r\n          if (childType < returnType) {\r\n            returnType = childType\r\n          }\r\n        }\r\n\r\n        // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0\r\n        // type, check if any of the props can cause the type to be lowered\r\n        // we can skip can_patch because it's guaranteed by the absence of a\r\n        // patchFlag.\r\n        if (returnType > ConstantTypes.CAN_SKIP_PATCH) {\r\n          for (let i = 0; i < node.props.length; i++) {\r\n            const p = node.props[i]\r\n            if (p.type === NodeTypes.DIRECTIVE && p.name === 'bind' && p.exp) {\r\n              const expType = getConstantType(p.exp, context)\r\n              if (expType === ConstantTypes.NOT_CONSTANT) {\r\n                constantCache.set(node, ConstantTypes.NOT_CONSTANT)\r\n                return ConstantTypes.NOT_CONSTANT\r\n              }\r\n              if (expType < returnType) {\r\n                returnType = expType\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // only svg/foreignObject could be block here, however if they are\r\n        // static then they don't need to be blocks since there will be no\r\n        // nested updates.\r\n        if (codegenNode.isBlock) {\r\n          // except set custom directives.\r\n          for (let i = 0; i < node.props.length; i++) {\r\n            const p = node.props[i]\r\n            if (p.type === NodeTypes.DIRECTIVE) {\r\n              constantCache.set(node, ConstantTypes.NOT_CONSTANT)\r\n              return ConstantTypes.NOT_CONSTANT\r\n            }\r\n          }\r\n\r\n          context.removeHelper(OPEN_BLOCK)\r\n          context.removeHelper(\r\n            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)\r\n          )\r\n          codegenNode.isBlock = false\r\n          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent))\r\n        }\r\n\r\n        constantCache.set(node, returnType)\r\n        return returnType\r\n      } else {\r\n        constantCache.set(node, ConstantTypes.NOT_CONSTANT)\r\n        return ConstantTypes.NOT_CONSTANT\r\n      }\r\n    case NodeTypes.TEXT:\r\n    case NodeTypes.COMMENT:\r\n      return ConstantTypes.CAN_STRINGIFY\r\n    case NodeTypes.IF:\r\n    case NodeTypes.FOR:\r\n    case NodeTypes.IF_BRANCH:\r\n      return ConstantTypes.NOT_CONSTANT\r\n    case NodeTypes.INTERPOLATION:\r\n    case NodeTypes.TEXT_CALL:\r\n      return getConstantType(node.content, context)\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      return node.constType\r\n    case NodeTypes.COMPOUND_EXPRESSION:\r\n      let returnType = ConstantTypes.CAN_STRINGIFY\r\n      for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i]\r\n        if (isString(child) || isSymbol(child)) {\r\n          continue\r\n        }\r\n        const childType = getConstantType(child, context)\r\n        if (childType === ConstantTypes.NOT_CONSTANT) {\r\n          return ConstantTypes.NOT_CONSTANT\r\n        } else if (childType < returnType) {\r\n          returnType = childType\r\n        }\r\n      }\r\n      return returnType\r\n    default:\r\n      if (__DEV__) {\r\n        const exhaustiveCheck: never = node\r\n        exhaustiveCheck\r\n      }\r\n      return ConstantTypes.NOT_CONSTANT\r\n  }\r\n}\r\n\r\nconst allowHoistedHelperSet = new Set([\r\n  NORMALIZE_CLASS,\r\n  NORMALIZE_STYLE,\r\n  NORMALIZE_PROPS,\r\n  GUARD_REACTIVE_PROPS\r\n])\r\n\r\nfunction getConstantTypeOfHelperCall(\r\n  value: CallExpression,\r\n  context: TransformContext\r\n): ConstantTypes {\r\n  if (\r\n    value.type === NodeTypes.JS_CALL_EXPRESSION &&\r\n    !isString(value.callee) &&\r\n    allowHoistedHelperSet.has(value.callee)\r\n  ) {\r\n    const arg = value.arguments[0] as JSChildNode\r\n    if (arg.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n      return getConstantType(arg, context)\r\n    } else if (arg.type === NodeTypes.JS_CALL_EXPRESSION) {\r\n      // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(exp))`\r\n      return getConstantTypeOfHelperCall(arg, context)\r\n    }\r\n  }\r\n  return ConstantTypes.NOT_CONSTANT\r\n}\r\n\r\nfunction getGeneratedPropsConstantType(\r\n  node: PlainElementNode,\r\n  context: TransformContext\r\n): ConstantTypes {\r\n  let returnType = ConstantTypes.CAN_STRINGIFY\r\n  const props = getNodeProps(node)\r\n  if (props && props.type === NodeTypes.JS_OBJECT_EXPRESSION) {\r\n    const { properties } = props\r\n    for (let i = 0; i < properties.length; i++) {\r\n      const { key, value } = properties[i]\r\n      const keyType = getConstantType(key, context)\r\n      if (keyType === ConstantTypes.NOT_CONSTANT) {\r\n        return keyType\r\n      }\r\n      if (keyType < returnType) {\r\n        returnType = keyType\r\n      }\r\n      let valueType: ConstantTypes\r\n      if (value.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n        valueType = getConstantType(value, context)\r\n      } else if (value.type === NodeTypes.JS_CALL_EXPRESSION) {\r\n        // some helper calls can be hoisted,\r\n        // such as the `normalizeProps` generated by the compiler for pre-normalize class,\r\n        // in this case we need to respect the ConstantType of the helper's arguments\r\n        valueType = getConstantTypeOfHelperCall(value, context)\r\n      } else {\r\n        valueType = ConstantTypes.NOT_CONSTANT\r\n      }\r\n      if (valueType === ConstantTypes.NOT_CONSTANT) {\r\n        return valueType\r\n      }\r\n      if (valueType < returnType) {\r\n        returnType = valueType\r\n      }\r\n    }\r\n  }\r\n  return returnType\r\n}\r\n\r\nfunction getNodeProps(node: PlainElementNode) {\r\n  const codegenNode = node.codegenNode!\r\n  if (codegenNode.type === NodeTypes.VNODE_CALL) {\r\n    return codegenNode.props\r\n  }\r\n}\r\n\r\nfunction getPatchFlag(node: VNodeCall): number | undefined {\r\n  const flag = node.patchFlag\r\n  return flag ? parseInt(flag, 10) : undefined\r\n}\r\n","import { TransformOptions } from './options'\r\nimport {\r\n  RootNode,\r\n  NodeTypes,\r\n  ParentNode,\r\n  TemplateChildNode,\r\n  ElementNode,\r\n  DirectiveNode,\r\n  Property,\r\n  ExpressionNode,\r\n  createSimpleExpression,\r\n  JSChildNode,\r\n  SimpleExpressionNode,\r\n  ElementTypes,\r\n  CacheExpression,\r\n  createCacheExpression,\r\n  TemplateLiteral,\r\n  createVNodeCall,\r\n  ConstantTypes,\r\n  ArrayExpression\r\n} from './ast'\r\nimport {\r\n  isString,\r\n  isArray,\r\n  NOOP,\r\n  PatchFlags,\r\n  PatchFlagNames,\r\n  EMPTY_OBJ,\r\n  capitalize,\r\n  camelize\r\n} from '@vue/shared'\r\nimport { defaultOnError, defaultOnWarn } from './errors'\r\nimport {\r\n  TO_DISPLAY_STRING,\r\n  FRAGMENT,\r\n  helperNameMap,\r\n  CREATE_COMMENT\r\n} from './runtimeHelpers'\r\nimport { isVSlot, makeBlock } from './utils'\r\nimport { hoistStatic, isSingleElementRoot } from './transforms/hoistStatic'\r\nimport { CompilerCompatOptions } from './compat/compatConfig'\r\n\r\n// There are two types of transforms:\r\n//\r\n// - NodeTransform:\r\n//   Transforms that operate directly on a ChildNode. NodeTransforms may mutate,\r\n//   replace or remove the node being processed.\r\nexport type NodeTransform = (\r\n  node: RootNode | TemplateChildNode,\r\n  context: TransformContext\r\n) => void | (() => void) | (() => void)[]\r\n\r\n// - DirectiveTransform:\r\n//   Transforms that handles a single directive attribute on an element.\r\n//   It translates the raw directive into actual props for the VNode.\r\nexport type DirectiveTransform = (\r\n  dir: DirectiveNode,\r\n  node: ElementNode,\r\n  context: TransformContext,\r\n  // a platform specific compiler can import the base transform and augment\r\n  // it by passing in this optional argument.\r\n  augmentor?: (ret: DirectiveTransformResult) => DirectiveTransformResult\r\n) => DirectiveTransformResult\r\n\r\nexport interface DirectiveTransformResult {\r\n  props: Property[]\r\n  needRuntime?: boolean | symbol\r\n  ssrTagParts?: TemplateLiteral['elements']\r\n}\r\n\r\n// A structural directive transform is technically also a NodeTransform;\r\n// Only v-if and v-for fall into this category.\r\nexport type StructuralDirectiveTransform = (\r\n  node: ElementNode,\r\n  dir: DirectiveNode,\r\n  context: TransformContext\r\n) => void | (() => void)\r\n\r\nexport interface ImportItem {\r\n  exp: string | ExpressionNode\r\n  path: string\r\n}\r\n\r\nexport interface TransformContext\r\n  extends Required<\r\n      Omit<TransformOptions, 'filename' | keyof CompilerCompatOptions>\r\n    >,\r\n    CompilerCompatOptions {\r\n  selfName: string | null\r\n  root: RootNode\r\n  helpers: Map<symbol, number>\r\n  components: Set<string>\r\n  directives: Set<string>\r\n  hoists: (JSChildNode | null)[]\r\n  imports: ImportItem[]\r\n  temps: number\r\n  cached: number\r\n  identifiers: { [name: string]: number | undefined }\r\n  scopes: {\r\n    vFor: number\r\n    vSlot: number\r\n    vPre: number\r\n    vOnce: number\r\n  }\r\n  parent: ParentNode | null\r\n  childIndex: number\r\n  currentNode: RootNode | TemplateChildNode | null\r\n  inVOnce: boolean\r\n  helper<T extends symbol>(name: T): T\r\n  removeHelper<T extends symbol>(name: T): void\r\n  helperString(name: symbol): string\r\n  replaceNode(node: TemplateChildNode): void\r\n  removeNode(node?: TemplateChildNode): void\r\n  onNodeRemoved(): void\r\n  addIdentifiers(exp: ExpressionNode | string): void\r\n  removeIdentifiers(exp: ExpressionNode | string): void\r\n  hoist(exp: string | JSChildNode | ArrayExpression): SimpleExpressionNode\r\n  cache<T extends JSChildNode>(exp: T, isVNode?: boolean): CacheExpression | T\r\n  constantCache: Map<TemplateChildNode, ConstantTypes>\r\n\r\n  // 2.x Compat only\r\n  filters?: Set<string>\r\n}\r\n\r\nexport function createTransformContext(\r\n  root: RootNode,\r\n  {\r\n    filename = '',\r\n    prefixIdentifiers = false,\r\n    hoistStatic = false,\r\n    cacheHandlers = false,\r\n    nodeTransforms = [],\r\n    directiveTransforms = {},\r\n    transformHoist = null,\r\n    isBuiltInComponent = NOOP,\r\n    isCustomElement = NOOP,\r\n    expressionPlugins = [],\r\n    scopeId = null,\r\n    slotted = true,\r\n    ssr = false,\r\n    inSSR = false,\r\n    ssrCssVars = ``,\r\n    bindingMetadata = EMPTY_OBJ,\r\n    inline = false,\r\n    isTS = false,\r\n    onError = defaultOnError,\r\n    onWarn = defaultOnWarn,\r\n    compatConfig\r\n  }: TransformOptions\r\n): TransformContext {\r\n  const nameMatch = filename.replace(/\\?.*$/, '').match(/([^/\\\\]+)\\.\\w+$/)\r\n  const context: TransformContext = {\r\n    // options\r\n    selfName: nameMatch && capitalize(camelize(nameMatch[1])),\r\n    prefixIdentifiers,\r\n    hoistStatic,\r\n    cacheHandlers,\r\n    nodeTransforms,\r\n    directiveTransforms,\r\n    transformHoist,\r\n    isBuiltInComponent,\r\n    isCustomElement,\r\n    expressionPlugins,\r\n    scopeId,\r\n    slotted,\r\n    ssr,\r\n    inSSR,\r\n    ssrCssVars,\r\n    bindingMetadata,\r\n    inline,\r\n    isTS,\r\n    onError,\r\n    onWarn,\r\n    compatConfig,\r\n\r\n    // state\r\n    root,\r\n    helpers: new Map(),\r\n    components: new Set(),\r\n    directives: new Set(),\r\n    hoists: [],\r\n    imports: [],\r\n    constantCache: new Map(),\r\n    temps: 0,\r\n    cached: 0,\r\n    identifiers: Object.create(null),\r\n    scopes: {\r\n      vFor: 0,\r\n      vSlot: 0,\r\n      vPre: 0,\r\n      vOnce: 0\r\n    },\r\n    parent: null,\r\n    currentNode: root,\r\n    childIndex: 0,\r\n    inVOnce: false,\r\n\r\n    // methods\r\n    helper(name) {\r\n      const count = context.helpers.get(name) || 0\r\n      context.helpers.set(name, count + 1)\r\n      return name\r\n    },\r\n    removeHelper(name) {\r\n      const count = context.helpers.get(name)\r\n      if (count) {\r\n        const currentCount = count - 1\r\n        if (!currentCount) {\r\n          context.helpers.delete(name)\r\n        } else {\r\n          context.helpers.set(name, currentCount)\r\n        }\r\n      }\r\n    },\r\n    helperString(name) {\r\n      return `_${helperNameMap[context.helper(name)]}`\r\n    },\r\n    replaceNode(node) {\r\n      /* istanbul ignore if */\r\n      if (__DEV__) {\r\n        if (!context.currentNode) {\r\n          throw new Error(`Node being replaced is already removed.`)\r\n        }\r\n        if (!context.parent) {\r\n          throw new Error(`Cannot replace root node.`)\r\n        }\r\n      }\r\n      context.parent!.children[context.childIndex] = context.currentNode = node\r\n    },\r\n    removeNode(node) {\r\n      if (__DEV__ && !context.parent) {\r\n        throw new Error(`Cannot remove root node.`)\r\n      }\r\n      const list = context.parent!.children\r\n      const removalIndex = node\r\n        ? list.indexOf(node)\r\n        : context.currentNode\r\n        ? context.childIndex\r\n        : -1\r\n      /* istanbul ignore if */\r\n      if (__DEV__ && removalIndex < 0) {\r\n        throw new Error(`node being removed is not a child of current parent`)\r\n      }\r\n      if (!node || node === context.currentNode) {\r\n        // current node removed\r\n        context.currentNode = null\r\n        context.onNodeRemoved()\r\n      } else {\r\n        // sibling node removed\r\n        if (context.childIndex > removalIndex) {\r\n          context.childIndex--\r\n          context.onNodeRemoved()\r\n        }\r\n      }\r\n      context.parent!.children.splice(removalIndex, 1)\r\n    },\r\n    onNodeRemoved: () => {},\r\n    addIdentifiers(exp) {\r\n      // identifier tracking only happens in non-browser builds.\r\n      if (!__BROWSER__) {\r\n        if (isString(exp)) {\r\n          addId(exp)\r\n        } else if (exp.identifiers) {\r\n          exp.identifiers.forEach(addId)\r\n        } else if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n          addId(exp.content)\r\n        }\r\n      }\r\n    },\r\n    removeIdentifiers(exp) {\r\n      if (!__BROWSER__) {\r\n        if (isString(exp)) {\r\n          removeId(exp)\r\n        } else if (exp.identifiers) {\r\n          exp.identifiers.forEach(removeId)\r\n        } else if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n          removeId(exp.content)\r\n        }\r\n      }\r\n    },\r\n    hoist(exp) {\r\n      if (isString(exp)) exp = createSimpleExpression(exp)\r\n      context.hoists.push(exp)\r\n      const identifier = createSimpleExpression(\r\n        `_hoisted_${context.hoists.length}`,\r\n        false,\r\n        exp.loc,\r\n        ConstantTypes.CAN_HOIST\r\n      )\r\n      identifier.hoisted = exp\r\n      return identifier\r\n    },\r\n    cache(exp, isVNode = false) {\r\n      return createCacheExpression(context.cached++, exp, isVNode)\r\n    }\r\n  }\r\n\r\n  if (__COMPAT__) {\r\n    context.filters = new Set()\r\n  }\r\n\r\n  function addId(id: string) {\r\n    const { identifiers } = context\r\n    if (identifiers[id] === undefined) {\r\n      identifiers[id] = 0\r\n    }\r\n    identifiers[id]!++\r\n  }\r\n\r\n  function removeId(id: string) {\r\n    context.identifiers[id]!--\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport function transform(root: RootNode, options: TransformOptions) {\r\n  const context = createTransformContext(root, options)\r\n  traverseNode(root, context)\r\n  if (options.hoistStatic) {\r\n    hoistStatic(root, context)\r\n  }\r\n  if (!options.ssr) {\r\n    createRootCodegen(root, context)\r\n  }\r\n  // finalize meta information\r\n  root.helpers = [...context.helpers.keys()]\r\n  root.components = [...context.components]\r\n  root.directives = [...context.directives]\r\n  root.imports = context.imports\r\n  root.hoists = context.hoists\r\n  root.temps = context.temps\r\n  root.cached = context.cached\r\n\r\n  if (__COMPAT__) {\r\n    root.filters = [...context.filters!]\r\n  }\r\n}\r\n\r\nfunction createRootCodegen(root: RootNode, context: TransformContext) {\r\n  const { helper } = context\r\n  const { children } = root\r\n  if (children.length === 1) {\r\n    const child = children[0]\r\n    // if the single child is an element, turn it into a block.\r\n    if (isSingleElementRoot(root, child) && child.codegenNode) {\r\n      // single element root is never hoisted so codegenNode will never be\r\n      // SimpleExpressionNode\r\n      const codegenNode = child.codegenNode\r\n      if (codegenNode.type === NodeTypes.VNODE_CALL) {\r\n        makeBlock(codegenNode, context)\r\n      }\r\n      root.codegenNode = codegenNode\r\n    } else {\r\n      // - single <slot/>, IfNode, ForNode: already blocks.\r\n      // - single text node: always patched.\r\n      // root codegen falls through via genNode()\r\n      root.codegenNode = child\r\n    }\r\n  } else if (children.length > 1) {\r\n    // root has multiple nodes - return a fragment block.\r\n    let patchFlag = PatchFlags.STABLE_FRAGMENT\r\n    let patchFlagText = PatchFlagNames[PatchFlags.STABLE_FRAGMENT]\r\n    // check if the fragment actually contains a single valid child with\r\n    // the rest being comments\r\n    if (\r\n      __DEV__ &&\r\n      children.filter(c => c.type !== NodeTypes.COMMENT).length === 1\r\n    ) {\r\n      patchFlag |= PatchFlags.DEV_ROOT_FRAGMENT\r\n      patchFlagText += `, ${PatchFlagNames[PatchFlags.DEV_ROOT_FRAGMENT]}`\r\n    }\r\n    root.codegenNode = createVNodeCall(\r\n      context,\r\n      helper(FRAGMENT),\r\n      undefined,\r\n      root.children,\r\n      patchFlag + (__DEV__ ? ` /* ${patchFlagText} */` : ``),\r\n      undefined,\r\n      undefined,\r\n      true,\r\n      undefined,\r\n      false /* isComponent */\r\n    )\r\n  } else {\r\n    // no children = noop. codegen will return null.\r\n  }\r\n}\r\n\r\nexport function traverseChildren(\r\n  parent: ParentNode,\r\n  context: TransformContext\r\n) {\r\n  let i = 0\r\n  const nodeRemoved = () => {\r\n    i--\r\n  }\r\n  for (; i < parent.children.length; i++) {\r\n    const child = parent.children[i]\r\n    if (isString(child)) continue\r\n    context.parent = parent\r\n    context.childIndex = i\r\n    context.onNodeRemoved = nodeRemoved\r\n    traverseNode(child, context)\r\n  }\r\n}\r\n\r\nexport function traverseNode(\r\n  node: RootNode | TemplateChildNode,\r\n  context: TransformContext\r\n) {\r\n  context.currentNode = node\r\n  // apply transform plugins\r\n  const { nodeTransforms } = context\r\n  const exitFns = []\r\n  for (let i = 0; i < nodeTransforms.length; i++) {\r\n    const onExit = nodeTransforms[i](node, context)\r\n    if (onExit) {\r\n      if (isArray(onExit)) {\r\n        exitFns.push(...onExit)\r\n      } else {\r\n        exitFns.push(onExit)\r\n      }\r\n    }\r\n    if (!context.currentNode) {\r\n      // node was removed\r\n      return\r\n    } else {\r\n      // node may have been replaced\r\n      node = context.currentNode\r\n    }\r\n  }\r\n\r\n  switch (node.type) {\r\n    case NodeTypes.COMMENT:\r\n      if (!context.ssr) {\r\n        // inject import for the Comment symbol, which is needed for creating\r\n        // comment nodes with `createVNode`\r\n        context.helper(CREATE_COMMENT)\r\n      }\r\n      break\r\n    case NodeTypes.INTERPOLATION:\r\n      // no need to traverse, but we need to inject toString helper\r\n      if (!context.ssr) {\r\n        context.helper(TO_DISPLAY_STRING)\r\n      }\r\n      break\r\n\r\n    // for container types, further traverse downwards\r\n    case NodeTypes.IF:\r\n      for (let i = 0; i < node.branches.length; i++) {\r\n        traverseNode(node.branches[i], context)\r\n      }\r\n      break\r\n    case NodeTypes.IF_BRANCH:\r\n    case NodeTypes.FOR:\r\n    case NodeTypes.ELEMENT:\r\n    case NodeTypes.ROOT:\r\n      traverseChildren(node, context)\r\n      break\r\n  }\r\n\r\n  // exit transforms\r\n  context.currentNode = node\r\n  let i = exitFns.length\r\n  while (i--) {\r\n    exitFns[i]()\r\n  }\r\n}\r\n\r\nexport function createStructuralDirectiveTransform(\r\n  name: string | RegExp,\r\n  fn: StructuralDirectiveTransform\r\n): NodeTransform {\r\n  const matches = isString(name)\r\n    ? (n: string) => n === name\r\n    : (n: string) => name.test(n)\r\n\r\n  return (node, context) => {\r\n    if (node.type === NodeTypes.ELEMENT) {\r\n      const { props } = node\r\n      // structural directive transforms are not concerned with slots\r\n      // as they are handled separately in vSlot.ts\r\n      if (node.tagType === ElementTypes.TEMPLATE && props.some(isVSlot)) {\r\n        return\r\n      }\r\n      const exitFns = []\r\n      for (let i = 0; i < props.length; i++) {\r\n        const prop = props[i]\r\n        if (prop.type === NodeTypes.DIRECTIVE && matches(prop.name)) {\r\n          // structural directives are removed to avoid infinite recursion\r\n          // also we remove them *before* applying so that it can further\r\n          // traverse itself in case it moves the node around\r\n          props.splice(i, 1)\r\n          i--\r\n          const onExit = fn(node, prop, context)\r\n          if (onExit) exitFns.push(onExit)\r\n        }\r\n      }\r\n      return exitFns\r\n    }\r\n  }\r\n}\r\n","import { CodegenOptions } from './options'\r\nimport {\r\n  RootNode,\r\n  TemplateChildNode,\r\n  TextNode,\r\n  CommentNode,\r\n  ExpressionNode,\r\n  NodeTypes,\r\n  JSChildNode,\r\n  CallExpression,\r\n  ArrayExpression,\r\n  ObjectExpression,\r\n  Position,\r\n  InterpolationNode,\r\n  CompoundExpressionNode,\r\n  SimpleExpressionNode,\r\n  FunctionExpression,\r\n  ConditionalExpression,\r\n  CacheExpression,\r\n  locStub,\r\n  SSRCodegenNode,\r\n  TemplateLiteral,\r\n  IfStatement,\r\n  AssignmentExpression,\r\n  ReturnStatement,\r\n  VNodeCall,\r\n  SequenceExpression\r\n} from './ast'\r\nimport { SourceMapGenerator, RawSourceMap } from 'source-map'\r\nimport {\r\n  advancePositionWithMutation,\r\n  assert,\r\n  getVNodeBlockHelper,\r\n  getVNodeHelper,\r\n  isSimpleIdentifier,\r\n  toValidAssetId\r\n} from './utils'\r\nimport { isString, isArray, isSymbol } from '@vue/shared'\r\nimport {\r\n  helperNameMap,\r\n  TO_DISPLAY_STRING,\r\n  CREATE_VNODE,\r\n  RESOLVE_COMPONENT,\r\n  RESOLVE_DIRECTIVE,\r\n  SET_BLOCK_TRACKING,\r\n  CREATE_COMMENT,\r\n  CREATE_TEXT,\r\n  PUSH_SCOPE_ID,\r\n  POP_SCOPE_ID,\r\n  WITH_DIRECTIVES,\r\n  CREATE_ELEMENT_VNODE,\r\n  OPEN_BLOCK,\r\n  CREATE_STATIC,\r\n  WITH_CTX,\r\n  RESOLVE_FILTER\r\n} from './runtimeHelpers'\r\nimport { ImportItem } from './transform'\r\n\r\nconst PURE_ANNOTATION = `/*#__PURE__*/`\r\n\r\nconst aliasHelper = (s: symbol) => `${helperNameMap[s]}: _${helperNameMap[s]}`\r\n\r\ntype CodegenNode = TemplateChildNode | JSChildNode | SSRCodegenNode\r\n\r\nexport interface CodegenResult {\r\n  code: string\r\n  preamble: string\r\n  ast: RootNode\r\n  map?: RawSourceMap\r\n}\r\n\r\nexport interface CodegenContext\r\n  extends Omit<Required<CodegenOptions>, 'bindingMetadata' | 'inline'> {\r\n  source: string\r\n  code: string\r\n  line: number\r\n  column: number\r\n  offset: number\r\n  indentLevel: number\r\n  pure: boolean\r\n  map?: SourceMapGenerator\r\n  helper(key: symbol): string\r\n  push(code: string, node?: CodegenNode): void\r\n  indent(): void\r\n  deindent(withoutNewLine?: boolean): void\r\n  newline(): void\r\n}\r\n\r\nfunction createCodegenContext(\r\n  ast: RootNode,\r\n  {\r\n    mode = 'function',\r\n    prefixIdentifiers = mode === 'module',\r\n    sourceMap = false,\r\n    filename = `template.vue.html`,\r\n    scopeId = null,\r\n    optimizeImports = false,\r\n    runtimeGlobalName = `Vue`,\r\n    runtimeModuleName = `vue`,\r\n    ssrRuntimeModuleName = 'vue/server-renderer',\r\n    ssr = false,\r\n    isTS = false,\r\n    inSSR = false\r\n  }: CodegenOptions\r\n): CodegenContext {\r\n  const context: CodegenContext = {\r\n    mode,\r\n    prefixIdentifiers,\r\n    sourceMap,\r\n    filename,\r\n    scopeId,\r\n    optimizeImports,\r\n    runtimeGlobalName,\r\n    runtimeModuleName,\r\n    ssrRuntimeModuleName,\r\n    ssr,\r\n    isTS,\r\n    inSSR,\r\n    source: ast.loc.source,\r\n    code: ``,\r\n    column: 1,\r\n    line: 1,\r\n    offset: 0,\r\n    indentLevel: 0,\r\n    pure: false,\r\n    map: undefined,\r\n    helper(key) {\r\n      return `_${helperNameMap[key]}`\r\n    },\r\n    push(code, node) {\r\n      context.code += code\r\n      if (!__BROWSER__ && context.map) {\r\n        if (node) {\r\n          let name\r\n          if (node.type === NodeTypes.SIMPLE_EXPRESSION && !node.isStatic) {\r\n            const content = node.content.replace(/^_ctx\\./, '')\r\n            if (content !== node.content && isSimpleIdentifier(content)) {\r\n              name = content\r\n            }\r\n          }\r\n          addMapping(node.loc.start, name)\r\n        }\r\n        advancePositionWithMutation(context, code)\r\n        if (node && node.loc !== locStub) {\r\n          addMapping(node.loc.end)\r\n        }\r\n      }\r\n    },\r\n    indent() {\r\n      newline(++context.indentLevel)\r\n    },\r\n    deindent(withoutNewLine = false) {\r\n      if (withoutNewLine) {\r\n        --context.indentLevel\r\n      } else {\r\n        newline(--context.indentLevel)\r\n      }\r\n    },\r\n    newline() {\r\n      newline(context.indentLevel)\r\n    }\r\n  }\r\n\r\n  function newline(n: number) {\r\n    context.push('\\n' + `  `.repeat(n))\r\n  }\r\n\r\n  function addMapping(loc: Position, name?: string) {\r\n    context.map!.addMapping({\r\n      name,\r\n      source: context.filename,\r\n      original: {\r\n        line: loc.line,\r\n        column: loc.column - 1 // source-map column is 0 based\r\n      },\r\n      generated: {\r\n        line: context.line,\r\n        column: context.column - 1\r\n      }\r\n    })\r\n  }\r\n\r\n  if (!__BROWSER__ && sourceMap) {\r\n    // lazy require source-map implementation, only in non-browser builds\r\n    context.map = new SourceMapGenerator()\r\n    context.map!.setSourceContent(filename, context.source)\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport function generate(\r\n  ast: RootNode,\r\n  options: CodegenOptions & {\r\n    onContextCreated?: (context: CodegenContext) => void\r\n  } = {}\r\n): CodegenResult {\r\n  const context = createCodegenContext(ast, options)\r\n  if (options.onContextCreated) options.onContextCreated(context)\r\n  const {\r\n    mode,\r\n    push,\r\n    prefixIdentifiers,\r\n    indent,\r\n    deindent,\r\n    newline,\r\n    scopeId,\r\n    ssr\r\n  } = context\r\n\r\n  const hasHelpers = ast.helpers.length > 0\r\n  const useWithBlock = !prefixIdentifiers && mode !== 'module'\r\n  const genScopeId = !__BROWSER__ && scopeId != null && mode === 'module'\r\n  const isSetupInlined = !__BROWSER__ && !!options.inline\r\n\r\n  // preambles\r\n  // in setup() inline mode, the preamble is generated in a sub context\r\n  // and returned separately.\r\n  const preambleContext = isSetupInlined\r\n    ? createCodegenContext(ast, options)\r\n    : context\r\n  if (!__BROWSER__ && mode === 'module') {\r\n    genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined)\r\n  } else {\r\n    genFunctionPreamble(ast, preambleContext)\r\n  }\r\n  // enter render function\r\n  const functionName = ssr ? `ssrRender` : `render`\r\n  const args = ssr ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache']\r\n  if (!__BROWSER__ && options.bindingMetadata && !options.inline) {\r\n    // binding optimization args\r\n    args.push('$props', '$setup', '$data', '$options')\r\n  }\r\n  const signature =\r\n    !__BROWSER__ && options.isTS\r\n      ? args.map(arg => `${arg}: any`).join(',')\r\n      : args.join(', ')\r\n\r\n  if (isSetupInlined) {\r\n    push(`(${signature}) => {`)\r\n  } else {\r\n    push(`function ${functionName}(${signature}) {`)\r\n  }\r\n  indent()\r\n\r\n  if (useWithBlock) {\r\n    push(`with (_ctx) {`)\r\n    indent()\r\n    // function mode const declarations should be inside with block\r\n    // also they should be renamed to avoid collision with user properties\r\n    if (hasHelpers) {\r\n      push(`const { ${ast.helpers.map(aliasHelper).join(', ')} } = _Vue`)\r\n      push(`\\n`)\r\n      newline()\r\n    }\r\n  }\r\n\r\n  // generate asset resolution statements\r\n  if (ast.components.length) {\r\n    genAssets(ast.components, 'component', context)\r\n    if (ast.directives.length || ast.temps > 0) {\r\n      newline()\r\n    }\r\n  }\r\n  if (ast.directives.length) {\r\n    genAssets(ast.directives, 'directive', context)\r\n    if (ast.temps > 0) {\r\n      newline()\r\n    }\r\n  }\r\n  if (__COMPAT__ && ast.filters && ast.filters.length) {\r\n    newline()\r\n    genAssets(ast.filters, 'filter', context)\r\n    newline()\r\n  }\r\n\r\n  if (ast.temps > 0) {\r\n    push(`let `)\r\n    for (let i = 0; i < ast.temps; i++) {\r\n      push(`${i > 0 ? `, ` : ``}_temp${i}`)\r\n    }\r\n  }\r\n  if (ast.components.length || ast.directives.length || ast.temps) {\r\n    push(`\\n`)\r\n    newline()\r\n  }\r\n\r\n  // generate the VNode tree expression\r\n  if (!ssr) {\r\n    push(`return `)\r\n  }\r\n  if (ast.codegenNode) {\r\n    genNode(ast.codegenNode, context)\r\n  } else {\r\n    push(`null`)\r\n  }\r\n\r\n  if (useWithBlock) {\r\n    deindent()\r\n    push(`}`)\r\n  }\r\n\r\n  deindent()\r\n  push(`}`)\r\n\r\n  return {\r\n    ast,\r\n    code: context.code,\r\n    preamble: isSetupInlined ? preambleContext.code : ``,\r\n    // SourceMapGenerator does have toJSON() method but it's not in the types\r\n    map: context.map ? (context.map as any).toJSON() : undefined\r\n  }\r\n}\r\n\r\nfunction genFunctionPreamble(ast: RootNode, context: CodegenContext) {\r\n  const {\r\n    ssr,\r\n    prefixIdentifiers,\r\n    push,\r\n    newline,\r\n    runtimeModuleName,\r\n    runtimeGlobalName,\r\n    ssrRuntimeModuleName\r\n  } = context\r\n  const VueBinding =\r\n    !__BROWSER__ && ssr\r\n      ? `require(${JSON.stringify(runtimeModuleName)})`\r\n      : runtimeGlobalName\r\n  // Generate const declaration for helpers\r\n  // In prefix mode, we place the const declaration at top so it's done\r\n  // only once; But if we not prefixing, we place the declaration inside the\r\n  // with block so it doesn't incur the `in` check cost for every helper access.\r\n  if (ast.helpers.length > 0) {\r\n    if (!__BROWSER__ && prefixIdentifiers) {\r\n      push(\r\n        `const { ${ast.helpers.map(aliasHelper).join(', ')} } = ${VueBinding}\\n`\r\n      )\r\n    } else {\r\n      // \"with\" mode.\r\n      // save Vue in a separate variable to avoid collision\r\n      push(`const _Vue = ${VueBinding}\\n`)\r\n      // in \"with\" mode, helpers are declared inside the with block to avoid\r\n      // has check cost, but hoists are lifted out of the function - we need\r\n      // to provide the helper here.\r\n      if (ast.hoists.length) {\r\n        const staticHelpers = [\r\n          CREATE_VNODE,\r\n          CREATE_ELEMENT_VNODE,\r\n          CREATE_COMMENT,\r\n          CREATE_TEXT,\r\n          CREATE_STATIC\r\n        ]\r\n          .filter(helper => ast.helpers.includes(helper))\r\n          .map(aliasHelper)\r\n          .join(', ')\r\n        push(`const { ${staticHelpers} } = _Vue\\n`)\r\n      }\r\n    }\r\n  }\r\n  // generate variables for ssr helpers\r\n  if (!__BROWSER__ && ast.ssrHelpers && ast.ssrHelpers.length) {\r\n    // ssr guarantees prefixIdentifier: true\r\n    push(\r\n      `const { ${ast.ssrHelpers\r\n        .map(aliasHelper)\r\n        .join(', ')} } = require(\"${ssrRuntimeModuleName}\")\\n`\r\n    )\r\n  }\r\n  genHoists(ast.hoists, context)\r\n  newline()\r\n  push(`return `)\r\n}\r\n\r\nfunction genModulePreamble(\r\n  ast: RootNode,\r\n  context: CodegenContext,\r\n  genScopeId: boolean,\r\n  inline?: boolean\r\n) {\r\n  const {\r\n    push,\r\n    newline,\r\n    optimizeImports,\r\n    runtimeModuleName,\r\n    ssrRuntimeModuleName\r\n  } = context\r\n\r\n  if (genScopeId && ast.hoists.length) {\r\n    ast.helpers.push(PUSH_SCOPE_ID, POP_SCOPE_ID)\r\n  }\r\n\r\n  // generate import statements for helpers\r\n  if (ast.helpers.length) {\r\n    if (optimizeImports) {\r\n      // when bundled with webpack with code-split, calling an import binding\r\n      // as a function leads to it being wrapped with `Object(a.b)` or `(0,a.b)`,\r\n      // incurring both payload size increase and potential perf overhead.\r\n      // therefore we assign the imports to variables (which is a constant ~50b\r\n      // cost per-component instead of scaling with template size)\r\n      push(\r\n        `import { ${ast.helpers\r\n          .map(s => helperNameMap[s])\r\n          .join(', ')} } from ${JSON.stringify(runtimeModuleName)}\\n`\r\n      )\r\n      push(\r\n        `\\n// Binding optimization for webpack code-split\\nconst ${ast.helpers\r\n          .map(s => `_${helperNameMap[s]} = ${helperNameMap[s]}`)\r\n          .join(', ')}\\n`\r\n      )\r\n    } else {\r\n      push(\r\n        `import { ${ast.helpers\r\n          .map(s => `${helperNameMap[s]} as _${helperNameMap[s]}`)\r\n          .join(', ')} } from ${JSON.stringify(runtimeModuleName)}\\n`\r\n      )\r\n    }\r\n  }\r\n\r\n  if (ast.ssrHelpers && ast.ssrHelpers.length) {\r\n    push(\r\n      `import { ${ast.ssrHelpers\r\n        .map(s => `${helperNameMap[s]} as _${helperNameMap[s]}`)\r\n        .join(', ')} } from \"${ssrRuntimeModuleName}\"\\n`\r\n    )\r\n  }\r\n\r\n  if (ast.imports.length) {\r\n    genImports(ast.imports, context)\r\n    newline()\r\n  }\r\n\r\n  genHoists(ast.hoists, context)\r\n  newline()\r\n\r\n  if (!inline) {\r\n    push(`export `)\r\n  }\r\n}\r\n\r\nfunction genAssets(\r\n  assets: string[],\r\n  type: 'component' | 'directive' | 'filter',\r\n  { helper, push, newline, isTS }: CodegenContext\r\n) {\r\n  const resolver = helper(\r\n    __COMPAT__ && type === 'filter'\r\n      ? RESOLVE_FILTER\r\n      : type === 'component'\r\n      ? RESOLVE_COMPONENT\r\n      : RESOLVE_DIRECTIVE\r\n  )\r\n  for (let i = 0; i < assets.length; i++) {\r\n    let id = assets[i]\r\n    // potential component implicit self-reference inferred from SFC filename\r\n    const maybeSelfReference = id.endsWith('__self')\r\n    if (maybeSelfReference) {\r\n      id = id.slice(0, -6)\r\n    }\r\n    push(\r\n      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${\r\n        maybeSelfReference ? `, true` : ``\r\n      })${isTS ? `!` : ``}`\r\n    )\r\n    if (i < assets.length - 1) {\r\n      newline()\r\n    }\r\n  }\r\n}\r\n\r\nfunction genHoists(hoists: (JSChildNode | null)[], context: CodegenContext) {\r\n  if (!hoists.length) {\r\n    return\r\n  }\r\n  context.pure = true\r\n  const { push, newline, helper, scopeId, mode } = context\r\n  const genScopeId = !__BROWSER__ && scopeId != null && mode !== 'function'\r\n  newline()\r\n\r\n  // generate inlined withScopeId helper\r\n  if (genScopeId) {\r\n    push(\r\n      `const _withScopeId = n => (${helper(\r\n        PUSH_SCOPE_ID\r\n      )}(\"${scopeId}\"),n=n(),${helper(POP_SCOPE_ID)}(),n)`\r\n    )\r\n    newline()\r\n  }\r\n\r\n  for (let i = 0; i < hoists.length; i++) {\r\n    const exp = hoists[i]\r\n    if (exp) {\r\n      const needScopeIdWrapper = genScopeId && exp.type === NodeTypes.VNODE_CALL\r\n      push(\r\n        `const _hoisted_${i + 1} = ${\r\n          needScopeIdWrapper ? `${PURE_ANNOTATION} _withScopeId(() => ` : ``\r\n        }`\r\n      )\r\n      genNode(exp, context)\r\n      if (needScopeIdWrapper) {\r\n        push(`)`)\r\n      }\r\n      newline()\r\n    }\r\n  }\r\n\r\n  context.pure = false\r\n}\r\n\r\nfunction genImports(importsOptions: ImportItem[], context: CodegenContext) {\r\n  if (!importsOptions.length) {\r\n    return\r\n  }\r\n  importsOptions.forEach(imports => {\r\n    context.push(`import `)\r\n    genNode(imports.exp, context)\r\n    context.push(` from '${imports.path}'`)\r\n    context.newline()\r\n  })\r\n}\r\n\r\nfunction isText(n: string | CodegenNode) {\r\n  return (\r\n    isString(n) ||\r\n    n.type === NodeTypes.SIMPLE_EXPRESSION ||\r\n    n.type === NodeTypes.TEXT ||\r\n    n.type === NodeTypes.INTERPOLATION ||\r\n    n.type === NodeTypes.COMPOUND_EXPRESSION\r\n  )\r\n}\r\n\r\nfunction genNodeListAsArray(\r\n  nodes: (string | CodegenNode | TemplateChildNode[])[],\r\n  context: CodegenContext\r\n) {\r\n  const multilines =\r\n    nodes.length > 3 ||\r\n    ((!__BROWSER__ || __DEV__) && nodes.some(n => isArray(n) || !isText(n)))\r\n  context.push(`[`)\r\n  multilines && context.indent()\r\n  genNodeList(nodes, context, multilines)\r\n  multilines && context.deindent()\r\n  context.push(`]`)\r\n}\r\n\r\nfunction genNodeList(\r\n  nodes: (string | symbol | CodegenNode | TemplateChildNode[])[],\r\n  context: CodegenContext,\r\n  multilines: boolean = false,\r\n  comma: boolean = true\r\n) {\r\n  const { push, newline } = context\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i]\r\n    if (isString(node)) {\r\n      push(node)\r\n    } else if (isArray(node)) {\r\n      genNodeListAsArray(node, context)\r\n    } else {\r\n      genNode(node, context)\r\n    }\r\n    if (i < nodes.length - 1) {\r\n      if (multilines) {\r\n        comma && push(',')\r\n        newline()\r\n      } else {\r\n        comma && push(', ')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction genNode(node: CodegenNode | symbol | string, context: CodegenContext) {\r\n  if (isString(node)) {\r\n    context.push(node)\r\n    return\r\n  }\r\n  if (isSymbol(node)) {\r\n    context.push(context.helper(node))\r\n    return\r\n  }\r\n  switch (node.type) {\r\n    case NodeTypes.ELEMENT:\r\n    case NodeTypes.IF:\r\n    case NodeTypes.FOR:\r\n      __DEV__ &&\r\n        assert(\r\n          node.codegenNode != null,\r\n          `Codegen node is missing for element/if/for node. ` +\r\n            `Apply appropriate transforms first.`\r\n        )\r\n      genNode(node.codegenNode!, context)\r\n      break\r\n    case NodeTypes.TEXT:\r\n      genText(node, context)\r\n      break\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      genExpression(node, context)\r\n      break\r\n    case NodeTypes.INTERPOLATION:\r\n      genInterpolation(node, context)\r\n      break\r\n    case NodeTypes.TEXT_CALL:\r\n      genNode(node.codegenNode, context)\r\n      break\r\n    case NodeTypes.COMPOUND_EXPRESSION:\r\n      genCompoundExpression(node, context)\r\n      break\r\n    case NodeTypes.COMMENT:\r\n      genComment(node, context)\r\n      break\r\n    case NodeTypes.VNODE_CALL:\r\n      genVNodeCall(node, context)\r\n      break\r\n\r\n    case NodeTypes.JS_CALL_EXPRESSION:\r\n      genCallExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_OBJECT_EXPRESSION:\r\n      genObjectExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_ARRAY_EXPRESSION:\r\n      genArrayExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_FUNCTION_EXPRESSION:\r\n      genFunctionExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_CONDITIONAL_EXPRESSION:\r\n      genConditionalExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_CACHE_EXPRESSION:\r\n      genCacheExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_BLOCK_STATEMENT:\r\n      genNodeList(node.body, context, true, false)\r\n      break\r\n\r\n    // SSR only types\r\n    case NodeTypes.JS_TEMPLATE_LITERAL:\r\n      !__BROWSER__ && genTemplateLiteral(node, context)\r\n      break\r\n    case NodeTypes.JS_IF_STATEMENT:\r\n      !__BROWSER__ && genIfStatement(node, context)\r\n      break\r\n    case NodeTypes.JS_ASSIGNMENT_EXPRESSION:\r\n      !__BROWSER__ && genAssignmentExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_SEQUENCE_EXPRESSION:\r\n      !__BROWSER__ && genSequenceExpression(node, context)\r\n      break\r\n    case NodeTypes.JS_RETURN_STATEMENT:\r\n      !__BROWSER__ && genReturnStatement(node, context)\r\n      break\r\n\r\n    /* istanbul ignore next */\r\n    case NodeTypes.IF_BRANCH:\r\n      // noop\r\n      break\r\n    default:\r\n      if (__DEV__) {\r\n        assert(false, `unhandled codegen node type: ${(node as any).type}`)\r\n        // make sure we exhaust all possible types\r\n        const exhaustiveCheck: never = node\r\n        return exhaustiveCheck\r\n      }\r\n  }\r\n}\r\n\r\nfunction genText(\r\n  node: TextNode | SimpleExpressionNode,\r\n  context: CodegenContext\r\n) {\r\n  context.push(JSON.stringify(node.content), node)\r\n}\r\n\r\nfunction genExpression(node: SimpleExpressionNode, context: CodegenContext) {\r\n  const { content, isStatic } = node\r\n  context.push(isStatic ? JSON.stringify(content) : content, node)\r\n}\r\n\r\nfunction genInterpolation(node: InterpolationNode, context: CodegenContext) {\r\n  const { push, helper, pure } = context\r\n  if (pure) push(PURE_ANNOTATION)\r\n  push(`${helper(TO_DISPLAY_STRING)}(`)\r\n  genNode(node.content, context)\r\n  push(`)`)\r\n}\r\n\r\nfunction genCompoundExpression(\r\n  node: CompoundExpressionNode,\r\n  context: CodegenContext\r\n) {\r\n  for (let i = 0; i < node.children!.length; i++) {\r\n    const child = node.children![i]\r\n    if (isString(child)) {\r\n      context.push(child)\r\n    } else {\r\n      genNode(child, context)\r\n    }\r\n  }\r\n}\r\n\r\nfunction genExpressionAsPropertyKey(\r\n  node: ExpressionNode,\r\n  context: CodegenContext\r\n) {\r\n  const { push } = context\r\n  if (node.type === NodeTypes.COMPOUND_EXPRESSION) {\r\n    push(`[`)\r\n    genCompoundExpression(node, context)\r\n    push(`]`)\r\n  } else if (node.isStatic) {\r\n    // only quote keys if necessary\r\n    const text = isSimpleIdentifier(node.content)\r\n      ? node.content\r\n      : JSON.stringify(node.content)\r\n    push(text, node)\r\n  } else {\r\n    push(`[${node.content}]`, node)\r\n  }\r\n}\r\n\r\nfunction genComment(node: CommentNode, context: CodegenContext) {\r\n  const { push, helper, pure } = context\r\n  if (pure) {\r\n    push(PURE_ANNOTATION)\r\n  }\r\n  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node)\r\n}\r\n\r\nfunction genVNodeCall(node: VNodeCall, context: CodegenContext) {\r\n  const { push, helper, pure } = context\r\n  const {\r\n    tag,\r\n    props,\r\n    children,\r\n    patchFlag,\r\n    dynamicProps,\r\n    directives,\r\n    isBlock,\r\n    disableTracking,\r\n    isComponent\r\n  } = node\r\n  if (directives) {\r\n    push(helper(WITH_DIRECTIVES) + `(`)\r\n  }\r\n  if (isBlock) {\r\n    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `)\r\n  }\r\n  if (pure) {\r\n    push(PURE_ANNOTATION)\r\n  }\r\n  const callHelper: symbol = isBlock\r\n    ? getVNodeBlockHelper(context.inSSR, isComponent)\r\n    : getVNodeHelper(context.inSSR, isComponent)\r\n  push(helper(callHelper) + `(`, node)\r\n  genNodeList(\r\n    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),\r\n    context\r\n  )\r\n  push(`)`)\r\n  if (isBlock) {\r\n    push(`)`)\r\n  }\r\n  if (directives) {\r\n    push(`, `)\r\n    genNode(directives, context)\r\n    push(`)`)\r\n  }\r\n}\r\n\r\nfunction genNullableArgs(args: any[]): CallExpression['arguments'] {\r\n  let i = args.length\r\n  while (i--) {\r\n    if (args[i] != null) break\r\n  }\r\n  return args.slice(0, i + 1).map(arg => arg || `null`)\r\n}\r\n\r\n// JavaScript\r\nfunction genCallExpression(node: CallExpression, context: CodegenContext) {\r\n  const { push, helper, pure } = context\r\n  const callee = isString(node.callee) ? node.callee : helper(node.callee)\r\n  if (pure) {\r\n    push(PURE_ANNOTATION)\r\n  }\r\n  push(callee + `(`, node)\r\n  genNodeList(node.arguments, context)\r\n  push(`)`)\r\n}\r\n\r\nfunction genObjectExpression(node: ObjectExpression, context: CodegenContext) {\r\n  const { push, indent, deindent, newline } = context\r\n  const { properties } = node\r\n  if (!properties.length) {\r\n    push(`{}`, node)\r\n    return\r\n  }\r\n  const multilines =\r\n    properties.length > 1 ||\r\n    ((!__BROWSER__ || __DEV__) &&\r\n      properties.some(p => p.value.type !== NodeTypes.SIMPLE_EXPRESSION))\r\n  push(multilines ? `{` : `{ `)\r\n  multilines && indent()\r\n  for (let i = 0; i < properties.length; i++) {\r\n    const { key, value } = properties[i]\r\n    // key\r\n    genExpressionAsPropertyKey(key, context)\r\n    push(`: `)\r\n    // value\r\n    genNode(value, context)\r\n    if (i < properties.length - 1) {\r\n      // will only reach this if it's multilines\r\n      push(`,`)\r\n      newline()\r\n    }\r\n  }\r\n  multilines && deindent()\r\n  push(multilines ? `}` : ` }`)\r\n}\r\n\r\nfunction genArrayExpression(node: ArrayExpression, context: CodegenContext) {\r\n  genNodeListAsArray(node.elements as CodegenNode[], context)\r\n}\r\n\r\nfunction genFunctionExpression(\r\n  node: FunctionExpression,\r\n  context: CodegenContext\r\n) {\r\n  const { push, indent, deindent } = context\r\n  const { params, returns, body, newline, isSlot } = node\r\n  if (isSlot) {\r\n    // wrap slot functions with owner context\r\n    push(`_${helperNameMap[WITH_CTX]}(`)\r\n  }\r\n  push(`(`, node)\r\n  if (isArray(params)) {\r\n    genNodeList(params, context)\r\n  } else if (params) {\r\n    genNode(params, context)\r\n  }\r\n  push(`) => `)\r\n  if (newline || body) {\r\n    push(`{`)\r\n    indent()\r\n  }\r\n  if (returns) {\r\n    if (newline) {\r\n      push(`return `)\r\n    }\r\n    if (isArray(returns)) {\r\n      genNodeListAsArray(returns, context)\r\n    } else {\r\n      genNode(returns, context)\r\n    }\r\n  } else if (body) {\r\n    genNode(body, context)\r\n  }\r\n  if (newline || body) {\r\n    deindent()\r\n    push(`}`)\r\n  }\r\n  if (isSlot) {\r\n    if (__COMPAT__ && node.isNonScopedSlot) {\r\n      push(`, undefined, true`)\r\n    }\r\n    push(`)`)\r\n  }\r\n}\r\n\r\nfunction genConditionalExpression(\r\n  node: ConditionalExpression,\r\n  context: CodegenContext\r\n) {\r\n  const { test, consequent, alternate, newline: needNewline } = node\r\n  const { push, indent, deindent, newline } = context\r\n  if (test.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n    const needsParens = !isSimpleIdentifier(test.content)\r\n    needsParens && push(`(`)\r\n    genExpression(test, context)\r\n    needsParens && push(`)`)\r\n  } else {\r\n    push(`(`)\r\n    genNode(test, context)\r\n    push(`)`)\r\n  }\r\n  needNewline && indent()\r\n  context.indentLevel++\r\n  needNewline || push(` `)\r\n  push(`? `)\r\n  genNode(consequent, context)\r\n  context.indentLevel--\r\n  needNewline && newline()\r\n  needNewline || push(` `)\r\n  push(`: `)\r\n  const isNested = alternate.type === NodeTypes.JS_CONDITIONAL_EXPRESSION\r\n  if (!isNested) {\r\n    context.indentLevel++\r\n  }\r\n  genNode(alternate, context)\r\n  if (!isNested) {\r\n    context.indentLevel--\r\n  }\r\n  needNewline && deindent(true /* without newline */)\r\n}\r\n\r\nfunction genCacheExpression(node: CacheExpression, context: CodegenContext) {\r\n  const { push, helper, indent, deindent, newline } = context\r\n  push(`_cache[${node.index}] || (`)\r\n  if (node.isVNode) {\r\n    indent()\r\n    push(`${helper(SET_BLOCK_TRACKING)}(-1),`)\r\n    newline()\r\n  }\r\n  push(`_cache[${node.index}] = `)\r\n  genNode(node.value, context)\r\n  if (node.isVNode) {\r\n    push(`,`)\r\n    newline()\r\n    push(`${helper(SET_BLOCK_TRACKING)}(1),`)\r\n    newline()\r\n    push(`_cache[${node.index}]`)\r\n    deindent()\r\n  }\r\n  push(`)`)\r\n}\r\n\r\nfunction genTemplateLiteral(node: TemplateLiteral, context: CodegenContext) {\r\n  const { push, indent, deindent } = context\r\n  push('`')\r\n  const l = node.elements.length\r\n  const multilines = l > 3\r\n  for (let i = 0; i < l; i++) {\r\n    const e = node.elements[i]\r\n    if (isString(e)) {\r\n      push(e.replace(/(`|\\$|\\\\)/g, '\\\\$1'))\r\n    } else {\r\n      push('${')\r\n      if (multilines) indent()\r\n      genNode(e, context)\r\n      if (multilines) deindent()\r\n      push('}')\r\n    }\r\n  }\r\n  push('`')\r\n}\r\n\r\nfunction genIfStatement(node: IfStatement, context: CodegenContext) {\r\n  const { push, indent, deindent } = context\r\n  const { test, consequent, alternate } = node\r\n  push(`if (`)\r\n  genNode(test, context)\r\n  push(`) {`)\r\n  indent()\r\n  genNode(consequent, context)\r\n  deindent()\r\n  push(`}`)\r\n  if (alternate) {\r\n    push(` else `)\r\n    if (alternate.type === NodeTypes.JS_IF_STATEMENT) {\r\n      genIfStatement(alternate, context)\r\n    } else {\r\n      push(`{`)\r\n      indent()\r\n      genNode(alternate, context)\r\n      deindent()\r\n      push(`}`)\r\n    }\r\n  }\r\n}\r\n\r\nfunction genAssignmentExpression(\r\n  node: AssignmentExpression,\r\n  context: CodegenContext\r\n) {\r\n  genNode(node.left, context)\r\n  context.push(` = `)\r\n  genNode(node.right, context)\r\n}\r\n\r\nfunction genSequenceExpression(\r\n  node: SequenceExpression,\r\n  context: CodegenContext\r\n) {\r\n  context.push(`(`)\r\n  genNodeList(node.expressions, context)\r\n  context.push(`)`)\r\n}\r\n\r\nfunction genReturnStatement(\r\n  { returns }: ReturnStatement,\r\n  context: CodegenContext\r\n) {\r\n  context.push(`return `)\r\n  if (isArray(returns)) {\r\n    genNodeListAsArray(returns, context)\r\n  } else {\r\n    genNode(returns, context)\r\n  }\r\n}\r\n","// should only use types from @babel/types\r\n// do not import runtime methods\r\nimport type {\r\n  Identifier,\r\n  Node,\r\n  Function,\r\n  ObjectProperty,\r\n  BlockStatement,\r\n  Program\r\n} from '@babel/types'\r\nimport { walk } from 'estree-walker'\r\n\r\nexport function walkIdentifiers(\r\n  root: Node,\r\n  onIdentifier: (\r\n    node: Identifier,\r\n    parent: Node,\r\n    parentStack: Node[],\r\n    isReference: boolean,\r\n    isLocal: boolean\r\n  ) => void,\r\n  includeAll = false,\r\n  parentStack: Node[] = [],\r\n  knownIds: Record<string, number> = Object.create(null)\r\n) {\r\n  if (__BROWSER__) {\r\n    return\r\n  }\r\n\r\n  const rootExp =\r\n    root.type === 'Program' &&\r\n    root.body[0].type === 'ExpressionStatement' &&\r\n    root.body[0].expression\r\n\r\n  ;(walk as any)(root, {\r\n    enter(node: Node & { scopeIds?: Set<string> }, parent: Node | undefined) {\r\n      parent && parentStack.push(parent)\r\n      if (\r\n        parent &&\r\n        parent.type.startsWith('TS') &&\r\n        parent.type !== 'TSAsExpression' &&\r\n        parent.type !== 'TSNonNullExpression' &&\r\n        parent.type !== 'TSTypeAssertion'\r\n      ) {\r\n        return this.skip()\r\n      }\r\n      if (node.type === 'Identifier') {\r\n        const isLocal = !!knownIds[node.name]\r\n        const isRefed = isReferencedIdentifier(node, parent!, parentStack)\r\n        if (includeAll || (isRefed && !isLocal)) {\r\n          onIdentifier(node, parent!, parentStack, isRefed, isLocal)\r\n        }\r\n      } else if (\r\n        node.type === 'ObjectProperty' &&\r\n        parent!.type === 'ObjectPattern'\r\n      ) {\r\n        // mark property in destructure pattern\r\n        ;(node as any).inPattern = true\r\n      } else if (isFunctionType(node)) {\r\n        // walk function expressions and add its arguments to known identifiers\r\n        // so that we don't prefix them\r\n        walkFunctionParams(node, id => markScopeIdentifier(node, id, knownIds))\r\n      } else if (node.type === 'BlockStatement') {\r\n        // #3445 record block-level local variables\r\n        walkBlockDeclarations(node, id =>\r\n          markScopeIdentifier(node, id, knownIds)\r\n        )\r\n      }\r\n    },\r\n    leave(node: Node & { scopeIds?: Set<string> }, parent: Node | undefined) {\r\n      parent && parentStack.pop()\r\n      if (node !== rootExp && node.scopeIds) {\r\n        for (const id of node.scopeIds) {\r\n          knownIds[id]--\r\n          if (knownIds[id] === 0) {\r\n            delete knownIds[id]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function isReferencedIdentifier(\r\n  id: Identifier,\r\n  parent: Node | null,\r\n  parentStack: Node[]\r\n) {\r\n  if (__BROWSER__) {\r\n    return false\r\n  }\r\n\r\n  if (!parent) {\r\n    return true\r\n  }\r\n\r\n  // is a special keyword but parsed as identifier\r\n  if (id.name === 'arguments') {\r\n    return false\r\n  }\r\n\r\n  if (isReferenced(id, parent)) {\r\n    return true\r\n  }\r\n\r\n  // babel's isReferenced check returns false for ids being assigned to, so we\r\n  // need to cover those cases here\r\n  switch (parent.type) {\r\n    case 'AssignmentExpression':\r\n    case 'AssignmentPattern':\r\n      return true\r\n    case 'ObjectPattern':\r\n    case 'ArrayPattern':\r\n      return isInDestructureAssignment(parent, parentStack)\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport function isInDestructureAssignment(\r\n  parent: Node,\r\n  parentStack: Node[]\r\n): boolean {\r\n  if (\r\n    parent &&\r\n    (parent.type === 'ObjectProperty' || parent.type === 'ArrayPattern')\r\n  ) {\r\n    let i = parentStack.length\r\n    while (i--) {\r\n      const p = parentStack[i]\r\n      if (p.type === 'AssignmentExpression') {\r\n        return true\r\n      } else if (p.type !== 'ObjectProperty' && !p.type.endsWith('Pattern')) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport function walkFunctionParams(\r\n  node: Function,\r\n  onIdent: (id: Identifier) => void\r\n) {\r\n  for (const p of node.params) {\r\n    for (const id of extractIdentifiers(p)) {\r\n      onIdent(id)\r\n    }\r\n  }\r\n}\r\n\r\nexport function walkBlockDeclarations(\r\n  block: BlockStatement | Program,\r\n  onIdent: (node: Identifier) => void\r\n) {\r\n  for (const stmt of block.body) {\r\n    if (stmt.type === 'VariableDeclaration') {\r\n      if (stmt.declare) continue\r\n      for (const decl of stmt.declarations) {\r\n        for (const id of extractIdentifiers(decl.id)) {\r\n          onIdent(id)\r\n        }\r\n      }\r\n    } else if (\r\n      stmt.type === 'FunctionDeclaration' ||\r\n      stmt.type === 'ClassDeclaration'\r\n    ) {\r\n      if (stmt.declare || !stmt.id) continue\r\n      onIdent(stmt.id)\r\n    }\r\n  }\r\n}\r\n\r\nexport function extractIdentifiers(\r\n  param: Node,\r\n  nodes: Identifier[] = []\r\n): Identifier[] {\r\n  switch (param.type) {\r\n    case 'Identifier':\r\n      nodes.push(param)\r\n      break\r\n\r\n    case 'MemberExpression':\r\n      let object: any = param\r\n      while (object.type === 'MemberExpression') {\r\n        object = object.object\r\n      }\r\n      nodes.push(object)\r\n      break\r\n\r\n    case 'ObjectPattern':\r\n      for (const prop of param.properties) {\r\n        if (prop.type === 'RestElement') {\r\n          extractIdentifiers(prop.argument, nodes)\r\n        } else {\r\n          extractIdentifiers(prop.value, nodes)\r\n        }\r\n      }\r\n      break\r\n\r\n    case 'ArrayPattern':\r\n      param.elements.forEach(element => {\r\n        if (element) extractIdentifiers(element, nodes)\r\n      })\r\n      break\r\n\r\n    case 'RestElement':\r\n      extractIdentifiers(param.argument, nodes)\r\n      break\r\n\r\n    case 'AssignmentPattern':\r\n      extractIdentifiers(param.left, nodes)\r\n      break\r\n  }\r\n\r\n  return nodes\r\n}\r\n\r\nfunction markScopeIdentifier(\r\n  node: Node & { scopeIds?: Set<string> },\r\n  child: Identifier,\r\n  knownIds: Record<string, number>\r\n) {\r\n  const { name } = child\r\n  if (node.scopeIds && node.scopeIds.has(name)) {\r\n    return\r\n  }\r\n  if (name in knownIds) {\r\n    knownIds[name]++\r\n  } else {\r\n    knownIds[name] = 1\r\n  }\r\n  ;(node.scopeIds || (node.scopeIds = new Set())).add(name)\r\n}\r\n\r\nexport const isFunctionType = (node: Node): node is Function => {\r\n  return /Function(?:Expression|Declaration)$|Method$/.test(node.type)\r\n}\r\n\r\nexport const isStaticProperty = (node: Node): node is ObjectProperty =>\r\n  node &&\r\n  (node.type === 'ObjectProperty' || node.type === 'ObjectMethod') &&\r\n  !node.computed\r\n\r\nexport const isStaticPropertyKey = (node: Node, parent: Node) =>\r\n  isStaticProperty(parent) && parent.key === node\r\n\r\n/**\r\n * Copied from https://github.com/babel/babel/blob/main/packages/babel-types/src/validators/isReferenced.ts\r\n * To avoid runtime dependency on @babel/types (which includes process references)\r\n * This file should not change very often in babel but we may need to keep it\r\n * up-to-date from time to time.\r\n *\r\n * https://github.com/babel/babel/blob/main/LICENSE\r\n *\r\n */\r\nfunction isReferenced(node: Node, parent: Node, grandparent?: Node): boolean {\r\n  switch (parent.type) {\r\n    // yes: PARENT[NODE]\r\n    // yes: NODE.child\r\n    // no: parent.NODE\r\n    case 'MemberExpression':\r\n    case 'OptionalMemberExpression':\r\n      if (parent.property === node) {\r\n        return !!parent.computed\r\n      }\r\n      return parent.object === node\r\n\r\n    case 'JSXMemberExpression':\r\n      return parent.object === node\r\n    // no: let NODE = init;\r\n    // yes: let id = NODE;\r\n    case 'VariableDeclarator':\r\n      return parent.init === node\r\n\r\n    // yes: () => NODE\r\n    // no: (NODE) => {}\r\n    case 'ArrowFunctionExpression':\r\n      return parent.body === node\r\n\r\n    // no: class { #NODE; }\r\n    // no: class { get #NODE() {} }\r\n    // no: class { #NODE() {} }\r\n    // no: class { fn() { return this.#NODE; } }\r\n    case 'PrivateName':\r\n      return false\r\n\r\n    // no: class { NODE() {} }\r\n    // yes: class { [NODE]() {} }\r\n    // no: class { foo(NODE) {} }\r\n    case 'ClassMethod':\r\n    case 'ClassPrivateMethod':\r\n    case 'ObjectMethod':\r\n      if (parent.key === node) {\r\n        return !!parent.computed\r\n      }\r\n      return false\r\n\r\n    // yes: { [NODE]: \"\" }\r\n    // no: { NODE: \"\" }\r\n    // depends: { NODE }\r\n    // depends: { key: NODE }\r\n    case 'ObjectProperty':\r\n      if (parent.key === node) {\r\n        return !!parent.computed\r\n      }\r\n      // parent.value === node\r\n      return !grandparent || grandparent.type !== 'ObjectPattern'\r\n    // no: class { NODE = value; }\r\n    // yes: class { [NODE] = value; }\r\n    // yes: class { key = NODE; }\r\n    case 'ClassProperty':\r\n      if (parent.key === node) {\r\n        return !!parent.computed\r\n      }\r\n      return true\r\n    case 'ClassPrivateProperty':\r\n      return parent.key !== node\r\n\r\n    // no: class NODE {}\r\n    // yes: class Foo extends NODE {}\r\n    case 'ClassDeclaration':\r\n    case 'ClassExpression':\r\n      return parent.superClass === node\r\n\r\n    // yes: left = NODE;\r\n    // no: NODE = right;\r\n    case 'AssignmentExpression':\r\n      return parent.right === node\r\n\r\n    // no: [NODE = foo] = [];\r\n    // yes: [foo = NODE] = [];\r\n    case 'AssignmentPattern':\r\n      return parent.right === node\r\n\r\n    // no: NODE: for (;;) {}\r\n    case 'LabeledStatement':\r\n      return false\r\n\r\n    // no: try {} catch (NODE) {}\r\n    case 'CatchClause':\r\n      return false\r\n\r\n    // no: function foo(...NODE) {}\r\n    case 'RestElement':\r\n      return false\r\n\r\n    case 'BreakStatement':\r\n    case 'ContinueStatement':\r\n      return false\r\n\r\n    // no: function NODE() {}\r\n    // no: function foo(NODE) {}\r\n    case 'FunctionDeclaration':\r\n    case 'FunctionExpression':\r\n      return false\r\n\r\n    // no: export NODE from \"foo\";\r\n    // no: export * as NODE from \"foo\";\r\n    case 'ExportNamespaceSpecifier':\r\n    case 'ExportDefaultSpecifier':\r\n      return false\r\n\r\n    // no: export { foo as NODE };\r\n    // yes: export { NODE as foo };\r\n    // no: export { NODE as foo } from \"foo\";\r\n    case 'ExportSpecifier':\r\n      // @ts-expect-error\r\n      if (grandparent?.source) {\r\n        return false\r\n      }\r\n      return parent.local === node\r\n\r\n    // no: import NODE from \"foo\";\r\n    // no: import * as NODE from \"foo\";\r\n    // no: import { NODE as foo } from \"foo\";\r\n    // no: import { foo as NODE } from \"foo\";\r\n    // no: import NODE from \"bar\";\r\n    case 'ImportDefaultSpecifier':\r\n    case 'ImportNamespaceSpecifier':\r\n    case 'ImportSpecifier':\r\n      return false\r\n\r\n    // no: import \"foo\" assert { NODE: \"json\" }\r\n    case 'ImportAttribute':\r\n      return false\r\n\r\n    // no: <div NODE=\"foo\" />\r\n    case 'JSXAttribute':\r\n      return false\r\n\r\n    // no: [NODE] = [];\r\n    // no: ({ NODE }) = [];\r\n    case 'ObjectPattern':\r\n    case 'ArrayPattern':\r\n      return false\r\n\r\n    // no: new.NODE\r\n    // no: NODE.target\r\n    case 'MetaProperty':\r\n      return false\r\n\r\n    // yes: type X = { someProperty: NODE }\r\n    // no: type X = { NODE: OtherType }\r\n    case 'ObjectTypeProperty':\r\n      return parent.key !== node\r\n\r\n    // yes: enum X { Foo = NODE }\r\n    // no: enum X { NODE }\r\n    case 'TSEnumMember':\r\n      return parent.id !== node\r\n\r\n    // yes: { [NODE]: value }\r\n    // no: { NODE: value }\r\n    case 'TSPropertySignature':\r\n      if (parent.key === node) {\r\n        return !!parent.computed\r\n      }\r\n\r\n      return true\r\n  }\r\n\r\n  return true\r\n}\r\n","// these keywords should not appear inside expressions, but operators like\r\n\r\nimport { SimpleExpressionNode } from './ast'\r\nimport { TransformContext } from './transform'\r\nimport { createCompilerError, ErrorCodes } from './errors'\r\n\r\n// typeof, instanceof and in are allowed\r\nconst prohibitedKeywordRE = new RegExp(\r\n  '\\\\b' +\r\n    (\r\n      'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n      'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n      'extends,finally,continue,debugger,function,arguments,typeof,void'\r\n    )\r\n      .split(',')\r\n      .join('\\\\b|\\\\b') +\r\n    '\\\\b'\r\n)\r\n\r\n// strip strings in expressions\r\nconst stripStringRE =\r\n  /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g\r\n\r\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn't prefix expressions.\r\n */\r\nexport function validateBrowserExpression(\r\n  node: SimpleExpressionNode,\r\n  context: TransformContext,\r\n  asParams = false,\r\n  asRawStatements = false\r\n) {\r\n  const exp = node.content\r\n\r\n  // empty expressions are validated per-directive since some directives\r\n  // do allow empty expressions.\r\n  if (!exp.trim()) {\r\n    return\r\n  }\r\n\r\n  try {\r\n    new Function(\r\n      asRawStatements\r\n        ? ` ${exp} `\r\n        : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`\r\n    )\r\n  } catch (e: any) {\r\n    let message = e.message\r\n    const keywordMatch = exp\r\n      .replace(stripStringRE, '')\r\n      .match(prohibitedKeywordRE)\r\n    if (keywordMatch) {\r\n      message = `avoid using JavaScript keyword as property name: \"${keywordMatch[0]}\"`\r\n    }\r\n    context.onError(\r\n      createCompilerError(\r\n        ErrorCodes.X_INVALID_EXPRESSION,\r\n        node.loc,\r\n        undefined,\r\n        message\r\n      )\r\n    )\r\n  }\r\n}\r\n","// - Parse expressions in templates into compound expressions so that each\r\n//   identifier gets more accurate source-map locations.\r\n//\r\n// - Prefix identifiers with `_ctx.` or `$xxx` (for known binding types) so that\r\n//   they are accessed from the right source\r\n//\r\n// - This transform is only applied in non-browser builds because it relies on\r\n//   an additional JavaScript parser. In the browser, there is no source-map\r\n//   support and the code is wrapped in `with (this) { ... }`.\r\nimport { NodeTransform, TransformContext } from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  createSimpleExpression,\r\n  ExpressionNode,\r\n  SimpleExpressionNode,\r\n  CompoundExpressionNode,\r\n  createCompoundExpression,\r\n  ConstantTypes\r\n} from '../ast'\r\nimport {\r\n  isInDestructureAssignment,\r\n  isStaticProperty,\r\n  isStaticPropertyKey,\r\n  walkIdentifiers\r\n} from '../babelUtils'\r\nimport { advancePositionWithClone, isSimpleIdentifier } from '../utils'\r\nimport {\r\n  isGloballyWhitelisted,\r\n  makeMap,\r\n  hasOwn,\r\n  isString,\r\n  genPropsAccessExp\r\n} from '@vue/shared'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport {\r\n  Node,\r\n  Identifier,\r\n  AssignmentExpression,\r\n  UpdateExpression\r\n} from '@babel/types'\r\nimport { validateBrowserExpression } from '../validateExpression'\r\nimport { parse } from '@babel/parser'\r\nimport { IS_REF, UNREF } from '../runtimeHelpers'\r\nimport { BindingTypes } from '../options'\r\n\r\nconst isLiteralWhitelisted = /*#__PURE__*/ makeMap('true,false,null,this')\r\n\r\nexport const transformExpression: NodeTransform = (node, context) => {\r\n  if (node.type === NodeTypes.INTERPOLATION) {\r\n    node.content = processExpression(\r\n      node.content as SimpleExpressionNode,\r\n      context\r\n    )\r\n  } else if (node.type === NodeTypes.ELEMENT) {\r\n    // handle directives on element\r\n    for (let i = 0; i < node.props.length; i++) {\r\n      const dir = node.props[i]\r\n      // do not process for v-on & v-for since they are special handled\r\n      if (dir.type === NodeTypes.DIRECTIVE && dir.name !== 'for') {\r\n        const exp = dir.exp\r\n        const arg = dir.arg\r\n        // do not process exp if this is v-on:arg - we need special handling\r\n        // for wrapping inline statements.\r\n        if (\r\n          exp &&\r\n          exp.type === NodeTypes.SIMPLE_EXPRESSION &&\r\n          !(dir.name === 'on' && arg)\r\n        ) {\r\n          dir.exp = processExpression(\r\n            exp,\r\n            context,\r\n            // slot args must be processed as function params\r\n            dir.name === 'slot'\r\n          )\r\n        }\r\n        if (arg && arg.type === NodeTypes.SIMPLE_EXPRESSION && !arg.isStatic) {\r\n          dir.arg = processExpression(arg, context)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface PrefixMeta {\r\n  prefix?: string\r\n  isConstant: boolean\r\n  start: number\r\n  end: number\r\n  scopeIds?: Set<string>\r\n}\r\n\r\n// Important: since this function uses Node.js only dependencies, it should\r\n// always be used with a leading !__BROWSER__ check so that it can be\r\n// tree-shaken from the browser build.\r\nexport function processExpression(\r\n  node: SimpleExpressionNode,\r\n  context: TransformContext,\r\n  // some expressions like v-slot props & v-for aliases should be parsed as\r\n  // function params\r\n  asParams = false,\r\n  // v-on handler values may contain multiple statements\r\n  asRawStatements = false,\r\n  localVars: Record<string, number> = Object.create(context.identifiers)\r\n): ExpressionNode {\r\n  if (__BROWSER__) {\r\n    if (__DEV__) {\r\n      // simple in-browser validation (same logic in 2.x)\r\n      validateBrowserExpression(node, context, asParams, asRawStatements)\r\n    }\r\n    return node\r\n  }\r\n\r\n  if (!context.prefixIdentifiers || !node.content.trim()) {\r\n    return node\r\n  }\r\n\r\n  const { inline, bindingMetadata } = context\r\n  const rewriteIdentifier = (raw: string, parent?: Node, id?: Identifier) => {\r\n    const type = hasOwn(bindingMetadata, raw) && bindingMetadata[raw]\r\n    if (inline) {\r\n      // x = y\r\n      const isAssignmentLVal =\r\n        parent && parent.type === 'AssignmentExpression' && parent.left === id\r\n      // x++\r\n      const isUpdateArg =\r\n        parent && parent.type === 'UpdateExpression' && parent.argument === id\r\n      // ({ x } = y)\r\n      const isDestructureAssignment =\r\n        parent && isInDestructureAssignment(parent, parentStack)\r\n\r\n      if (\r\n        type === BindingTypes.SETUP_CONST ||\r\n        type === BindingTypes.SETUP_REACTIVE_CONST ||\r\n        localVars[raw]\r\n      ) {\r\n        return raw\r\n      } else if (type === BindingTypes.SETUP_REF) {\r\n        return `${raw}.value`\r\n      } else if (type === BindingTypes.SETUP_MAYBE_REF) {\r\n        // const binding that may or may not be ref\r\n        // if it's not a ref, then assignments don't make sense -\r\n        // so we ignore the non-ref assignment case and generate code\r\n        // that assumes the value to be a ref for more efficiency\r\n        return isAssignmentLVal || isUpdateArg || isDestructureAssignment\r\n          ? `${raw}.value`\r\n          : `${context.helperString(UNREF)}(${raw})`\r\n      } else if (type === BindingTypes.SETUP_LET) {\r\n        if (isAssignmentLVal) {\r\n          // let binding.\r\n          // this is a bit more tricky as we need to cover the case where\r\n          // let is a local non-ref value, and we need to replicate the\r\n          // right hand side value.\r\n          // x = y --> isRef(x) ? x.value = y : x = y\r\n          const { right: rVal, operator } = parent as AssignmentExpression\r\n          const rExp = rawExp.slice(rVal.start! - 1, rVal.end! - 1)\r\n          const rExpString = stringifyExpression(\r\n            processExpression(\r\n              createSimpleExpression(rExp, false),\r\n              context,\r\n              false,\r\n              false,\r\n              knownIds\r\n            )\r\n          )\r\n          return `${context.helperString(IS_REF)}(${raw})${\r\n            context.isTS ? ` //@ts-ignore\\n` : ``\r\n          } ? ${raw}.value ${operator} ${rExpString} : ${raw}`\r\n        } else if (isUpdateArg) {\r\n          // make id replace parent in the code range so the raw update operator\r\n          // is removed\r\n          id!.start = parent!.start\r\n          id!.end = parent!.end\r\n          const { prefix: isPrefix, operator } = parent as UpdateExpression\r\n          const prefix = isPrefix ? operator : ``\r\n          const postfix = isPrefix ? `` : operator\r\n          // let binding.\r\n          // x++ --> isRef(a) ? a.value++ : a++\r\n          return `${context.helperString(IS_REF)}(${raw})${\r\n            context.isTS ? ` //@ts-ignore\\n` : ``\r\n          } ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`\r\n        } else if (isDestructureAssignment) {\r\n          // TODO\r\n          // let binding in a destructure assignment - it's very tricky to\r\n          // handle both possible cases here without altering the original\r\n          // structure of the code, so we just assume it's not a ref here\r\n          // for now\r\n          return raw\r\n        } else {\r\n          return `${context.helperString(UNREF)}(${raw})`\r\n        }\r\n      } else if (type === BindingTypes.PROPS) {\r\n        // use __props which is generated by compileScript so in ts mode\r\n        // it gets correct type\r\n        return genPropsAccessExp(raw)\r\n      } else if (type === BindingTypes.PROPS_ALIASED) {\r\n        // prop with a different local alias (from defineProps() destructure)\r\n        return genPropsAccessExp(bindingMetadata.__propsAliases![raw])\r\n      }\r\n    } else {\r\n      if (type && type.startsWith('setup')) {\r\n        // setup bindings in non-inline mode\r\n        return `$setup.${raw}`\r\n      } else if (type === BindingTypes.PROPS_ALIASED) {\r\n        return `$props['${bindingMetadata.__propsAliases![raw]}']`\r\n      } else if (type) {\r\n        return `$${type}.${raw}`\r\n      }\r\n    }\r\n\r\n    // fallback to ctx\r\n    return `_ctx.${raw}`\r\n  }\r\n\r\n  // fast path if expression is a simple identifier.\r\n  const rawExp = node.content\r\n  // bail constant on parens (function invocation) and dot (member access)\r\n  const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf('.') > 0\r\n\r\n  if (isSimpleIdentifier(rawExp)) {\r\n    const isScopeVarReference = context.identifiers[rawExp]\r\n    const isAllowedGlobal = isGloballyWhitelisted(rawExp)\r\n    const isLiteral = isLiteralWhitelisted(rawExp)\r\n    if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {\r\n      // const bindings exposed from setup can be skipped for patching but\r\n      // cannot be hoisted to module scope\r\n      if (bindingMetadata[node.content] === BindingTypes.SETUP_CONST) {\r\n        node.constType = ConstantTypes.CAN_SKIP_PATCH\r\n      }\r\n      node.content = rewriteIdentifier(rawExp)\r\n    } else if (!isScopeVarReference) {\r\n      if (isLiteral) {\r\n        node.constType = ConstantTypes.CAN_STRINGIFY\r\n      } else {\r\n        node.constType = ConstantTypes.CAN_HOIST\r\n      }\r\n    }\r\n    return node\r\n  }\r\n\r\n  let ast: any\r\n  // exp needs to be parsed differently:\r\n  // 1. Multiple inline statements (v-on, with presence of `;`): parse as raw\r\n  //    exp, but make sure to pad with spaces for consistent ranges\r\n  // 2. Expressions: wrap with parens (for e.g. object expressions)\r\n  // 3. Function arguments (v-for, v-slot): place in a function argument position\r\n  const source = asRawStatements\r\n    ? ` ${rawExp} `\r\n    : `(${rawExp})${asParams ? `=>{}` : ``}`\r\n  try {\r\n    ast = parse(source, {\r\n      plugins: context.expressionPlugins\r\n    }).program\r\n  } catch (e: any) {\r\n    context.onError(\r\n      createCompilerError(\r\n        ErrorCodes.X_INVALID_EXPRESSION,\r\n        node.loc,\r\n        undefined,\r\n        e.message\r\n      )\r\n    )\r\n    return node\r\n  }\r\n\r\n  type QualifiedId = Identifier & PrefixMeta\r\n  const ids: QualifiedId[] = []\r\n  const parentStack: Node[] = []\r\n  const knownIds: Record<string, number> = Object.create(context.identifiers)\r\n\r\n  walkIdentifiers(\r\n    ast,\r\n    (node, parent, _, isReferenced, isLocal) => {\r\n      if (isStaticPropertyKey(node, parent!)) {\r\n        return\r\n      }\r\n      // v2 wrapped filter call\r\n      if (__COMPAT__ && node.name.startsWith('_filter_')) {\r\n        return\r\n      }\r\n\r\n      const needPrefix = isReferenced && canPrefix(node)\r\n      if (needPrefix && !isLocal) {\r\n        if (isStaticProperty(parent!) && parent.shorthand) {\r\n          // property shorthand like { foo }, we need to add the key since\r\n          // we rewrite the value\r\n          ;(node as QualifiedId).prefix = `${node.name}: `\r\n        }\r\n        node.name = rewriteIdentifier(node.name, parent, node)\r\n        ids.push(node as QualifiedId)\r\n      } else {\r\n        // The identifier is considered constant unless it's pointing to a\r\n        // local scope variable (a v-for alias, or a v-slot prop)\r\n        if (!(needPrefix && isLocal) && !bailConstant) {\r\n          ;(node as QualifiedId).isConstant = true\r\n        }\r\n        // also generate sub-expressions for other identifiers for better\r\n        // source map support. (except for property keys which are static)\r\n        ids.push(node as QualifiedId)\r\n      }\r\n    },\r\n    true, // invoke on ALL identifiers\r\n    parentStack,\r\n    knownIds\r\n  )\r\n\r\n  // We break up the compound expression into an array of strings and sub\r\n  // expressions (for identifiers that have been prefixed). In codegen, if\r\n  // an ExpressionNode has the `.children` property, it will be used instead of\r\n  // `.content`.\r\n  const children: CompoundExpressionNode['children'] = []\r\n  ids.sort((a, b) => a.start - b.start)\r\n  ids.forEach((id, i) => {\r\n    // range is offset by -1 due to the wrapping parens when parsed\r\n    const start = id.start - 1\r\n    const end = id.end - 1\r\n    const last = ids[i - 1]\r\n    const leadingText = rawExp.slice(last ? last.end - 1 : 0, start)\r\n    if (leadingText.length || id.prefix) {\r\n      children.push(leadingText + (id.prefix || ``))\r\n    }\r\n    const source = rawExp.slice(start, end)\r\n    children.push(\r\n      createSimpleExpression(\r\n        id.name,\r\n        false,\r\n        {\r\n          source,\r\n          start: advancePositionWithClone(node.loc.start, source, start),\r\n          end: advancePositionWithClone(node.loc.start, source, end)\r\n        },\r\n        id.isConstant ? ConstantTypes.CAN_STRINGIFY : ConstantTypes.NOT_CONSTANT\r\n      )\r\n    )\r\n    if (i === ids.length - 1 && end < rawExp.length) {\r\n      children.push(rawExp.slice(end))\r\n    }\r\n  })\r\n\r\n  let ret\r\n  if (children.length) {\r\n    ret = createCompoundExpression(children, node.loc)\r\n  } else {\r\n    ret = node\r\n    ret.constType = bailConstant\r\n      ? ConstantTypes.NOT_CONSTANT\r\n      : ConstantTypes.CAN_STRINGIFY\r\n  }\r\n  ret.identifiers = Object.keys(knownIds)\r\n  return ret\r\n}\r\n\r\nfunction canPrefix(id: Identifier) {\r\n  // skip whitelisted globals\r\n  if (isGloballyWhitelisted(id.name)) {\r\n    return false\r\n  }\r\n  // special case for webpack compilation\r\n  if (id.name === 'require') {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction stringifyExpression(exp: ExpressionNode | string): string {\r\n  if (isString(exp)) {\r\n    return exp\r\n  } else if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n    return exp.content\r\n  } else {\r\n    return (exp.children as (ExpressionNode | string)[])\r\n      .map(stringifyExpression)\r\n      .join('')\r\n  }\r\n}\r\n","import { DirectiveTransform } from '../transform'\r\nimport {\r\n  createSimpleExpression,\r\n  createObjectProperty,\r\n  createCompoundExpression,\r\n  NodeTypes,\r\n  Property,\r\n  ElementTypes,\r\n  ExpressionNode,\r\n  ConstantTypes\r\n} from '../ast'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport {\r\n  isMemberExpression,\r\n  isSimpleIdentifier,\r\n  hasScopeRef,\r\n  isStaticExp\r\n} from '../utils'\r\nimport { IS_REF } from '../runtimeHelpers'\r\nimport { BindingTypes } from '../options'\r\n\r\nexport const transformModel: DirectiveTransform = (dir, node, context) => {\r\n  const { exp, arg } = dir\r\n  if (!exp) {\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_MODEL_NO_EXPRESSION, dir.loc)\r\n    )\r\n    return createTransformProps()\r\n  }\r\n\r\n  const rawExp = exp.loc.source\r\n  const expString =\r\n    exp.type === NodeTypes.SIMPLE_EXPRESSION ? exp.content : rawExp\r\n\r\n  // im SFC <script setup> inline mode, the exp may have been transformed into\r\n  // _unref(exp)\r\n  const bindingType = context.bindingMetadata[rawExp]\r\n  const maybeRef =\r\n    !__BROWSER__ &&\r\n    context.inline &&\r\n    bindingType &&\r\n    bindingType !== BindingTypes.SETUP_CONST\r\n\r\n  if (\r\n    !expString.trim() ||\r\n    (!isMemberExpression(expString, context) && !maybeRef)\r\n  ) {\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_MODEL_MALFORMED_EXPRESSION, exp.loc)\r\n    )\r\n    return createTransformProps()\r\n  }\r\n\r\n  if (\r\n    !__BROWSER__ &&\r\n    context.prefixIdentifiers &&\r\n    isSimpleIdentifier(expString) &&\r\n    context.identifiers[expString]\r\n  ) {\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_MODEL_ON_SCOPE_VARIABLE, exp.loc)\r\n    )\r\n    return createTransformProps()\r\n  }\r\n\r\n  const propName = arg ? arg : createSimpleExpression('modelValue', true)\r\n  const eventName = arg\r\n    ? isStaticExp(arg)\r\n      ? `onUpdate:${arg.content}`\r\n      : createCompoundExpression(['\"onUpdate:\" + ', arg])\r\n    : `onUpdate:modelValue`\r\n\r\n  let assignmentExp: ExpressionNode\r\n  const eventArg = context.isTS ? `($event: any)` : `$event`\r\n  if (maybeRef) {\r\n    if (bindingType === BindingTypes.SETUP_REF) {\r\n      // v-model used on known ref.\r\n      assignmentExp = createCompoundExpression([\r\n        `${eventArg} => ((`,\r\n        createSimpleExpression(rawExp, false, exp.loc),\r\n        `).value = $event)`\r\n      ])\r\n    } else {\r\n      // v-model used on a potentially ref binding in <script setup> inline mode.\r\n      // the assignment needs to check whether the binding is actually a ref.\r\n      const altAssignment =\r\n        bindingType === BindingTypes.SETUP_LET ? `${rawExp} = $event` : `null`\r\n      assignmentExp = createCompoundExpression([\r\n        `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,\r\n        createSimpleExpression(rawExp, false, exp.loc),\r\n        `).value = $event : ${altAssignment})`\r\n      ])\r\n    }\r\n  } else {\r\n    assignmentExp = createCompoundExpression([\r\n      `${eventArg} => ((`,\r\n      exp,\r\n      `) = $event)`\r\n    ])\r\n  }\r\n\r\n  const props = [\r\n    // modelValue: foo\r\n    createObjectProperty(propName, dir.exp!),\r\n    // \"onUpdate:modelValue\": $event => (foo = $event)\r\n    createObjectProperty(eventName, assignmentExp)\r\n  ]\r\n\r\n  // cache v-model handler if applicable (when it doesn't refer any scope vars)\r\n  if (\r\n    !__BROWSER__ &&\r\n    context.prefixIdentifiers &&\r\n    !context.inVOnce &&\r\n    context.cacheHandlers &&\r\n    !hasScopeRef(exp, context.identifiers)\r\n  ) {\r\n    props[1].value = context.cache(props[1].value)\r\n  }\r\n\r\n  // modelModifiers: { foo: true, \"bar-baz\": true }\r\n  if (dir.modifiers.length && node.tagType === ElementTypes.COMPONENT) {\r\n    const modifiers = dir.modifiers\r\n      .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n      .join(`, `)\r\n    const modifiersKey = arg\r\n      ? isStaticExp(arg)\r\n        ? `${arg.content}Modifiers`\r\n        : createCompoundExpression([arg, ' + \"Modifiers\"'])\r\n      : `modelModifiers`\r\n    props.push(\r\n      createObjectProperty(\r\n        modifiersKey,\r\n        createSimpleExpression(\r\n          `{ ${modifiers} }`,\r\n          false,\r\n          dir.loc,\r\n          ConstantTypes.CAN_HOIST\r\n        )\r\n      )\r\n    )\r\n  }\r\n\r\n  return createTransformProps(props)\r\n}\r\n\r\nfunction createTransformProps(props: Property[] = []) {\r\n  return { props }\r\n}\r\n","import { DirectiveTransform, DirectiveTransformResult } from '../transform'\r\nimport {\r\n  createCompoundExpression,\r\n  createObjectProperty,\r\n  createSimpleExpression,\r\n  DirectiveNode,\r\n  ElementTypes,\r\n  ExpressionNode,\r\n  NodeTypes,\r\n  SimpleExpressionNode\r\n} from '../ast'\r\nimport { camelize, toHandlerKey } from '@vue/shared'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport { processExpression } from './transformExpression'\r\nimport { validateBrowserExpression } from '../validateExpression'\r\nimport { hasScopeRef, isMemberExpression } from '../utils'\r\nimport { TO_HANDLER_KEY } from '../runtimeHelpers'\r\n\r\nconst fnExpRE =\r\n  /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/\r\n\r\nexport interface VOnDirectiveNode extends DirectiveNode {\r\n  // v-on without arg is handled directly in ./transformElements.ts due to it affecting\r\n  // codegen for the entire props object. This transform here is only for v-on\r\n  // *with* args.\r\n  arg: ExpressionNode\r\n  // exp is guaranteed to be a simple expression here because v-on w/ arg is\r\n  // skipped by transformExpression as a special case.\r\n  exp: SimpleExpressionNode | undefined\r\n}\r\n\r\nexport const transformOn: DirectiveTransform = (\r\n  dir,\r\n  node,\r\n  context,\r\n  augmentor\r\n) => {\r\n  const { loc, modifiers, arg } = dir as VOnDirectiveNode\r\n  if (!dir.exp && !modifiers.length) {\r\n    context.onError(createCompilerError(ErrorCodes.X_V_ON_NO_EXPRESSION, loc))\r\n  }\r\n  let eventName: ExpressionNode\r\n  if (arg.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n    if (arg.isStatic) {\r\n      let rawName = arg.content\r\n      // TODO deprecate @vnodeXXX usage\r\n      if (rawName.startsWith('vue:')) {\r\n        rawName = `vnode-${rawName.slice(4)}`\r\n      }\r\n      // for all event listeners, auto convert it to camelCase. See issue #2249\r\n      eventName = createSimpleExpression(\r\n        toHandlerKey(camelize(rawName)),\r\n        true,\r\n        arg.loc\r\n      )\r\n    } else {\r\n      // #2388\r\n      eventName = createCompoundExpression([\r\n        `${context.helperString(TO_HANDLER_KEY)}(`,\r\n        arg,\r\n        `)`\r\n      ])\r\n    }\r\n  } else {\r\n    // already a compound expression.\r\n    eventName = arg\r\n    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`)\r\n    eventName.children.push(`)`)\r\n  }\r\n\r\n  // handler processing\r\n  let exp: ExpressionNode | undefined = dir.exp as\r\n    | SimpleExpressionNode\r\n    | undefined\r\n  if (exp && !exp.content.trim()) {\r\n    exp = undefined\r\n  }\r\n  let shouldCache: boolean = context.cacheHandlers && !exp && !context.inVOnce\r\n  if (exp) {\r\n    const isMemberExp = isMemberExpression(exp.content, context)\r\n    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content))\r\n    const hasMultipleStatements = exp.content.includes(`;`)\r\n\r\n    // process the expression since it's been skipped\r\n    if (!__BROWSER__ && context.prefixIdentifiers) {\r\n      isInlineStatement && context.addIdentifiers(`$event`)\r\n      exp = dir.exp = processExpression(\r\n        exp,\r\n        context,\r\n        false,\r\n        hasMultipleStatements\r\n      )\r\n      isInlineStatement && context.removeIdentifiers(`$event`)\r\n      // with scope analysis, the function is hoistable if it has no reference\r\n      // to scope variables.\r\n      shouldCache =\r\n        context.cacheHandlers &&\r\n        // unnecessary to cache inside v-once\r\n        !context.inVOnce &&\r\n        // runtime constants don't need to be cached\r\n        // (this is analyzed by compileScript in SFC <script setup>)\r\n        !(exp.type === NodeTypes.SIMPLE_EXPRESSION && exp.constType > 0) &&\r\n        // #1541 bail if this is a member exp handler passed to a component -\r\n        // we need to use the original function to preserve arity,\r\n        // e.g. <transition> relies on checking cb.length to determine\r\n        // transition end handling. Inline function is ok since its arity\r\n        // is preserved even when cached.\r\n        !(isMemberExp && node.tagType === ElementTypes.COMPONENT) &&\r\n        // bail if the function references closure variables (v-for, v-slot)\r\n        // it must be passed fresh to avoid stale values.\r\n        !hasScopeRef(exp, context.identifiers)\r\n      // If the expression is optimizable and is a member expression pointing\r\n      // to a function, turn it into invocation (and wrap in an arrow function\r\n      // below) so that it always accesses the latest value when called - thus\r\n      // avoiding the need to be patched.\r\n      if (shouldCache && isMemberExp) {\r\n        if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n          exp.content = `${exp.content} && ${exp.content}(...args)`\r\n        } else {\r\n          exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`]\r\n        }\r\n      }\r\n    }\r\n\r\n    if (__DEV__ && __BROWSER__) {\r\n      validateBrowserExpression(\r\n        exp as SimpleExpressionNode,\r\n        context,\r\n        false,\r\n        hasMultipleStatements\r\n      )\r\n    }\r\n\r\n    if (isInlineStatement || (shouldCache && isMemberExp)) {\r\n      // wrap inline statement in a function expression\r\n      exp = createCompoundExpression([\r\n        `${\r\n          isInlineStatement\r\n            ? !__BROWSER__ && context.isTS\r\n              ? `($event: any)`\r\n              : `$event`\r\n            : `${\r\n                !__BROWSER__ && context.isTS ? `\\n//@ts-ignore\\n` : ``\r\n              }(...args)`\r\n        } => ${hasMultipleStatements ? `{` : `(`}`,\r\n        exp,\r\n        hasMultipleStatements ? `}` : `)`\r\n      ])\r\n    }\r\n  }\r\n\r\n  let ret: DirectiveTransformResult = {\r\n    props: [\r\n      createObjectProperty(\r\n        eventName,\r\n        exp || createSimpleExpression(`() => {}`, false, loc)\r\n      )\r\n    ]\r\n  }\r\n\r\n  // apply extended compiler augmentor\r\n  if (augmentor) {\r\n    ret = augmentor(ret)\r\n  }\r\n\r\n  if (shouldCache) {\r\n    // cache handlers so that it's always the same handler being passed down.\r\n    // this avoids unnecessary re-renders when users use inline handlers on\r\n    // components.\r\n    ret.props[0].value = context.cache(ret.props[0].value)\r\n  }\r\n\r\n  // mark the key as handler for props normalization check\r\n  ret.props.forEach(p => (p.key.isHandlerKey = true))\r\n  return ret\r\n}\r\n","import { DirectiveTransform } from '../transform'\r\nimport {\r\n  createObjectProperty,\r\n  createSimpleExpression,\r\n  ExpressionNode,\r\n  NodeTypes\r\n} from '../ast'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport { camelize } from '@vue/shared'\r\nimport { CAMELIZE } from '../runtimeHelpers'\r\n\r\n// v-bind without arg is handled directly in ./transformElements.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nexport const transformBind: DirectiveTransform = (dir, _node, context) => {\r\n  const { exp, modifiers, loc } = dir\r\n  const arg = dir.arg!\r\n\r\n  if (arg.type !== NodeTypes.SIMPLE_EXPRESSION) {\r\n    arg.children.unshift(`(`)\r\n    arg.children.push(`) || \"\"`)\r\n  } else if (!arg.isStatic) {\r\n    arg.content = `${arg.content} || \"\"`\r\n  }\r\n\r\n  // .sync is replaced by v-model:arg\r\n  if (modifiers.includes('camel')) {\r\n    if (arg.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n      if (arg.isStatic) {\r\n        arg.content = camelize(arg.content)\r\n      } else {\r\n        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`\r\n      }\r\n    } else {\r\n      arg.children.unshift(`${context.helperString(CAMELIZE)}(`)\r\n      arg.children.push(`)`)\r\n    }\r\n  }\r\n\r\n  if (!context.inSSR) {\r\n    if (modifiers.includes('prop')) {\r\n      injectPrefix(arg, '.')\r\n    }\r\n    if (modifiers.includes('attr')) {\r\n      injectPrefix(arg, '^')\r\n    }\r\n  }\r\n\r\n  if (\r\n    !exp ||\r\n    (exp.type === NodeTypes.SIMPLE_EXPRESSION && !exp.content.trim())\r\n  ) {\r\n    context.onError(createCompilerError(ErrorCodes.X_V_BIND_NO_EXPRESSION, loc))\r\n    return {\r\n      props: [createObjectProperty(arg, createSimpleExpression('', true, loc))]\r\n    }\r\n  }\r\n\r\n  return {\r\n    props: [createObjectProperty(arg, exp)]\r\n  }\r\n}\r\n\r\nconst injectPrefix = (arg: ExpressionNode, prefix: string) => {\r\n  if (arg.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n    if (arg.isStatic) {\r\n      arg.content = prefix + arg.content\r\n    } else {\r\n      arg.content = `\\`${prefix}\\${${arg.content}}\\``\r\n    }\r\n  } else {\r\n    arg.children.unshift(`'${prefix}' + (`)\r\n    arg.children.push(`)`)\r\n  }\r\n}\r\n","import { DirectiveTransform } from '../transform'\r\n\r\nexport const noopDirectiveTransform: DirectiveTransform = () => ({ props: [] })\r\n","import {\r\n  createStructuralDirectiveTransform,\r\n  TransformContext\r\n} from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  ExpressionNode,\r\n  createSimpleExpression,\r\n  SourceLocation,\r\n  SimpleExpressionNode,\r\n  createCallExpression,\r\n  createFunctionExpression,\r\n  createObjectExpression,\r\n  createObjectProperty,\r\n  ForCodegenNode,\r\n  RenderSlotCall,\r\n  SlotOutletNode,\r\n  ElementNode,\r\n  DirectiveNode,\r\n  ForNode,\r\n  PlainElementNode,\r\n  createVNodeCall,\r\n  VNodeCall,\r\n  ForRenderListExpression,\r\n  BlockCodegenNode,\r\n  ForIteratorExpression,\r\n  ConstantTypes,\r\n  createBlockStatement,\r\n  createCompoundExpression\r\n} from '../ast'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport {\r\n  getInnerRange,\r\n  findProp,\r\n  isTemplateNode,\r\n  isSlotOutlet,\r\n  injectProp,\r\n  getVNodeBlockHelper,\r\n  getVNodeHelper,\r\n  findDir\r\n} from '../utils'\r\nimport {\r\n  RENDER_LIST,\r\n  OPEN_BLOCK,\r\n  FRAGMENT,\r\n  IS_MEMO_SAME\r\n} from '../runtimeHelpers'\r\nimport { processExpression } from './transformExpression'\r\nimport { validateBrowserExpression } from '../validateExpression'\r\nimport { PatchFlags, PatchFlagNames } from '@vue/shared'\r\n\r\nexport const transformFor = createStructuralDirectiveTransform(\r\n  'for',\r\n  (node, dir, context) => {\r\n    const { helper, removeHelper } = context\r\n    return processFor(node, dir, context, forNode => {\r\n      // create the loop render function expression now, and add the\r\n      // iterator on exit after all children have been traversed\r\n      const renderExp = createCallExpression(helper(RENDER_LIST), [\r\n        forNode.source\r\n      ]) as ForRenderListExpression\r\n      const isTemplate = isTemplateNode(node)\r\n      const memo = findDir(node, 'memo')\r\n      const keyProp = findProp(node, `key`)\r\n      const keyExp =\r\n        keyProp &&\r\n        (keyProp.type === NodeTypes.ATTRIBUTE\r\n          ? createSimpleExpression(keyProp.value!.content, true)\r\n          : keyProp.exp!)\r\n      const keyProperty = keyProp ? createObjectProperty(`key`, keyExp!) : null\r\n\r\n      if (!__BROWSER__ && isTemplate) {\r\n        // #2085 / #5288 process :key and v-memo expressions need to be\r\n        // processed on `<template v-for>`. In this case the node is discarded\r\n        // and never traversed so its binding expressions won't be processed\r\n        // by the normal transforms.\r\n        if (memo) {\r\n          memo.exp = processExpression(\r\n            memo.exp! as SimpleExpressionNode,\r\n            context\r\n          )\r\n        }\r\n        if (keyProperty && keyProp!.type !== NodeTypes.ATTRIBUTE) {\r\n          keyProperty.value = processExpression(\r\n            keyProperty.value as SimpleExpressionNode,\r\n            context\r\n          )\r\n        }\r\n      }\r\n\r\n      const isStableFragment =\r\n        forNode.source.type === NodeTypes.SIMPLE_EXPRESSION &&\r\n        forNode.source.constType > ConstantTypes.NOT_CONSTANT\r\n      const fragmentFlag = isStableFragment\r\n        ? PatchFlags.STABLE_FRAGMENT\r\n        : keyProp\r\n        ? PatchFlags.KEYED_FRAGMENT\r\n        : PatchFlags.UNKEYED_FRAGMENT\r\n\r\n      forNode.codegenNode = createVNodeCall(\r\n        context,\r\n        helper(FRAGMENT),\r\n        undefined,\r\n        renderExp,\r\n        fragmentFlag +\r\n          (__DEV__ ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``),\r\n        undefined,\r\n        undefined,\r\n        true /* isBlock */,\r\n        !isStableFragment /* disableTracking */,\r\n        false /* isComponent */,\r\n        node.loc\r\n      ) as ForCodegenNode\r\n\r\n      return () => {\r\n        // finish the codegen now that all children have been traversed\r\n        let childBlock: BlockCodegenNode\r\n        const { children } = forNode\r\n\r\n        // check <template v-for> key placement\r\n        if ((__DEV__ || !__BROWSER__) && isTemplate) {\r\n          node.children.some(c => {\r\n            if (c.type === NodeTypes.ELEMENT) {\r\n              const key = findProp(c, 'key')\r\n              if (key) {\r\n                context.onError(\r\n                  createCompilerError(\r\n                    ErrorCodes.X_V_FOR_TEMPLATE_KEY_PLACEMENT,\r\n                    key.loc\r\n                  )\r\n                )\r\n                return true\r\n              }\r\n            }\r\n          })\r\n        }\r\n\r\n        const needFragmentWrapper =\r\n          children.length !== 1 || children[0].type !== NodeTypes.ELEMENT\r\n        const slotOutlet = isSlotOutlet(node)\r\n          ? node\r\n          : isTemplate &&\r\n            node.children.length === 1 &&\r\n            isSlotOutlet(node.children[0])\r\n          ? (node.children[0] as SlotOutletNode) // api-extractor somehow fails to infer this\r\n          : null\r\n\r\n        if (slotOutlet) {\r\n          // <slot v-for=\"...\"> or <template v-for=\"...\"><slot/></template>\r\n          childBlock = slotOutlet.codegenNode as RenderSlotCall\r\n          if (isTemplate && keyProperty) {\r\n            // <template v-for=\"...\" :key=\"...\"><slot/></template>\r\n            // we need to inject the key to the renderSlot() call.\r\n            // the props for renderSlot is passed as the 3rd argument.\r\n            injectProp(childBlock, keyProperty, context)\r\n          }\r\n        } else if (needFragmentWrapper) {\r\n          // <template v-for=\"...\"> with text or multi-elements\r\n          // should generate a fragment block for each loop\r\n          childBlock = createVNodeCall(\r\n            context,\r\n            helper(FRAGMENT),\r\n            keyProperty ? createObjectExpression([keyProperty]) : undefined,\r\n            node.children,\r\n            PatchFlags.STABLE_FRAGMENT +\r\n              (__DEV__\r\n                ? ` /* ${PatchFlagNames[PatchFlags.STABLE_FRAGMENT]} */`\r\n                : ``),\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            undefined,\r\n            false /* isComponent */\r\n          )\r\n        } else {\r\n          // Normal element v-for. Directly use the child's codegenNode\r\n          // but mark it as a block.\r\n          childBlock = (children[0] as PlainElementNode)\r\n            .codegenNode as VNodeCall\r\n          if (isTemplate && keyProperty) {\r\n            injectProp(childBlock, keyProperty, context)\r\n          }\r\n          if (childBlock.isBlock !== !isStableFragment) {\r\n            if (childBlock.isBlock) {\r\n              // switch from block to vnode\r\n              removeHelper(OPEN_BLOCK)\r\n              removeHelper(\r\n                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)\r\n              )\r\n            } else {\r\n              // switch from vnode to block\r\n              removeHelper(\r\n                getVNodeHelper(context.inSSR, childBlock.isComponent)\r\n              )\r\n            }\r\n          }\r\n          childBlock.isBlock = !isStableFragment\r\n          if (childBlock.isBlock) {\r\n            helper(OPEN_BLOCK)\r\n            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent))\r\n          } else {\r\n            helper(getVNodeHelper(context.inSSR, childBlock.isComponent))\r\n          }\r\n        }\r\n\r\n        if (memo) {\r\n          const loop = createFunctionExpression(\r\n            createForLoopParams(forNode.parseResult, [\r\n              createSimpleExpression(`_cached`)\r\n            ])\r\n          )\r\n          loop.body = createBlockStatement([\r\n            createCompoundExpression([`const _memo = (`, memo.exp!, `)`]),\r\n            createCompoundExpression([\r\n              `if (_cached`,\r\n              ...(keyExp ? [` && _cached.key === `, keyExp] : []),\r\n              ` && ${context.helperString(\r\n                IS_MEMO_SAME\r\n              )}(_cached, _memo)) return _cached`\r\n            ]),\r\n            createCompoundExpression([`const _item = `, childBlock as any]),\r\n            createSimpleExpression(`_item.memo = _memo`),\r\n            createSimpleExpression(`return _item`)\r\n          ])\r\n          renderExp.arguments.push(\r\n            loop as ForIteratorExpression,\r\n            createSimpleExpression(`_cache`),\r\n            createSimpleExpression(String(context.cached++))\r\n          )\r\n        } else {\r\n          renderExp.arguments.push(\r\n            createFunctionExpression(\r\n              createForLoopParams(forNode.parseResult),\r\n              childBlock,\r\n              true /* force newline */\r\n            ) as ForIteratorExpression\r\n          )\r\n        }\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\n// target-agnostic transform used for both Client and SSR\r\nexport function processFor(\r\n  node: ElementNode,\r\n  dir: DirectiveNode,\r\n  context: TransformContext,\r\n  processCodegen?: (forNode: ForNode) => (() => void) | undefined\r\n) {\r\n  if (!dir.exp) {\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_FOR_NO_EXPRESSION, dir.loc)\r\n    )\r\n    return\r\n  }\r\n\r\n  const parseResult = parseForExpression(\r\n    // can only be simple expression because vFor transform is applied\r\n    // before expression transform.\r\n    dir.exp as SimpleExpressionNode,\r\n    context\r\n  )\r\n\r\n  if (!parseResult) {\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_FOR_MALFORMED_EXPRESSION, dir.loc)\r\n    )\r\n    return\r\n  }\r\n\r\n  const { addIdentifiers, removeIdentifiers, scopes } = context\r\n  const { source, value, key, index } = parseResult\r\n\r\n  const forNode: ForNode = {\r\n    type: NodeTypes.FOR,\r\n    loc: dir.loc,\r\n    source,\r\n    valueAlias: value,\r\n    keyAlias: key,\r\n    objectIndexAlias: index,\r\n    parseResult,\r\n    children: isTemplateNode(node) ? node.children : [node]\r\n  }\r\n\r\n  context.replaceNode(forNode)\r\n\r\n  // bookkeeping\r\n  scopes.vFor++\r\n  if (!__BROWSER__ && context.prefixIdentifiers) {\r\n    // scope management\r\n    // inject identifiers to context\r\n    value && addIdentifiers(value)\r\n    key && addIdentifiers(key)\r\n    index && addIdentifiers(index)\r\n  }\r\n\r\n  const onExit = processCodegen && processCodegen(forNode)\r\n\r\n  return () => {\r\n    scopes.vFor--\r\n    if (!__BROWSER__ && context.prefixIdentifiers) {\r\n      value && removeIdentifiers(value)\r\n      key && removeIdentifiers(key)\r\n      index && removeIdentifiers(index)\r\n    }\r\n    if (onExit) onExit()\r\n  }\r\n}\r\n\r\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/\r\n// This regex doesn't cover the case if key or index aliases have destructuring,\r\n// but those do not make sense in the first place, so this works in practice.\r\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/\r\nconst stripParensRE = /^\\(|\\)$/g\r\n\r\nexport interface ForParseResult {\r\n  source: ExpressionNode\r\n  value: ExpressionNode | undefined\r\n  key: ExpressionNode | undefined\r\n  index: ExpressionNode | undefined\r\n}\r\n\r\nexport function parseForExpression(\r\n  input: SimpleExpressionNode,\r\n  context: TransformContext\r\n): ForParseResult | undefined {\r\n  const loc = input.loc\r\n  const exp = input.content\r\n  const inMatch = exp.match(forAliasRE)\r\n  if (!inMatch) return\r\n\r\n  const [, LHS, RHS] = inMatch\r\n\r\n  const result: ForParseResult = {\r\n    source: createAliasExpression(\r\n      loc,\r\n      RHS.trim(),\r\n      exp.indexOf(RHS, LHS.length)\r\n    ),\r\n    value: undefined,\r\n    key: undefined,\r\n    index: undefined\r\n  }\r\n  if (!__BROWSER__ && context.prefixIdentifiers) {\r\n    result.source = processExpression(\r\n      result.source as SimpleExpressionNode,\r\n      context\r\n    )\r\n  }\r\n  if (__DEV__ && __BROWSER__) {\r\n    validateBrowserExpression(result.source as SimpleExpressionNode, context)\r\n  }\r\n\r\n  let valueContent = LHS.trim().replace(stripParensRE, '').trim()\r\n  const trimmedOffset = LHS.indexOf(valueContent)\r\n\r\n  const iteratorMatch = valueContent.match(forIteratorRE)\r\n  if (iteratorMatch) {\r\n    valueContent = valueContent.replace(forIteratorRE, '').trim()\r\n\r\n    const keyContent = iteratorMatch[1].trim()\r\n    let keyOffset: number | undefined\r\n    if (keyContent) {\r\n      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length)\r\n      result.key = createAliasExpression(loc, keyContent, keyOffset)\r\n      if (!__BROWSER__ && context.prefixIdentifiers) {\r\n        result.key = processExpression(result.key, context, true)\r\n      }\r\n      if (__DEV__ && __BROWSER__) {\r\n        validateBrowserExpression(\r\n          result.key as SimpleExpressionNode,\r\n          context,\r\n          true\r\n        )\r\n      }\r\n    }\r\n\r\n    if (iteratorMatch[2]) {\r\n      const indexContent = iteratorMatch[2].trim()\r\n\r\n      if (indexContent) {\r\n        result.index = createAliasExpression(\r\n          loc,\r\n          indexContent,\r\n          exp.indexOf(\r\n            indexContent,\r\n            result.key\r\n              ? keyOffset! + keyContent.length\r\n              : trimmedOffset + valueContent.length\r\n          )\r\n        )\r\n        if (!__BROWSER__ && context.prefixIdentifiers) {\r\n          result.index = processExpression(result.index, context, true)\r\n        }\r\n        if (__DEV__ && __BROWSER__) {\r\n          validateBrowserExpression(\r\n            result.index as SimpleExpressionNode,\r\n            context,\r\n            true\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (valueContent) {\r\n    result.value = createAliasExpression(loc, valueContent, trimmedOffset)\r\n    if (!__BROWSER__ && context.prefixIdentifiers) {\r\n      result.value = processExpression(result.value, context, true)\r\n    }\r\n    if (__DEV__ && __BROWSER__) {\r\n      validateBrowserExpression(\r\n        result.value as SimpleExpressionNode,\r\n        context,\r\n        true\r\n      )\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction createAliasExpression(\r\n  range: SourceLocation,\r\n  content: string,\r\n  offset: number\r\n): SimpleExpressionNode {\r\n  return createSimpleExpression(\r\n    content,\r\n    false,\r\n    getInnerRange(range, offset, content.length)\r\n  )\r\n}\r\n\r\nexport function createForLoopParams(\r\n  { value, key, index }: ForParseResult,\r\n  memoArgs: ExpressionNode[] = []\r\n): ExpressionNode[] {\r\n  return createParamsList([value, key, index, ...memoArgs])\r\n}\r\n\r\nfunction createParamsList(\r\n  args: (ExpressionNode | undefined)[]\r\n): ExpressionNode[] {\r\n  let i = args.length\r\n  while (i--) {\r\n    if (args[i]) break\r\n  }\r\n  return args\r\n    .slice(0, i + 1)\r\n    .map((arg, i) => arg || createSimpleExpression(`_`.repeat(i + 1), false))\r\n}\r\n","import {\r\n  ElementNode,\r\n  ObjectExpression,\r\n  createObjectExpression,\r\n  NodeTypes,\r\n  createObjectProperty,\r\n  createSimpleExpression,\r\n  createFunctionExpression,\r\n  DirectiveNode,\r\n  ElementTypes,\r\n  ExpressionNode,\r\n  Property,\r\n  TemplateChildNode,\r\n  SourceLocation,\r\n  createConditionalExpression,\r\n  ConditionalExpression,\r\n  SimpleExpressionNode,\r\n  FunctionExpression,\r\n  CallExpression,\r\n  createCallExpression,\r\n  createArrayExpression,\r\n  SlotsExpression\r\n} from '../ast'\r\nimport { TransformContext, NodeTransform } from '../transform'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport {\r\n  findDir,\r\n  isTemplateNode,\r\n  assert,\r\n  isVSlot,\r\n  hasScopeRef,\r\n  isStaticExp\r\n} from '../utils'\r\nimport { CREATE_SLOTS, RENDER_LIST, WITH_CTX } from '../runtimeHelpers'\r\nimport { parseForExpression, createForLoopParams } from './vFor'\r\nimport { SlotFlags, slotFlagsText } from '@vue/shared'\r\n\r\nconst defaultFallback = createSimpleExpression(`undefined`, false)\r\n\r\n// A NodeTransform that:\r\n// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed\r\n//    by transformExpression. This is only applied in non-browser builds with\r\n//    { prefixIdentifiers: true }.\r\n// 2. Track v-slot depths so that we know a slot is inside another slot.\r\n//    Note the exit callback is executed before buildSlots() on the same node,\r\n//    so only nested slots see positive numbers.\r\nexport const trackSlotScopes: NodeTransform = (node, context) => {\r\n  if (\r\n    node.type === NodeTypes.ELEMENT &&\r\n    (node.tagType === ElementTypes.COMPONENT ||\r\n      node.tagType === ElementTypes.TEMPLATE)\r\n  ) {\r\n    // We are only checking non-empty v-slot here\r\n    // since we only care about slots that introduce scope variables.\r\n    const vSlot = findDir(node, 'slot')\r\n    if (vSlot) {\r\n      const slotProps = vSlot.exp\r\n      if (!__BROWSER__ && context.prefixIdentifiers) {\r\n        slotProps && context.addIdentifiers(slotProps)\r\n      }\r\n      context.scopes.vSlot++\r\n      return () => {\r\n        if (!__BROWSER__ && context.prefixIdentifiers) {\r\n          slotProps && context.removeIdentifiers(slotProps)\r\n        }\r\n        context.scopes.vSlot--\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// A NodeTransform that tracks scope identifiers for scoped slots with v-for.\r\n// This transform is only applied in non-browser builds with { prefixIdentifiers: true }\r\nexport const trackVForSlotScopes: NodeTransform = (node, context) => {\r\n  let vFor\r\n  if (\r\n    isTemplateNode(node) &&\r\n    node.props.some(isVSlot) &&\r\n    (vFor = findDir(node, 'for'))\r\n  ) {\r\n    const result = (vFor.parseResult = parseForExpression(\r\n      vFor.exp as SimpleExpressionNode,\r\n      context\r\n    ))\r\n    if (result) {\r\n      const { value, key, index } = result\r\n      const { addIdentifiers, removeIdentifiers } = context\r\n      value && addIdentifiers(value)\r\n      key && addIdentifiers(key)\r\n      index && addIdentifiers(index)\r\n\r\n      return () => {\r\n        value && removeIdentifiers(value)\r\n        key && removeIdentifiers(key)\r\n        index && removeIdentifiers(index)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type SlotFnBuilder = (\r\n  slotProps: ExpressionNode | undefined,\r\n  slotChildren: TemplateChildNode[],\r\n  loc: SourceLocation\r\n) => FunctionExpression\r\n\r\nconst buildClientSlotFn: SlotFnBuilder = (props, children, loc) =>\r\n  createFunctionExpression(\r\n    props,\r\n    children,\r\n    false /* newline */,\r\n    true /* isSlot */,\r\n    children.length ? children[0].loc : loc\r\n  )\r\n\r\n// Instead of being a DirectiveTransform, v-slot processing is called during\r\n// transformElement to build the slots object for a component.\r\nexport function buildSlots(\r\n  node: ElementNode,\r\n  context: TransformContext,\r\n  buildSlotFn: SlotFnBuilder = buildClientSlotFn\r\n): {\r\n  slots: SlotsExpression\r\n  hasDynamicSlots: boolean\r\n} {\r\n  context.helper(WITH_CTX)\r\n\r\n  const { children, loc } = node\r\n  const slotsProperties: Property[] = []\r\n  const dynamicSlots: (ConditionalExpression | CallExpression)[] = []\r\n\r\n  // If the slot is inside a v-for or another v-slot, force it to be dynamic\r\n  // since it likely uses a scope variable.\r\n  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0\r\n  // with `prefixIdentifiers: true`, this can be further optimized to make\r\n  // it dynamic only when the slot actually uses the scope variables.\r\n  if (!__BROWSER__ && !context.ssr && context.prefixIdentifiers) {\r\n    hasDynamicSlots = hasScopeRef(node, context.identifiers)\r\n  }\r\n\r\n  // 1. Check for slot with slotProps on component itself.\r\n  //    <Comp v-slot=\"{ prop }\"/>\r\n  const onComponentSlot = findDir(node, 'slot', true)\r\n  if (onComponentSlot) {\r\n    const { arg, exp } = onComponentSlot\r\n    if (arg && !isStaticExp(arg)) {\r\n      hasDynamicSlots = true\r\n    }\r\n    slotsProperties.push(\r\n      createObjectProperty(\r\n        arg || createSimpleExpression('default', true),\r\n        buildSlotFn(exp, children, loc)\r\n      )\r\n    )\r\n  }\r\n\r\n  // 2. Iterate through children and check for template slots\r\n  //    <template v-slot:foo=\"{ prop }\">\r\n  let hasTemplateSlots = false\r\n  let hasNamedDefaultSlot = false\r\n  const implicitDefaultChildren: TemplateChildNode[] = []\r\n  const seenSlotNames = new Set<string>()\r\n\r\n  for (let i = 0; i < children.length; i++) {\r\n    const slotElement = children[i]\r\n    let slotDir\r\n\r\n    if (\r\n      !isTemplateNode(slotElement) ||\r\n      !(slotDir = findDir(slotElement, 'slot', true))\r\n    ) {\r\n      // not a <template v-slot>, skip.\r\n      if (slotElement.type !== NodeTypes.COMMENT) {\r\n        implicitDefaultChildren.push(slotElement)\r\n      }\r\n      continue\r\n    }\r\n\r\n    if (onComponentSlot) {\r\n      // already has on-component slot - this is incorrect usage.\r\n      context.onError(\r\n        createCompilerError(ErrorCodes.X_V_SLOT_MIXED_SLOT_USAGE, slotDir.loc)\r\n      )\r\n      break\r\n    }\r\n\r\n    hasTemplateSlots = true\r\n    const { children: slotChildren, loc: slotLoc } = slotElement\r\n    const {\r\n      arg: slotName = createSimpleExpression(`default`, true),\r\n      exp: slotProps,\r\n      loc: dirLoc\r\n    } = slotDir\r\n\r\n    // check if name is dynamic.\r\n    let staticSlotName: string | undefined\r\n    if (isStaticExp(slotName)) {\r\n      staticSlotName = slotName ? slotName.content : `default`\r\n    } else {\r\n      hasDynamicSlots = true\r\n    }\r\n\r\n    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc)\r\n    // check if this slot is conditional (v-if/v-for)\r\n    let vIf: DirectiveNode | undefined\r\n    let vElse: DirectiveNode | undefined\r\n    let vFor: DirectiveNode | undefined\r\n    if ((vIf = findDir(slotElement, 'if'))) {\r\n      hasDynamicSlots = true\r\n      dynamicSlots.push(\r\n        createConditionalExpression(\r\n          vIf.exp!,\r\n          buildDynamicSlot(slotName, slotFunction),\r\n          defaultFallback\r\n        )\r\n      )\r\n    } else if (\r\n      (vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))\r\n    ) {\r\n      // find adjacent v-if\r\n      let j = i\r\n      let prev\r\n      while (j--) {\r\n        prev = children[j]\r\n        if (prev.type !== NodeTypes.COMMENT) {\r\n          break\r\n        }\r\n      }\r\n      if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {\r\n        // remove node\r\n        children.splice(i, 1)\r\n        i--\r\n        __TEST__ && assert(dynamicSlots.length > 0)\r\n        // attach this slot to previous conditional\r\n        let conditional = dynamicSlots[\r\n          dynamicSlots.length - 1\r\n        ] as ConditionalExpression\r\n        while (\r\n          conditional.alternate.type === NodeTypes.JS_CONDITIONAL_EXPRESSION\r\n        ) {\r\n          conditional = conditional.alternate\r\n        }\r\n        conditional.alternate = vElse.exp\r\n          ? createConditionalExpression(\r\n              vElse.exp,\r\n              buildDynamicSlot(slotName, slotFunction),\r\n              defaultFallback\r\n            )\r\n          : buildDynamicSlot(slotName, slotFunction)\r\n      } else {\r\n        context.onError(\r\n          createCompilerError(ErrorCodes.X_V_ELSE_NO_ADJACENT_IF, vElse.loc)\r\n        )\r\n      }\r\n    } else if ((vFor = findDir(slotElement, 'for'))) {\r\n      hasDynamicSlots = true\r\n      const parseResult =\r\n        vFor.parseResult ||\r\n        parseForExpression(vFor.exp as SimpleExpressionNode, context)\r\n      if (parseResult) {\r\n        // Render the dynamic slots as an array and add it to the createSlot()\r\n        // args. The runtime knows how to handle it appropriately.\r\n        dynamicSlots.push(\r\n          createCallExpression(context.helper(RENDER_LIST), [\r\n            parseResult.source,\r\n            createFunctionExpression(\r\n              createForLoopParams(parseResult),\r\n              buildDynamicSlot(slotName, slotFunction),\r\n              true /* force newline */\r\n            )\r\n          ])\r\n        )\r\n      } else {\r\n        context.onError(\r\n          createCompilerError(ErrorCodes.X_V_FOR_MALFORMED_EXPRESSION, vFor.loc)\r\n        )\r\n      }\r\n    } else {\r\n      // check duplicate static names\r\n      if (staticSlotName) {\r\n        if (seenSlotNames.has(staticSlotName)) {\r\n          context.onError(\r\n            createCompilerError(\r\n              ErrorCodes.X_V_SLOT_DUPLICATE_SLOT_NAMES,\r\n              dirLoc\r\n            )\r\n          )\r\n          continue\r\n        }\r\n        seenSlotNames.add(staticSlotName)\r\n        if (staticSlotName === 'default') {\r\n          hasNamedDefaultSlot = true\r\n        }\r\n      }\r\n      slotsProperties.push(createObjectProperty(slotName, slotFunction))\r\n    }\r\n  }\r\n\r\n  if (!onComponentSlot) {\r\n    const buildDefaultSlotProperty = (\r\n      props: ExpressionNode | undefined,\r\n      children: TemplateChildNode[]\r\n    ) => {\r\n      const fn = buildSlotFn(props, children, loc)\r\n      if (__COMPAT__ && context.compatConfig) {\r\n        fn.isNonScopedSlot = true\r\n      }\r\n      return createObjectProperty(`default`, fn)\r\n    }\r\n\r\n    if (!hasTemplateSlots) {\r\n      // implicit default slot (on component)\r\n      slotsProperties.push(buildDefaultSlotProperty(undefined, children))\r\n    } else if (\r\n      implicitDefaultChildren.length &&\r\n      // #3766\r\n      // with whitespace: 'preserve', whitespaces between slots will end up in\r\n      // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\r\n      implicitDefaultChildren.some(node => isNonWhitespaceContent(node))\r\n    ) {\r\n      // implicit default slot (mixed with named slots)\r\n      if (hasNamedDefaultSlot) {\r\n        context.onError(\r\n          createCompilerError(\r\n            ErrorCodes.X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN,\r\n            implicitDefaultChildren[0].loc\r\n          )\r\n        )\r\n      } else {\r\n        slotsProperties.push(\r\n          buildDefaultSlotProperty(undefined, implicitDefaultChildren)\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  const slotFlag = hasDynamicSlots\r\n    ? SlotFlags.DYNAMIC\r\n    : hasForwardedSlots(node.children)\r\n    ? SlotFlags.FORWARDED\r\n    : SlotFlags.STABLE\r\n\r\n  let slots = createObjectExpression(\r\n    slotsProperties.concat(\r\n      createObjectProperty(\r\n        `_`,\r\n        // 2 = compiled but dynamic = can skip normalization, but must run diff\r\n        // 1 = compiled and static = can skip normalization AND diff as optimized\r\n        createSimpleExpression(\r\n          slotFlag + (__DEV__ ? ` /* ${slotFlagsText[slotFlag]} */` : ``),\r\n          false\r\n        )\r\n      )\r\n    ),\r\n    loc\r\n  ) as SlotsExpression\r\n  if (dynamicSlots.length) {\r\n    slots = createCallExpression(context.helper(CREATE_SLOTS), [\r\n      slots,\r\n      createArrayExpression(dynamicSlots)\r\n    ]) as SlotsExpression\r\n  }\r\n\r\n  return {\r\n    slots,\r\n    hasDynamicSlots\r\n  }\r\n}\r\n\r\nfunction buildDynamicSlot(\r\n  name: ExpressionNode,\r\n  fn: FunctionExpression\r\n): ObjectExpression {\r\n  return createObjectExpression([\r\n    createObjectProperty(`name`, name),\r\n    createObjectProperty(`fn`, fn)\r\n  ])\r\n}\r\n\r\nfunction hasForwardedSlots(children: TemplateChildNode[]): boolean {\r\n  for (let i = 0; i < children.length; i++) {\r\n    const child = children[i]\r\n    switch (child.type) {\r\n      case NodeTypes.ELEMENT:\r\n        if (\r\n          child.tagType === ElementTypes.SLOT ||\r\n          hasForwardedSlots(child.children)\r\n        ) {\r\n          return true\r\n        }\r\n        break\r\n      case NodeTypes.IF:\r\n        if (hasForwardedSlots(child.branches)) return true\r\n        break\r\n      case NodeTypes.IF_BRANCH:\r\n      case NodeTypes.FOR:\r\n        if (hasForwardedSlots(child.children)) return true\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction isNonWhitespaceContent(node: TemplateChildNode): boolean {\r\n  if (node.type !== NodeTypes.TEXT && node.type !== NodeTypes.TEXT_CALL)\r\n    return true\r\n  return node.type === NodeTypes.TEXT\r\n    ? !!node.content.trim()\r\n    : isNonWhitespaceContent(node.content)\r\n}\r\n","import { NodeTransform, TransformContext } from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  ElementTypes,\r\n  CallExpression,\r\n  ObjectExpression,\r\n  ElementNode,\r\n  DirectiveNode,\r\n  ExpressionNode,\r\n  ArrayExpression,\r\n  createCallExpression,\r\n  createArrayExpression,\r\n  createObjectProperty,\r\n  createSimpleExpression,\r\n  createObjectExpression,\r\n  Property,\r\n  ComponentNode,\r\n  VNodeCall,\r\n  TemplateTextChildNode,\r\n  DirectiveArguments,\r\n  createVNodeCall,\r\n  ConstantTypes\r\n} from '../ast'\r\nimport {\r\n  PatchFlags,\r\n  PatchFlagNames,\r\n  isSymbol,\r\n  isOn,\r\n  isObject,\r\n  isReservedProp,\r\n  capitalize,\r\n  camelize,\r\n  isBuiltInDirective\r\n} from '@vue/shared'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport {\r\n  RESOLVE_DIRECTIVE,\r\n  RESOLVE_COMPONENT,\r\n  RESOLVE_DYNAMIC_COMPONENT,\r\n  MERGE_PROPS,\r\n  NORMALIZE_CLASS,\r\n  NORMALIZE_STYLE,\r\n  NORMALIZE_PROPS,\r\n  TO_HANDLERS,\r\n  TELEPORT,\r\n  KEEP_ALIVE,\r\n  SUSPENSE,\r\n  UNREF,\r\n  GUARD_REACTIVE_PROPS\r\n} from '../runtimeHelpers'\r\nimport {\r\n  getInnerRange,\r\n  toValidAssetId,\r\n  findProp,\r\n  isCoreComponent,\r\n  isStaticArgOf,\r\n  findDir,\r\n  isStaticExp\r\n} from '../utils'\r\nimport { buildSlots } from './vSlot'\r\nimport { getConstantType } from './hoistStatic'\r\nimport { BindingTypes } from '../options'\r\nimport {\r\n  checkCompatEnabled,\r\n  CompilerDeprecationTypes,\r\n  isCompatEnabled\r\n} from '../compat/compatConfig'\r\n\r\n// some directive transforms (e.g. v-model) may return a symbol for runtime\r\n// import, which should be used instead of a resolveDirective call.\r\nconst directiveImportMap = new WeakMap<DirectiveNode, symbol>()\r\n\r\n// generate a JavaScript AST for this element's codegen\r\nexport const transformElement: NodeTransform = (node, context) => {\r\n  // perform the work on exit, after all child expressions have been\r\n  // processed and merged.\r\n  return function postTransformElement() {\r\n    node = context.currentNode!\r\n\r\n    if (\r\n      !(\r\n        node.type === NodeTypes.ELEMENT &&\r\n        (node.tagType === ElementTypes.ELEMENT ||\r\n          node.tagType === ElementTypes.COMPONENT)\r\n      )\r\n    ) {\r\n      return\r\n    }\r\n\r\n    const { tag, props } = node\r\n    const isComponent = node.tagType === ElementTypes.COMPONENT\r\n\r\n    // The goal of the transform is to create a codegenNode implementing the\r\n    // VNodeCall interface.\r\n    let vnodeTag = isComponent\r\n      ? resolveComponentType(node as ComponentNode, context)\r\n      : `\"${tag}\"`\r\n\r\n    const isDynamicComponent =\r\n      isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT\r\n\r\n    let vnodeProps: VNodeCall['props']\r\n    let vnodeChildren: VNodeCall['children']\r\n    let vnodePatchFlag: VNodeCall['patchFlag']\r\n    let patchFlag: number = 0\r\n    let vnodeDynamicProps: VNodeCall['dynamicProps']\r\n    let dynamicPropNames: string[] | undefined\r\n    let vnodeDirectives: VNodeCall['directives']\r\n\r\n    let shouldUseBlock =\r\n      // dynamic component may resolve to plain elements\r\n      isDynamicComponent ||\r\n      vnodeTag === TELEPORT ||\r\n      vnodeTag === SUSPENSE ||\r\n      (!isComponent &&\r\n        // <svg> and <foreignObject> must be forced into blocks so that block\r\n        // updates inside get proper isSVG flag at runtime. (#639, #643)\r\n        // This is technically web-specific, but splitting the logic out of core\r\n        // leads to too much unnecessary complexity.\r\n        (tag === 'svg' || tag === 'foreignObject'))\r\n\r\n    // props\r\n    if (props.length > 0) {\r\n      const propsBuildResult = buildProps(\r\n        node,\r\n        context,\r\n        undefined,\r\n        isComponent,\r\n        isDynamicComponent\r\n      )\r\n      vnodeProps = propsBuildResult.props\r\n      patchFlag = propsBuildResult.patchFlag\r\n      dynamicPropNames = propsBuildResult.dynamicPropNames\r\n      const directives = propsBuildResult.directives\r\n      vnodeDirectives =\r\n        directives && directives.length\r\n          ? (createArrayExpression(\r\n              directives.map(dir => buildDirectiveArgs(dir, context))\r\n            ) as DirectiveArguments)\r\n          : undefined\r\n\r\n      if (propsBuildResult.shouldUseBlock) {\r\n        shouldUseBlock = true\r\n      }\r\n    }\r\n\r\n    // children\r\n    if (node.children.length > 0) {\r\n      if (vnodeTag === KEEP_ALIVE) {\r\n        // Although a built-in component, we compile KeepAlive with raw children\r\n        // instead of slot functions so that it can be used inside Transition\r\n        // or other Transition-wrapping HOCs.\r\n        // To ensure correct updates with block optimizations, we need to:\r\n        // 1. Force keep-alive into a block. This avoids its children being\r\n        //    collected by a parent block.\r\n        shouldUseBlock = true\r\n        // 2. Force keep-alive to always be updated, since it uses raw children.\r\n        patchFlag |= PatchFlags.DYNAMIC_SLOTS\r\n        if (__DEV__ && node.children.length > 1) {\r\n          context.onError(\r\n            createCompilerError(ErrorCodes.X_KEEP_ALIVE_INVALID_CHILDREN, {\r\n              start: node.children[0].loc.start,\r\n              end: node.children[node.children.length - 1].loc.end,\r\n              source: ''\r\n            })\r\n          )\r\n        }\r\n      }\r\n\r\n      const shouldBuildAsSlots =\r\n        isComponent &&\r\n        // Teleport is not a real component and has dedicated runtime handling\r\n        vnodeTag !== TELEPORT &&\r\n        // explained above.\r\n        vnodeTag !== KEEP_ALIVE\r\n\r\n      if (shouldBuildAsSlots) {\r\n        const { slots, hasDynamicSlots } = buildSlots(node, context)\r\n        vnodeChildren = slots\r\n        if (hasDynamicSlots) {\r\n          patchFlag |= PatchFlags.DYNAMIC_SLOTS\r\n        }\r\n      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\r\n        const child = node.children[0]\r\n        const type = child.type\r\n        // check for dynamic text children\r\n        const hasDynamicTextChild =\r\n          type === NodeTypes.INTERPOLATION ||\r\n          type === NodeTypes.COMPOUND_EXPRESSION\r\n        if (\r\n          hasDynamicTextChild &&\r\n          getConstantType(child, context) === ConstantTypes.NOT_CONSTANT\r\n        ) {\r\n          patchFlag |= PatchFlags.TEXT\r\n        }\r\n        // pass directly if the only child is a text node\r\n        // (plain / interpolation / expression)\r\n        if (hasDynamicTextChild || type === NodeTypes.TEXT) {\r\n          vnodeChildren = child as TemplateTextChildNode\r\n        } else {\r\n          vnodeChildren = node.children\r\n        }\r\n      } else {\r\n        vnodeChildren = node.children\r\n      }\r\n    }\r\n\r\n    // patchFlag & dynamicPropNames\r\n    if (patchFlag !== 0) {\r\n      if (__DEV__) {\r\n        if (patchFlag < 0) {\r\n          // special flags (negative and mutually exclusive)\r\n          vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`\r\n        } else {\r\n          // bitwise flags\r\n          const flagNames = Object.keys(PatchFlagNames)\r\n            .map(Number)\r\n            .filter(n => n > 0 && patchFlag & n)\r\n            .map(n => PatchFlagNames[n])\r\n            .join(`, `)\r\n          vnodePatchFlag = patchFlag + ` /* ${flagNames} */`\r\n        }\r\n      } else {\r\n        vnodePatchFlag = String(patchFlag)\r\n      }\r\n      if (dynamicPropNames && dynamicPropNames.length) {\r\n        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames)\r\n      }\r\n    }\r\n\r\n    node.codegenNode = createVNodeCall(\r\n      context,\r\n      vnodeTag,\r\n      vnodeProps,\r\n      vnodeChildren,\r\n      vnodePatchFlag,\r\n      vnodeDynamicProps,\r\n      vnodeDirectives,\r\n      !!shouldUseBlock,\r\n      false /* disableTracking */,\r\n      isComponent,\r\n      node.loc\r\n    )\r\n  }\r\n}\r\n\r\nexport function resolveComponentType(\r\n  node: ComponentNode,\r\n  context: TransformContext,\r\n  ssr = false\r\n) {\r\n  let { tag } = node\r\n\r\n  // 1. dynamic component\r\n  const isExplicitDynamic = isComponentTag(tag)\r\n  const isProp = findProp(node, 'is')\r\n  if (isProp) {\r\n    if (\r\n      isExplicitDynamic ||\r\n      (__COMPAT__ &&\r\n        isCompatEnabled(\r\n          CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT,\r\n          context\r\n        ))\r\n    ) {\r\n      const exp =\r\n        isProp.type === NodeTypes.ATTRIBUTE\r\n          ? isProp.value && createSimpleExpression(isProp.value.content, true)\r\n          : isProp.exp\r\n      if (exp) {\r\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n          exp\r\n        ])\r\n      }\r\n    } else if (\r\n      isProp.type === NodeTypes.ATTRIBUTE &&\r\n      isProp.value!.content.startsWith('vue:')\r\n    ) {\r\n      // <button is=\"vue:xxx\">\r\n      // if not <component>, only is value that starts with \"vue:\" will be\r\n      // treated as component by the parse phase and reach here, unless it's\r\n      // compat mode where all is values are considered components\r\n      tag = isProp.value!.content.slice(4)\r\n    }\r\n  }\r\n\r\n  // 1.5 v-is (TODO: Deprecate)\r\n  const isDir = !isExplicitDynamic && findDir(node, 'is')\r\n  if (isDir && isDir.exp) {\r\n    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n      isDir.exp\r\n    ])\r\n  }\r\n\r\n  // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)\r\n  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag)\r\n  if (builtIn) {\r\n    // built-ins are simply fallthroughs / have special handling during ssr\r\n    // so we don't need to import their runtime equivalents\r\n    if (!ssr) context.helper(builtIn)\r\n    return builtIn\r\n  }\r\n\r\n  // 3. user component (from setup bindings)\r\n  // this is skipped in browser build since browser builds do not perform\r\n  // binding analysis.\r\n  if (!__BROWSER__) {\r\n    const fromSetup = resolveSetupReference(tag, context)\r\n    if (fromSetup) {\r\n      return fromSetup\r\n    }\r\n    const dotIndex = tag.indexOf('.')\r\n    if (dotIndex > 0) {\r\n      const ns = resolveSetupReference(tag.slice(0, dotIndex), context)\r\n      if (ns) {\r\n        return ns + tag.slice(dotIndex)\r\n      }\r\n    }\r\n  }\r\n\r\n  // 4. Self referencing component (inferred from filename)\r\n  if (\r\n    !__BROWSER__ &&\r\n    context.selfName &&\r\n    capitalize(camelize(tag)) === context.selfName\r\n  ) {\r\n    context.helper(RESOLVE_COMPONENT)\r\n    // codegen.ts has special check for __self postfix when generating\r\n    // component imports, which will pass additional `maybeSelfReference` flag\r\n    // to `resolveComponent`.\r\n    context.components.add(tag + `__self`)\r\n    return toValidAssetId(tag, `component`)\r\n  }\r\n\r\n  // 5. user component (resolve)\r\n  context.helper(RESOLVE_COMPONENT)\r\n  context.components.add(tag)\r\n  return toValidAssetId(tag, `component`)\r\n}\r\n\r\nfunction resolveSetupReference(name: string, context: TransformContext) {\r\n  const bindings = context.bindingMetadata\r\n  if (!bindings || bindings.__isScriptSetup === false) {\r\n    return\r\n  }\r\n\r\n  const camelName = camelize(name)\r\n  const PascalName = capitalize(camelName)\r\n  const checkType = (type: BindingTypes) => {\r\n    if (bindings[name] === type) {\r\n      return name\r\n    }\r\n    if (bindings[camelName] === type) {\r\n      return camelName\r\n    }\r\n    if (bindings[PascalName] === type) {\r\n      return PascalName\r\n    }\r\n  }\r\n\r\n  const fromConst =\r\n    checkType(BindingTypes.SETUP_CONST) ||\r\n    checkType(BindingTypes.SETUP_REACTIVE_CONST)\r\n  if (fromConst) {\r\n    return context.inline\r\n      ? // in inline mode, const setup bindings (e.g. imports) can be used as-is\r\n        fromConst\r\n      : `$setup[${JSON.stringify(fromConst)}]`\r\n  }\r\n\r\n  const fromMaybeRef =\r\n    checkType(BindingTypes.SETUP_LET) ||\r\n    checkType(BindingTypes.SETUP_REF) ||\r\n    checkType(BindingTypes.SETUP_MAYBE_REF)\r\n  if (fromMaybeRef) {\r\n    return context.inline\r\n      ? // setup scope bindings that may be refs need to be unrefed\r\n        `${context.helperString(UNREF)}(${fromMaybeRef})`\r\n      : `$setup[${JSON.stringify(fromMaybeRef)}]`\r\n  }\r\n}\r\n\r\nexport type PropsExpression = ObjectExpression | CallExpression | ExpressionNode\r\n\r\nexport function buildProps(\r\n  node: ElementNode,\r\n  context: TransformContext,\r\n  props: ElementNode['props'] = node.props,\r\n  isComponent: boolean,\r\n  isDynamicComponent: boolean,\r\n  ssr = false\r\n): {\r\n  props: PropsExpression | undefined\r\n  directives: DirectiveNode[]\r\n  patchFlag: number\r\n  dynamicPropNames: string[]\r\n  shouldUseBlock: boolean\r\n} {\r\n  const { tag, loc: elementLoc, children } = node\r\n  let properties: ObjectExpression['properties'] = []\r\n  const mergeArgs: PropsExpression[] = []\r\n  const runtimeDirectives: DirectiveNode[] = []\r\n  const hasChildren = children.length > 0\r\n  let shouldUseBlock = false\r\n\r\n  // patchFlag analysis\r\n  let patchFlag = 0\r\n  let hasRef = false\r\n  let hasClassBinding = false\r\n  let hasStyleBinding = false\r\n  let hasHydrationEventBinding = false\r\n  let hasDynamicKeys = false\r\n  let hasVnodeHook = false\r\n  const dynamicPropNames: string[] = []\r\n\r\n  const analyzePatchFlag = ({ key, value }: Property) => {\r\n    if (isStaticExp(key)) {\r\n      const name = key.content\r\n      const isEventHandler = isOn(name)\r\n      if (\r\n        isEventHandler &&\r\n        (!isComponent || isDynamicComponent) &&\r\n        // omit the flag for click handlers because hydration gives click\r\n        // dedicated fast path.\r\n        name.toLowerCase() !== 'onclick' &&\r\n        // omit v-model handlers\r\n        name !== 'onUpdate:modelValue' &&\r\n        // omit onVnodeXXX hooks\r\n        !isReservedProp(name)\r\n      ) {\r\n        hasHydrationEventBinding = true\r\n      }\r\n\r\n      if (isEventHandler && isReservedProp(name)) {\r\n        hasVnodeHook = true\r\n      }\r\n\r\n      if (\r\n        value.type === NodeTypes.JS_CACHE_EXPRESSION ||\r\n        ((value.type === NodeTypes.SIMPLE_EXPRESSION ||\r\n          value.type === NodeTypes.COMPOUND_EXPRESSION) &&\r\n          getConstantType(value, context) > 0)\r\n      ) {\r\n        // skip if the prop is a cached handler or has constant value\r\n        return\r\n      }\r\n\r\n      if (name === 'ref') {\r\n        hasRef = true\r\n      } else if (name === 'class') {\r\n        hasClassBinding = true\r\n      } else if (name === 'style') {\r\n        hasStyleBinding = true\r\n      } else if (name !== 'key' && !dynamicPropNames.includes(name)) {\r\n        dynamicPropNames.push(name)\r\n      }\r\n\r\n      // treat the dynamic class and style binding of the component as dynamic props\r\n      if (\r\n        isComponent &&\r\n        (name === 'class' || name === 'style') &&\r\n        !dynamicPropNames.includes(name)\r\n      ) {\r\n        dynamicPropNames.push(name)\r\n      }\r\n    } else {\r\n      hasDynamicKeys = true\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < props.length; i++) {\r\n    // static attribute\r\n    const prop = props[i]\r\n    if (prop.type === NodeTypes.ATTRIBUTE) {\r\n      const { loc, name, value } = prop\r\n      let isStatic = true\r\n      if (name === 'ref') {\r\n        hasRef = true\r\n        if (context.scopes.vFor > 0) {\r\n          properties.push(\r\n            createObjectProperty(\r\n              createSimpleExpression('ref_for', true),\r\n              createSimpleExpression('true')\r\n            )\r\n          )\r\n        }\r\n        // in inline mode there is no setupState object, so we can't use string\r\n        // keys to set the ref. Instead, we need to transform it to pass the\r\n        // actual ref instead.\r\n        if (\r\n          !__BROWSER__ &&\r\n          value &&\r\n          context.inline &&\r\n          context.bindingMetadata[value.content]\r\n        ) {\r\n          isStatic = false\r\n          properties.push(\r\n            createObjectProperty(\r\n              createSimpleExpression('ref_key', true),\r\n              createSimpleExpression(value.content, true, value.loc)\r\n            )\r\n          )\r\n        }\r\n      }\r\n      // skip is on <component>, or is=\"vue:xxx\"\r\n      if (\r\n        name === 'is' &&\r\n        (isComponentTag(tag) ||\r\n          (value && value.content.startsWith('vue:')) ||\r\n          (__COMPAT__ &&\r\n            isCompatEnabled(\r\n              CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT,\r\n              context\r\n            )))\r\n      ) {\r\n        continue\r\n      }\r\n      properties.push(\r\n        createObjectProperty(\r\n          createSimpleExpression(\r\n            name,\r\n            true,\r\n            getInnerRange(loc, 0, name.length)\r\n          ),\r\n          createSimpleExpression(\r\n            value ? value.content : '',\r\n            isStatic,\r\n            value ? value.loc : loc\r\n          )\r\n        )\r\n      )\r\n    } else {\r\n      // directives\r\n      const { name, arg, exp, loc } = prop\r\n      const isVBind = name === 'bind'\r\n      const isVOn = name === 'on'\r\n\r\n      // skip v-slot - it is handled by its dedicated transform.\r\n      if (name === 'slot') {\r\n        if (!isComponent) {\r\n          context.onError(\r\n            createCompilerError(ErrorCodes.X_V_SLOT_MISPLACED, loc)\r\n          )\r\n        }\r\n        continue\r\n      }\r\n      // skip v-once/v-memo - they are handled by dedicated transforms.\r\n      if (name === 'once' || name === 'memo') {\r\n        continue\r\n      }\r\n      // skip v-is and :is on <component>\r\n      if (\r\n        name === 'is' ||\r\n        (isVBind &&\r\n          isStaticArgOf(arg, 'is') &&\r\n          (isComponentTag(tag) ||\r\n            (__COMPAT__ &&\r\n              isCompatEnabled(\r\n                CompilerDeprecationTypes.COMPILER_IS_ON_ELEMENT,\r\n                context\r\n              ))))\r\n      ) {\r\n        continue\r\n      }\r\n      // skip v-on in SSR compilation\r\n      if (isVOn && ssr) {\r\n        continue\r\n      }\r\n\r\n      if (\r\n        // #938: elements with dynamic keys should be forced into blocks\r\n        (isVBind && isStaticArgOf(arg, 'key')) ||\r\n        // inline before-update hooks need to force block so that it is invoked\r\n        // before children\r\n        (isVOn && hasChildren && isStaticArgOf(arg, 'vue:before-update'))\r\n      ) {\r\n        shouldUseBlock = true\r\n      }\r\n\r\n      if (isVBind && isStaticArgOf(arg, 'ref') && context.scopes.vFor > 0) {\r\n        properties.push(\r\n          createObjectProperty(\r\n            createSimpleExpression('ref_for', true),\r\n            createSimpleExpression('true')\r\n          )\r\n        )\r\n      }\r\n\r\n      // special case for v-bind and v-on with no argument\r\n      if (!arg && (isVBind || isVOn)) {\r\n        hasDynamicKeys = true\r\n        if (exp) {\r\n          if (properties.length) {\r\n            mergeArgs.push(\r\n              createObjectExpression(dedupeProperties(properties), elementLoc)\r\n            )\r\n            properties = []\r\n          }\r\n          if (isVBind) {\r\n            if (__COMPAT__) {\r\n              // 2.x v-bind object order compat\r\n              if (__DEV__) {\r\n                const hasOverridableKeys = mergeArgs.some(arg => {\r\n                  if (arg.type === NodeTypes.JS_OBJECT_EXPRESSION) {\r\n                    return arg.properties.some(({ key }) => {\r\n                      if (\r\n                        key.type !== NodeTypes.SIMPLE_EXPRESSION ||\r\n                        !key.isStatic\r\n                      ) {\r\n                        return true\r\n                      }\r\n                      return (\r\n                        key.content !== 'class' &&\r\n                        key.content !== 'style' &&\r\n                        !isOn(key.content)\r\n                      )\r\n                    })\r\n                  } else {\r\n                    // dynamic expression\r\n                    return true\r\n                  }\r\n                })\r\n                if (hasOverridableKeys) {\r\n                  checkCompatEnabled(\r\n                    CompilerDeprecationTypes.COMPILER_V_BIND_OBJECT_ORDER,\r\n                    context,\r\n                    loc\r\n                  )\r\n                }\r\n              }\r\n\r\n              if (\r\n                isCompatEnabled(\r\n                  CompilerDeprecationTypes.COMPILER_V_BIND_OBJECT_ORDER,\r\n                  context\r\n                )\r\n              ) {\r\n                mergeArgs.unshift(exp)\r\n                continue\r\n              }\r\n            }\r\n\r\n            mergeArgs.push(exp)\r\n          } else {\r\n            // v-on=\"obj\" -> toHandlers(obj)\r\n            mergeArgs.push({\r\n              type: NodeTypes.JS_CALL_EXPRESSION,\r\n              loc,\r\n              callee: context.helper(TO_HANDLERS),\r\n              arguments: [exp]\r\n            })\r\n          }\r\n        } else {\r\n          context.onError(\r\n            createCompilerError(\r\n              isVBind\r\n                ? ErrorCodes.X_V_BIND_NO_EXPRESSION\r\n                : ErrorCodes.X_V_ON_NO_EXPRESSION,\r\n              loc\r\n            )\r\n          )\r\n        }\r\n        continue\r\n      }\r\n\r\n      const directiveTransform = context.directiveTransforms[name]\r\n      if (directiveTransform) {\r\n        // has built-in directive transform.\r\n        const { props, needRuntime } = directiveTransform(prop, node, context)\r\n        !ssr && props.forEach(analyzePatchFlag)\r\n        properties.push(...props)\r\n        if (needRuntime) {\r\n          runtimeDirectives.push(prop)\r\n          if (isSymbol(needRuntime)) {\r\n            directiveImportMap.set(prop, needRuntime)\r\n          }\r\n        }\r\n      } else if (!isBuiltInDirective(name)) {\r\n        // no built-in transform, this is a user custom directive.\r\n        runtimeDirectives.push(prop)\r\n        // custom dirs may use beforeUpdate so they need to force blocks\r\n        // to ensure before-update gets called before children update\r\n        if (hasChildren) {\r\n          shouldUseBlock = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let propsExpression: PropsExpression | undefined = undefined\r\n\r\n  // has v-bind=\"object\" or v-on=\"object\", wrap with mergeProps\r\n  if (mergeArgs.length) {\r\n    if (properties.length) {\r\n      mergeArgs.push(\r\n        createObjectExpression(dedupeProperties(properties), elementLoc)\r\n      )\r\n    }\r\n    if (mergeArgs.length > 1) {\r\n      propsExpression = createCallExpression(\r\n        context.helper(MERGE_PROPS),\r\n        mergeArgs,\r\n        elementLoc\r\n      )\r\n    } else {\r\n      // single v-bind with nothing else - no need for a mergeProps call\r\n      propsExpression = mergeArgs[0]\r\n    }\r\n  } else if (properties.length) {\r\n    propsExpression = createObjectExpression(\r\n      dedupeProperties(properties),\r\n      elementLoc\r\n    )\r\n  }\r\n\r\n  // patchFlag analysis\r\n  if (hasDynamicKeys) {\r\n    patchFlag |= PatchFlags.FULL_PROPS\r\n  } else {\r\n    if (hasClassBinding && !isComponent) {\r\n      patchFlag |= PatchFlags.CLASS\r\n    }\r\n    if (hasStyleBinding && !isComponent) {\r\n      patchFlag |= PatchFlags.STYLE\r\n    }\r\n    if (dynamicPropNames.length) {\r\n      patchFlag |= PatchFlags.PROPS\r\n    }\r\n    if (hasHydrationEventBinding) {\r\n      patchFlag |= PatchFlags.HYDRATE_EVENTS\r\n    }\r\n  }\r\n  if (\r\n    !shouldUseBlock &&\r\n    (patchFlag === 0 || patchFlag === PatchFlags.HYDRATE_EVENTS) &&\r\n    (hasRef || hasVnodeHook || runtimeDirectives.length > 0)\r\n  ) {\r\n    patchFlag |= PatchFlags.NEED_PATCH\r\n  }\r\n\r\n  // pre-normalize props, SSR is skipped for now\r\n  if (!context.inSSR && propsExpression) {\r\n    switch (propsExpression.type) {\r\n      case NodeTypes.JS_OBJECT_EXPRESSION:\r\n        // means that there is no v-bind,\r\n        // but still need to deal with dynamic key binding\r\n        let classKeyIndex = -1\r\n        let styleKeyIndex = -1\r\n        let hasDynamicKey = false\r\n\r\n        for (let i = 0; i < propsExpression.properties.length; i++) {\r\n          const key = propsExpression.properties[i].key\r\n          if (isStaticExp(key)) {\r\n            if (key.content === 'class') {\r\n              classKeyIndex = i\r\n            } else if (key.content === 'style') {\r\n              styleKeyIndex = i\r\n            }\r\n          } else if (!key.isHandlerKey) {\r\n            hasDynamicKey = true\r\n          }\r\n        }\r\n\r\n        const classProp = propsExpression.properties[classKeyIndex]\r\n        const styleProp = propsExpression.properties[styleKeyIndex]\r\n\r\n        // no dynamic key\r\n        if (!hasDynamicKey) {\r\n          if (classProp && !isStaticExp(classProp.value)) {\r\n            classProp.value = createCallExpression(\r\n              context.helper(NORMALIZE_CLASS),\r\n              [classProp.value]\r\n            )\r\n          }\r\n          if (\r\n            styleProp &&\r\n            // the static style is compiled into an object,\r\n            // so use `hasStyleBinding` to ensure that it is a dynamic style binding\r\n            (hasStyleBinding ||\r\n              (styleProp.value.type === NodeTypes.SIMPLE_EXPRESSION &&\r\n                styleProp.value.content.trim()[0] === `[`) ||\r\n              // v-bind:style and style both exist,\r\n              // v-bind:style with static literal object\r\n              styleProp.value.type === NodeTypes.JS_ARRAY_EXPRESSION)\r\n          ) {\r\n            styleProp.value = createCallExpression(\r\n              context.helper(NORMALIZE_STYLE),\r\n              [styleProp.value]\r\n            )\r\n          }\r\n        } else {\r\n          // dynamic key binding, wrap with `normalizeProps`\r\n          propsExpression = createCallExpression(\r\n            context.helper(NORMALIZE_PROPS),\r\n            [propsExpression]\r\n          )\r\n        }\r\n        break\r\n      case NodeTypes.JS_CALL_EXPRESSION:\r\n        // mergeProps call, do nothing\r\n        break\r\n      default:\r\n        // single v-bind\r\n        propsExpression = createCallExpression(\r\n          context.helper(NORMALIZE_PROPS),\r\n          [\r\n            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [\r\n              propsExpression\r\n            ])\r\n          ]\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  return {\r\n    props: propsExpression,\r\n    directives: runtimeDirectives,\r\n    patchFlag,\r\n    dynamicPropNames,\r\n    shouldUseBlock\r\n  }\r\n}\r\n\r\n// Dedupe props in an object literal.\r\n// Literal duplicated attributes would have been warned during the parse phase,\r\n// however, it's possible to encounter duplicated `onXXX` handlers with different\r\n// modifiers. We also need to merge static and dynamic class / style attributes.\r\n// - onXXX handlers / style: merge into array\r\n// - class: merge into single expression with concatenation\r\nfunction dedupeProperties(properties: Property[]): Property[] {\r\n  const knownProps: Map<string, Property> = new Map()\r\n  const deduped: Property[] = []\r\n  for (let i = 0; i < properties.length; i++) {\r\n    const prop = properties[i]\r\n    // dynamic keys are always allowed\r\n    if (prop.key.type === NodeTypes.COMPOUND_EXPRESSION || !prop.key.isStatic) {\r\n      deduped.push(prop)\r\n      continue\r\n    }\r\n    const name = prop.key.content\r\n    const existing = knownProps.get(name)\r\n    if (existing) {\r\n      if (name === 'style' || name === 'class' || isOn(name)) {\r\n        mergeAsArray(existing, prop)\r\n      }\r\n      // unexpected duplicate, should have emitted error during parse\r\n    } else {\r\n      knownProps.set(name, prop)\r\n      deduped.push(prop)\r\n    }\r\n  }\r\n  return deduped\r\n}\r\n\r\nfunction mergeAsArray(existing: Property, incoming: Property) {\r\n  if (existing.value.type === NodeTypes.JS_ARRAY_EXPRESSION) {\r\n    existing.value.elements.push(incoming.value)\r\n  } else {\r\n    existing.value = createArrayExpression(\r\n      [existing.value, incoming.value],\r\n      existing.loc\r\n    )\r\n  }\r\n}\r\n\r\nexport function buildDirectiveArgs(\r\n  dir: DirectiveNode,\r\n  context: TransformContext\r\n): ArrayExpression {\r\n  const dirArgs: ArrayExpression['elements'] = []\r\n  const runtime = directiveImportMap.get(dir)\r\n  if (runtime) {\r\n    // built-in directive with runtime\r\n    dirArgs.push(context.helperString(runtime))\r\n  } else {\r\n    // user directive.\r\n    // see if we have directives exposed via <script setup>\r\n    const fromSetup =\r\n      !__BROWSER__ && resolveSetupReference('v-' + dir.name, context)\r\n    if (fromSetup) {\r\n      dirArgs.push(fromSetup)\r\n    } else {\r\n      // inject statement for resolving directive\r\n      context.helper(RESOLVE_DIRECTIVE)\r\n      context.directives.add(dir.name)\r\n      dirArgs.push(toValidAssetId(dir.name, `directive`))\r\n    }\r\n  }\r\n  const { loc } = dir\r\n  if (dir.exp) dirArgs.push(dir.exp)\r\n  if (dir.arg) {\r\n    if (!dir.exp) {\r\n      dirArgs.push(`void 0`)\r\n    }\r\n    dirArgs.push(dir.arg)\r\n  }\r\n  if (Object.keys(dir.modifiers).length) {\r\n    if (!dir.arg) {\r\n      if (!dir.exp) {\r\n        dirArgs.push(`void 0`)\r\n      }\r\n      dirArgs.push(`void 0`)\r\n    }\r\n    const trueExpression = createSimpleExpression(`true`, false, loc)\r\n    dirArgs.push(\r\n      createObjectExpression(\r\n        dir.modifiers.map(modifier =>\r\n          createObjectProperty(modifier, trueExpression)\r\n        ),\r\n        loc\r\n      )\r\n    )\r\n  }\r\n  return createArrayExpression(dirArgs, dir.loc)\r\n}\r\n\r\nfunction stringifyDynamicPropNames(props: string[]): string {\r\n  let propsNamesString = `[`\r\n  for (let i = 0, l = props.length; i < l; i++) {\r\n    propsNamesString += JSON.stringify(props[i])\r\n    if (i < l - 1) propsNamesString += ', '\r\n  }\r\n  return propsNamesString + `]`\r\n}\r\n\r\nfunction isComponentTag(tag: string) {\r\n  return tag === 'component' || tag === 'Component'\r\n}\r\n","import { makeMap } from './makeMap'\r\n\r\nexport { makeMap }\r\nexport * from './patchFlags'\r\nexport * from './shapeFlags'\r\nexport * from './slotFlags'\r\nexport * from './globalsWhitelist'\r\nexport * from './codeframe'\r\nexport * from './normalizeProp'\r\nexport * from './domTagConfig'\r\nexport * from './domAttrConfig'\r\nexport * from './escapeHtml'\r\nexport * from './looseEqual'\r\nexport * from './toDisplayString'\r\nexport * from './typeUtils'\r\n\r\nexport const EMPTY_OBJ: { readonly [key: string]: any } = __DEV__\r\n  ? Object.freeze({})\r\n  : {}\r\nexport const EMPTY_ARR = __DEV__ ? Object.freeze([]) : []\r\n\r\nexport const NOOP = () => {}\r\n\r\n/**\r\n * Always return false.\r\n */\r\nexport const NO = () => false\r\n\r\nconst onRE = /^on[^a-z]/\r\nexport const isOn = (key: string) => onRE.test(key)\r\n\r\nexport const isModelListener = (key: string) => key.startsWith('onUpdate:')\r\n\r\nexport const extend = Object.assign\r\n\r\nexport const remove = <T>(arr: T[], el: T) => {\r\n  const i = arr.indexOf(el)\r\n  if (i > -1) {\r\n    arr.splice(i, 1)\r\n  }\r\n}\r\n\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (\r\n  val: object,\r\n  key: string | symbol\r\n): key is keyof typeof val => hasOwnProperty.call(val, key)\r\n\r\nexport const isArray = Array.isArray\r\nexport const isMap = (val: unknown): val is Map<any, any> =>\r\n  toTypeString(val) === '[object Map]'\r\nexport const isSet = (val: unknown): val is Set<any> =>\r\n  toTypeString(val) === '[object Set]'\r\n\r\nexport const isDate = (val: unknown): val is Date => toTypeString(val) === '[object Date]'\r\nexport const isFunction = (val: unknown): val is Function =>\r\n  typeof val === 'function'\r\nexport const isString = (val: unknown): val is string => typeof val === 'string'\r\nexport const isSymbol = (val: unknown): val is symbol => typeof val === 'symbol'\r\nexport const isObject = (val: unknown): val is Record<any, any> =>\r\n  val !== null && typeof val === 'object'\r\n\r\nexport const isPromise = <T = any>(val: unknown): val is Promise<T> => {\r\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch)\r\n}\r\n\r\nexport const objectToString = Object.prototype.toString\r\nexport const toTypeString = (value: unknown): string =>\r\n  objectToString.call(value)\r\n\r\nexport const toRawType = (value: unknown): string => {\r\n  // extract \"RawType\" from strings like \"[object RawType]\"\r\n  return toTypeString(value).slice(8, -1)\r\n}\r\n\r\nexport const isPlainObject = (val: unknown): val is object =>\r\n  toTypeString(val) === '[object Object]'\r\n\r\nexport const isIntegerKey = (key: unknown) =>\r\n  isString(key) &&\r\n  key !== 'NaN' &&\r\n  key[0] !== '-' &&\r\n  '' + parseInt(key, 10) === key\r\n\r\nexport const isReservedProp = /*#__PURE__*/ makeMap(\r\n  // the leading comma is intentional so empty string \"\" is also included\r\n  ',key,ref,ref_for,ref_key,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted'\r\n)\r\n\r\nexport const isBuiltInDirective = /*#__PURE__*/ makeMap(\r\n  'bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo'\r\n)\r\n\r\nconst cacheStringFunction = <T extends (str: string) => string>(fn: T): T => {\r\n  const cache: Record<string, string> = Object.create(null)\r\n  return ((str: string) => {\r\n    const hit = cache[str]\r\n    return hit || (cache[str] = fn(str))\r\n  }) as any\r\n}\r\n\r\nconst camelizeRE = /-(\\w)/g\r\n/**\r\n * @private\r\n */\r\nexport const camelize = cacheStringFunction((str: string): string => {\r\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''))\r\n})\r\n\r\nconst hyphenateRE = /\\B([A-Z])/g\r\n/**\r\n * @private\r\n */\r\nexport const hyphenate = cacheStringFunction((str: string) =>\r\n  str.replace(hyphenateRE, '-$1').toLowerCase()\r\n)\r\n\r\n/**\r\n * @private\r\n */\r\nexport const capitalize = cacheStringFunction(\r\n  (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\r\n)\r\n\r\n/**\r\n * @private\r\n */\r\nexport const toHandlerKey = cacheStringFunction((str: string) =>\r\n  str ? `on${capitalize(str)}` : ``\r\n)\r\n\r\n// compare whether a value has changed, accounting for NaN.\r\nexport const hasChanged = (value: any, oldValue: any): boolean =>\r\n  !Object.is(value, oldValue)\r\n\r\nexport const invokeArrayFns = (fns: Function[], arg?: any) => {\r\n  for (let i = 0; i < fns.length; i++) {\r\n    fns[i](arg)\r\n  }\r\n}\r\n\r\nexport const def = (obj: object, key: string | symbol, value: any) => {\r\n  Object.defineProperty(obj, key, {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value\r\n  })\r\n}\r\n\r\nexport const toNumber = (val: any): any => {\r\n  const n = parseFloat(val)\r\n  return isNaN(n) ? val : n\r\n}\r\n\r\nlet _globalThis: any\r\nexport const getGlobalThis = (): any => {\r\n  return (\r\n    _globalThis ||\r\n    (_globalThis =\r\n      typeof globalThis !== 'undefined'\r\n        ? globalThis\r\n        : typeof self !== 'undefined'\r\n        ? self\r\n        : typeof window !== 'undefined'\r\n        ? window\r\n        : typeof global !== 'undefined'\r\n        ? global\r\n        : {})\r\n  )\r\n}\r\n\r\nconst identRE = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\r\n\r\nexport function genPropsAccessExp(name: string) {\r\n  return identRE.test(name)\r\n    ? `__props.${name}`\r\n    : `__props[${JSON.stringify(name)}]`\r\n}\r\n","import { NodeTransform, TransformContext } from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  CallExpression,\r\n  createCallExpression,\r\n  ExpressionNode,\r\n  SlotOutletNode,\r\n  createFunctionExpression\r\n} from '../ast'\r\nimport { isSlotOutlet, isStaticArgOf, isStaticExp } from '../utils'\r\nimport { buildProps, PropsExpression } from './transformElement'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport { RENDER_SLOT } from '../runtimeHelpers'\r\nimport { camelize } from '@vue/shared/'\r\n\r\nexport const transformSlotOutlet: NodeTransform = (node, context) => {\r\n  if (isSlotOutlet(node)) {\r\n    const { children, loc } = node\r\n    const { slotName, slotProps } = processSlotOutlet(node, context)\r\n\r\n    const slotArgs: CallExpression['arguments'] = [\r\n      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\r\n      slotName,\r\n      '{}',\r\n      'undefined',\r\n      'true'\r\n    ]\r\n    let expectedLen = 2\r\n\r\n    if (slotProps) {\r\n      slotArgs[2] = slotProps\r\n      expectedLen = 3\r\n    }\r\n\r\n    if (children.length) {\r\n      slotArgs[3] = createFunctionExpression([], children, false, false, loc)\r\n      expectedLen = 4\r\n    }\r\n\r\n    if (context.scopeId && !context.slotted) {\r\n      expectedLen = 5\r\n    }\r\n    slotArgs.splice(expectedLen) // remove unused arguments\r\n\r\n    node.codegenNode = createCallExpression(\r\n      context.helper(RENDER_SLOT),\r\n      slotArgs,\r\n      loc\r\n    )\r\n  }\r\n}\r\n\r\ninterface SlotOutletProcessResult {\r\n  slotName: string | ExpressionNode\r\n  slotProps: PropsExpression | undefined\r\n}\r\n\r\nexport function processSlotOutlet(\r\n  node: SlotOutletNode,\r\n  context: TransformContext\r\n): SlotOutletProcessResult {\r\n  let slotName: string | ExpressionNode = `\"default\"`\r\n  let slotProps: PropsExpression | undefined = undefined\r\n\r\n  const nonNameProps = []\r\n  for (let i = 0; i < node.props.length; i++) {\r\n    const p = node.props[i]\r\n    if (p.type === NodeTypes.ATTRIBUTE) {\r\n      if (p.value) {\r\n        if (p.name === 'name') {\r\n          slotName = JSON.stringify(p.value.content)\r\n        } else {\r\n          p.name = camelize(p.name)\r\n          nonNameProps.push(p)\r\n        }\r\n      }\r\n    } else {\r\n      if (p.name === 'bind' && isStaticArgOf(p.arg, 'name')) {\r\n        if (p.exp) slotName = p.exp\r\n      } else {\r\n        if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) {\r\n          p.arg.content = camelize(p.arg.content)\r\n        }\r\n        nonNameProps.push(p)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (nonNameProps.length > 0) {\r\n    const { props, directives } = buildProps(\r\n      node,\r\n      context,\r\n      nonNameProps,\r\n      false,\r\n      false\r\n    )\r\n    slotProps = props\r\n\r\n    if (directives.length) {\r\n      context.onError(\r\n        createCompilerError(\r\n          ErrorCodes.X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET,\r\n          directives[0].loc\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  return {\r\n    slotName,\r\n    slotProps\r\n  }\r\n}\r\n","import {\r\n  createStructuralDirectiveTransform,\r\n  TransformContext,\r\n  traverseNode\r\n} from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  ElementTypes,\r\n  ElementNode,\r\n  DirectiveNode,\r\n  IfBranchNode,\r\n  SimpleExpressionNode,\r\n  createCallExpression,\r\n  createConditionalExpression,\r\n  createSimpleExpression,\r\n  createObjectProperty,\r\n  createObjectExpression,\r\n  IfConditionalExpression,\r\n  BlockCodegenNode,\r\n  IfNode,\r\n  createVNodeCall,\r\n  AttributeNode,\r\n  locStub,\r\n  CacheExpression,\r\n  ConstantTypes,\r\n  MemoExpression\r\n} from '../ast'\r\nimport { createCompilerError, ErrorCodes } from '../errors'\r\nimport { processExpression } from './transformExpression'\r\nimport { validateBrowserExpression } from '../validateExpression'\r\nimport { FRAGMENT, CREATE_COMMENT } from '../runtimeHelpers'\r\nimport {\r\n  injectProp,\r\n  findDir,\r\n  findProp,\r\n  isBuiltInType,\r\n  makeBlock\r\n} from '../utils'\r\nimport { PatchFlags, PatchFlagNames } from '@vue/shared'\r\nimport { getMemoedVNodeCall } from '..'\r\n\r\nexport const transformIf = createStructuralDirectiveTransform(\r\n  /^(if|else|else-if)$/,\r\n  (node, dir, context) => {\r\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\r\n      // #1587: We need to dynamically increment the key based on the current\r\n      // node's sibling nodes, since chained v-if/else branches are\r\n      // rendered at the same depth\r\n      const siblings = context.parent!.children\r\n      let i = siblings.indexOf(ifNode)\r\n      let key = 0\r\n      while (i-- >= 0) {\r\n        const sibling = siblings[i]\r\n        if (sibling && sibling.type === NodeTypes.IF) {\r\n          key += sibling.branches.length\r\n        }\r\n      }\r\n\r\n      // Exit callback. Complete the codegenNode when all children have been\r\n      // transformed.\r\n      return () => {\r\n        if (isRoot) {\r\n          ifNode.codegenNode = createCodegenNodeForBranch(\r\n            branch,\r\n            key,\r\n            context\r\n          ) as IfConditionalExpression\r\n        } else {\r\n          // attach this branch's codegen node to the v-if root.\r\n          const parentCondition = getParentCondition(ifNode.codegenNode!)\r\n          parentCondition.alternate = createCodegenNodeForBranch(\r\n            branch,\r\n            key + ifNode.branches.length - 1,\r\n            context\r\n          )\r\n        }\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\n// target-agnostic transform used for both Client and SSR\r\nexport function processIf(\r\n  node: ElementNode,\r\n  dir: DirectiveNode,\r\n  context: TransformContext,\r\n  processCodegen?: (\r\n    node: IfNode,\r\n    branch: IfBranchNode,\r\n    isRoot: boolean\r\n  ) => (() => void) | undefined\r\n) {\r\n  if (\r\n    dir.name !== 'else' &&\r\n    (!dir.exp || !(dir.exp as SimpleExpressionNode).content.trim())\r\n  ) {\r\n    const loc = dir.exp ? dir.exp.loc : node.loc\r\n    context.onError(\r\n      createCompilerError(ErrorCodes.X_V_IF_NO_EXPRESSION, dir.loc)\r\n    )\r\n    dir.exp = createSimpleExpression(`true`, false, loc)\r\n  }\r\n\r\n  if (!__BROWSER__ && context.prefixIdentifiers && dir.exp) {\r\n    // dir.exp can only be simple expression because vIf transform is applied\r\n    // before expression transform.\r\n    dir.exp = processExpression(dir.exp as SimpleExpressionNode, context)\r\n  }\r\n\r\n  if (__DEV__ && __BROWSER__ && dir.exp) {\r\n    validateBrowserExpression(dir.exp as SimpleExpressionNode, context)\r\n  }\r\n\r\n  if (dir.name === 'if') {\r\n    const branch = createIfBranch(node, dir)\r\n    const ifNode: IfNode = {\r\n      type: NodeTypes.IF,\r\n      loc: node.loc,\r\n      branches: [branch]\r\n    }\r\n    context.replaceNode(ifNode)\r\n    if (processCodegen) {\r\n      return processCodegen(ifNode, branch, true)\r\n    }\r\n  } else {\r\n    // locate the adjacent v-if\r\n    const siblings = context.parent!.children\r\n    const comments = []\r\n    let i = siblings.indexOf(node)\r\n    while (i-- >= -1) {\r\n      const sibling = siblings[i]\r\n      if (__DEV__ && sibling && sibling.type === NodeTypes.COMMENT) {\r\n        context.removeNode(sibling)\r\n        comments.unshift(sibling)\r\n        continue\r\n      }\r\n\r\n      if (\r\n        sibling &&\r\n        sibling.type === NodeTypes.TEXT &&\r\n        !sibling.content.trim().length\r\n      ) {\r\n        context.removeNode(sibling)\r\n        continue\r\n      }\r\n\r\n      if (sibling && sibling.type === NodeTypes.IF) {\r\n        // Check if v-else was followed by v-else-if\r\n        if (\r\n          dir.name === 'else-if' &&\r\n          sibling.branches[sibling.branches.length - 1].condition === undefined\r\n        ) {\r\n          context.onError(\r\n            createCompilerError(ErrorCodes.X_V_ELSE_NO_ADJACENT_IF, node.loc)\r\n          )\r\n        }\r\n\r\n        // move the node to the if node's branches\r\n        context.removeNode()\r\n        const branch = createIfBranch(node, dir)\r\n        if (\r\n          __DEV__ &&\r\n          comments.length &&\r\n          // #3619 ignore comments if the v-if is direct child of <transition>\r\n          !(\r\n            context.parent &&\r\n            context.parent.type === NodeTypes.ELEMENT &&\r\n            isBuiltInType(context.parent.tag, 'transition')\r\n          )\r\n        ) {\r\n          branch.children = [...comments, ...branch.children]\r\n        }\r\n\r\n        // check if user is forcing same key on different branches\r\n        if (__DEV__ || !__BROWSER__) {\r\n          const key = branch.userKey\r\n          if (key) {\r\n            sibling.branches.forEach(({ userKey }) => {\r\n              if (isSameKey(userKey, key)) {\r\n                context.onError(\r\n                  createCompilerError(\r\n                    ErrorCodes.X_V_IF_SAME_KEY,\r\n                    branch.userKey!.loc\r\n                  )\r\n                )\r\n              }\r\n            })\r\n          }\r\n        }\r\n\r\n        sibling.branches.push(branch)\r\n        const onExit = processCodegen && processCodegen(sibling, branch, false)\r\n        // since the branch was removed, it will not be traversed.\r\n        // make sure to traverse here.\r\n        traverseNode(branch, context)\r\n        // call on exit\r\n        if (onExit) onExit()\r\n        // make sure to reset currentNode after traversal to indicate this\r\n        // node has been removed.\r\n        context.currentNode = null\r\n      } else {\r\n        context.onError(\r\n          createCompilerError(ErrorCodes.X_V_ELSE_NO_ADJACENT_IF, node.loc)\r\n        )\r\n      }\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction createIfBranch(node: ElementNode, dir: DirectiveNode): IfBranchNode {\r\n  const isTemplateIf = node.tagType === ElementTypes.TEMPLATE\r\n  return {\r\n    type: NodeTypes.IF_BRANCH,\r\n    loc: node.loc,\r\n    condition: dir.name === 'else' ? undefined : dir.exp,\r\n    children: isTemplateIf && !findDir(node, 'for') ? node.children : [node],\r\n    userKey: findProp(node, `key`),\r\n    isTemplateIf\r\n  }\r\n}\r\n\r\nfunction createCodegenNodeForBranch(\r\n  branch: IfBranchNode,\r\n  keyIndex: number,\r\n  context: TransformContext\r\n): IfConditionalExpression | BlockCodegenNode | MemoExpression {\r\n  if (branch.condition) {\r\n    return createConditionalExpression(\r\n      branch.condition,\r\n      createChildrenCodegenNode(branch, keyIndex, context),\r\n      // make sure to pass in asBlock: true so that the comment node call\r\n      // closes the current block.\r\n      createCallExpression(context.helper(CREATE_COMMENT), [\r\n        __DEV__ ? '\"v-if\"' : '\"\"',\r\n        'true'\r\n      ])\r\n    ) as IfConditionalExpression\r\n  } else {\r\n    return createChildrenCodegenNode(branch, keyIndex, context)\r\n  }\r\n}\r\n\r\nfunction createChildrenCodegenNode(\r\n  branch: IfBranchNode,\r\n  keyIndex: number,\r\n  context: TransformContext\r\n): BlockCodegenNode | MemoExpression {\r\n  const { helper } = context\r\n  const keyProperty = createObjectProperty(\r\n    `key`,\r\n    createSimpleExpression(\r\n      `${keyIndex}`,\r\n      false,\r\n      locStub,\r\n      ConstantTypes.CAN_HOIST\r\n    )\r\n  )\r\n  const { children } = branch\r\n  const firstChild = children[0]\r\n  const needFragmentWrapper =\r\n    children.length !== 1 || firstChild.type !== NodeTypes.ELEMENT\r\n  if (needFragmentWrapper) {\r\n    if (children.length === 1 && firstChild.type === NodeTypes.FOR) {\r\n      // optimize away nested fragments when child is a ForNode\r\n      const vnodeCall = firstChild.codegenNode!\r\n      injectProp(vnodeCall, keyProperty, context)\r\n      return vnodeCall\r\n    } else {\r\n      let patchFlag = PatchFlags.STABLE_FRAGMENT\r\n      let patchFlagText = PatchFlagNames[PatchFlags.STABLE_FRAGMENT]\r\n      // check if the fragment actually contains a single valid child with\r\n      // the rest being comments\r\n      if (\r\n        __DEV__ &&\r\n        !branch.isTemplateIf &&\r\n        children.filter(c => c.type !== NodeTypes.COMMENT).length === 1\r\n      ) {\r\n        patchFlag |= PatchFlags.DEV_ROOT_FRAGMENT\r\n        patchFlagText += `, ${PatchFlagNames[PatchFlags.DEV_ROOT_FRAGMENT]}`\r\n      }\r\n\r\n      return createVNodeCall(\r\n        context,\r\n        helper(FRAGMENT),\r\n        createObjectExpression([keyProperty]),\r\n        children,\r\n        patchFlag + (__DEV__ ? ` /* ${patchFlagText} */` : ``),\r\n        undefined,\r\n        undefined,\r\n        true,\r\n        false,\r\n        false /* isComponent */,\r\n        branch.loc\r\n      )\r\n    }\r\n  } else {\r\n    const ret = (firstChild as ElementNode).codegenNode as\r\n      | BlockCodegenNode\r\n      | MemoExpression\r\n    const vnodeCall = getMemoedVNodeCall(ret)\r\n    // Change createVNode to createBlock.\r\n    if (vnodeCall.type === NodeTypes.VNODE_CALL) {\r\n      makeBlock(vnodeCall, context)\r\n    }\r\n    // inject branch key\r\n    injectProp(vnodeCall, keyProperty, context)\r\n    return ret\r\n  }\r\n}\r\n\r\nfunction isSameKey(\r\n  a: AttributeNode | DirectiveNode | undefined,\r\n  b: AttributeNode | DirectiveNode\r\n): boolean {\r\n  if (!a || a.type !== b.type) {\r\n    return false\r\n  }\r\n  if (a.type === NodeTypes.ATTRIBUTE) {\r\n    if (a.value!.content !== (b as AttributeNode).value!.content) {\r\n      return false\r\n    }\r\n  } else {\r\n    // directive\r\n    const exp = a.exp!\r\n    const branchExp = (b as DirectiveNode).exp!\r\n    if (exp.type !== branchExp.type) {\r\n      return false\r\n    }\r\n    if (\r\n      exp.type !== NodeTypes.SIMPLE_EXPRESSION ||\r\n      exp.isStatic !== (branchExp as SimpleExpressionNode).isStatic ||\r\n      exp.content !== (branchExp as SimpleExpressionNode).content\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction getParentCondition(\r\n  node: IfConditionalExpression | CacheExpression\r\n): IfConditionalExpression {\r\n  while (true) {\r\n    if (node.type === NodeTypes.JS_CONDITIONAL_EXPRESSION) {\r\n      if (node.alternate.type === NodeTypes.JS_CONDITIONAL_EXPRESSION) {\r\n        node = node.alternate\r\n      } else {\r\n        return node\r\n      }\r\n    } else if (node.type === NodeTypes.JS_CACHE_EXPRESSION) {\r\n      node = node.value as IfConditionalExpression\r\n    }\r\n  }\r\n}\r\n","import { NodeTransform } from '../transform'\r\nimport {\r\n  NodeTypes,\r\n  CompoundExpressionNode,\r\n  createCallExpression,\r\n  CallExpression,\r\n  ElementTypes,\r\n  ConstantTypes,\r\n  createCompoundExpression\r\n} from '../ast'\r\nimport { isText } from '../utils'\r\nimport { CREATE_TEXT } from '../runtimeHelpers'\r\nimport { PatchFlags, PatchFlagNames } from '@vue/shared'\r\nimport { getConstantType } from './hoistStatic'\r\n\r\n// Merge adjacent text nodes and expressions into a single expression\r\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\r\nexport const transformText: NodeTransform = (node, context) => {\r\n  if (\r\n    node.type === NodeTypes.ROOT ||\r\n    node.type === NodeTypes.ELEMENT ||\r\n    node.type === NodeTypes.FOR ||\r\n    node.type === NodeTypes.IF_BRANCH\r\n  ) {\r\n    // perform the transform on node exit so that all expressions have already\r\n    // been processed.\r\n    return () => {\r\n      const children = node.children\r\n      let currentContainer: CompoundExpressionNode | undefined = undefined\r\n      let hasText = false\r\n\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i]\r\n        if (isText(child)) {\r\n          hasText = true\r\n          for (let j = i + 1; j < children.length; j++) {\r\n            const next = children[j]\r\n            if (isText(next)) {\r\n              if (!currentContainer) {\r\n                currentContainer = children[i] = createCompoundExpression(\r\n                  [child],\r\n                  child.loc\r\n                )\r\n              }\r\n              // merge adjacent text node into current\r\n              currentContainer.children.push(` + `, next)\r\n              children.splice(j, 1)\r\n              j--\r\n            } else {\r\n              currentContainer = undefined\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        !hasText ||\r\n        // if this is a plain element with a single text child, leave it\r\n        // as-is since the runtime has dedicated fast path for this by directly\r\n        // setting textContent of the element.\r\n        // for component root it's always normalized anyway.\r\n        (children.length === 1 &&\r\n          (node.type === NodeTypes.ROOT ||\r\n            (node.type === NodeTypes.ELEMENT &&\r\n              node.tagType === ElementTypes.ELEMENT &&\r\n              // #3756\r\n              // custom directives can potentially add DOM elements arbitrarily,\r\n              // we need to avoid setting textContent of the element at runtime\r\n              // to avoid accidentally overwriting the DOM elements added\r\n              // by the user through custom directives.\r\n              !node.props.find(\r\n                p =>\r\n                  p.type === NodeTypes.DIRECTIVE &&\r\n                  !context.directiveTransforms[p.name]\r\n              ) &&\r\n              // in compat mode, <template> tags with no special directives\r\n              // will be rendered as a fragment so its children must be\r\n              // converted into vnodes.\r\n              !(__COMPAT__ && node.tag === 'template'))))\r\n      ) {\r\n        return\r\n      }\r\n\r\n      // pre-convert text nodes into createTextVNode(text) calls to avoid\r\n      // runtime normalization.\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i]\r\n        if (isText(child) || child.type === NodeTypes.COMPOUND_EXPRESSION) {\r\n          const callArgs: CallExpression['arguments'] = []\r\n          // createTextVNode defaults to single whitespace, so if it is a\r\n          // single space the code could be an empty call to save bytes.\r\n          if (child.type !== NodeTypes.TEXT || child.content !== ' ') {\r\n            callArgs.push(child)\r\n          }\r\n          // mark dynamic text with flag so it gets patched inside a block\r\n          if (\r\n            !context.ssr &&\r\n            getConstantType(child, context) === ConstantTypes.NOT_CONSTANT\r\n          ) {\r\n            callArgs.push(\r\n              PatchFlags.TEXT +\r\n                (__DEV__ ? ` /* ${PatchFlagNames[PatchFlags.TEXT]} */` : ``)\r\n            )\r\n          }\r\n          children[i] = {\r\n            type: NodeTypes.TEXT_CALL,\r\n            content: child,\r\n            loc: child.loc,\r\n            codegenNode: createCallExpression(\r\n              context.helper(CREATE_TEXT),\r\n              callArgs\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NodeTransform } from '../transform'\r\nimport { findDir } from '../utils'\r\nimport { ElementNode, ForNode, IfNode, NodeTypes } from '../ast'\r\nimport { SET_BLOCK_TRACKING } from '../runtimeHelpers'\r\n\r\nconst seen = new WeakSet()\r\n\r\nexport const transformOnce: NodeTransform = (node, context) => {\r\n  if (node.type === NodeTypes.ELEMENT && findDir(node, 'once', true)) {\r\n    if (seen.has(node) || context.inVOnce) {\r\n      return\r\n    }\r\n    seen.add(node)\r\n    context.inVOnce = true\r\n    context.helper(SET_BLOCK_TRACKING)\r\n    return () => {\r\n      context.inVOnce = false\r\n      const cur = context.currentNode as ElementNode | IfNode | ForNode\r\n      if (cur.codegenNode) {\r\n        cur.codegenNode = context.cache(cur.codegenNode, true /* isVNode */)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { RESOLVE_FILTER } from '../runtimeHelpers'\r\nimport {\r\n  AttributeNode,\r\n  DirectiveNode,\r\n  NodeTransform,\r\n  NodeTypes,\r\n  SimpleExpressionNode,\r\n  toValidAssetId,\r\n  TransformContext\r\n} from '@vue/compiler-core'\r\nimport {\r\n  CompilerDeprecationTypes,\r\n  isCompatEnabled,\r\n  warnDeprecation\r\n} from './compatConfig'\r\nimport { ExpressionNode } from '../ast'\r\n\r\nconst validDivisionCharRE = /[\\w).+\\-_$\\]]/\r\n\r\nexport const transformFilter: NodeTransform = (node, context) => {\r\n  if (!isCompatEnabled(CompilerDeprecationTypes.COMPILER_FILTERS, context)) {\r\n    return\r\n  }\r\n\r\n  if (node.type === NodeTypes.INTERPOLATION) {\r\n    // filter rewrite is applied before expression transform so only\r\n    // simple expressions are possible at this stage\r\n    rewriteFilter(node.content, context)\r\n  }\r\n\r\n  if (node.type === NodeTypes.ELEMENT) {\r\n    node.props.forEach((prop: AttributeNode | DirectiveNode) => {\r\n      if (\r\n        prop.type === NodeTypes.DIRECTIVE &&\r\n        prop.name !== 'for' &&\r\n        prop.exp\r\n      ) {\r\n        rewriteFilter(prop.exp, context)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction rewriteFilter(node: ExpressionNode, context: TransformContext) {\r\n  if (node.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n    parseFilter(node, context)\r\n  } else {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n      const child = node.children[i]\r\n      if (typeof child !== 'object') continue\r\n      if (child.type === NodeTypes.SIMPLE_EXPRESSION) {\r\n        parseFilter(child, context)\r\n      } else if (child.type === NodeTypes.COMPOUND_EXPRESSION) {\r\n        rewriteFilter(node, context)\r\n      } else if (child.type === NodeTypes.INTERPOLATION) {\r\n        rewriteFilter(child.content, context)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseFilter(node: SimpleExpressionNode, context: TransformContext) {\r\n  const exp = node.content\r\n  let inSingle = false\r\n  let inDouble = false\r\n  let inTemplateString = false\r\n  let inRegex = false\r\n  let curly = 0\r\n  let square = 0\r\n  let paren = 0\r\n  let lastFilterIndex = 0\r\n  let c,\r\n    prev,\r\n    i: number,\r\n    expression,\r\n    filters: string[] = []\r\n\r\n  for (i = 0; i < exp.length; i++) {\r\n    prev = c\r\n    c = exp.charCodeAt(i)\r\n    if (inSingle) {\r\n      if (c === 0x27 && prev !== 0x5c) inSingle = false\r\n    } else if (inDouble) {\r\n      if (c === 0x22 && prev !== 0x5c) inDouble = false\r\n    } else if (inTemplateString) {\r\n      if (c === 0x60 && prev !== 0x5c) inTemplateString = false\r\n    } else if (inRegex) {\r\n      if (c === 0x2f && prev !== 0x5c) inRegex = false\r\n    } else if (\r\n      c === 0x7c && // pipe\r\n      exp.charCodeAt(i + 1) !== 0x7c &&\r\n      exp.charCodeAt(i - 1) !== 0x7c &&\r\n      !curly &&\r\n      !square &&\r\n      !paren\r\n    ) {\r\n      if (expression === undefined) {\r\n        // first filter, end of expression\r\n        lastFilterIndex = i + 1\r\n        expression = exp.slice(0, i).trim()\r\n      } else {\r\n        pushFilter()\r\n      }\r\n    } else {\r\n      switch (c) {\r\n        case 0x22:\r\n          inDouble = true\r\n          break // \"\r\n        case 0x27:\r\n          inSingle = true\r\n          break // '\r\n        case 0x60:\r\n          inTemplateString = true\r\n          break // `\r\n        case 0x28:\r\n          paren++\r\n          break // (\r\n        case 0x29:\r\n          paren--\r\n          break // )\r\n        case 0x5b:\r\n          square++\r\n          break // [\r\n        case 0x5d:\r\n          square--\r\n          break // ]\r\n        case 0x7b:\r\n          curly++\r\n          break // {\r\n        case 0x7d:\r\n          curly--\r\n          break // }\r\n      }\r\n      if (c === 0x2f) {\r\n        // /\r\n        let j = i - 1\r\n        let p\r\n        // find first non-whitespace prev char\r\n        for (; j >= 0; j--) {\r\n          p = exp.charAt(j)\r\n          if (p !== ' ') break\r\n        }\r\n        if (!p || !validDivisionCharRE.test(p)) {\r\n          inRegex = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (expression === undefined) {\r\n    expression = exp.slice(0, i).trim()\r\n  } else if (lastFilterIndex !== 0) {\r\n    pushFilter()\r\n  }\r\n\r\n  function pushFilter() {\r\n    filters.push(exp.slice(lastFilterIndex, i).trim())\r\n    lastFilterIndex = i + 1\r\n  }\r\n\r\n  if (filters.length) {\r\n    __DEV__ &&\r\n      warnDeprecation(\r\n        CompilerDeprecationTypes.COMPILER_FILTERS,\r\n        context,\r\n        node.loc\r\n      )\r\n    for (i = 0; i < filters.length; i++) {\r\n      expression = wrapFilter(expression, filters[i], context)\r\n    }\r\n    node.content = expression\r\n  }\r\n}\r\n\r\nfunction wrapFilter(\r\n  exp: string,\r\n  filter: string,\r\n  context: TransformContext\r\n): string {\r\n  context.helper(RESOLVE_FILTER)\r\n  const i = filter.indexOf('(')\r\n  if (i < 0) {\r\n    context.filters!.add(filter)\r\n    return `${toValidAssetId(filter, 'filter')}(${exp})`\r\n  } else {\r\n    const name = filter.slice(0, i)\r\n    const args = filter.slice(i + 1)\r\n    context.filters!.add(name)\r\n    return `${toValidAssetId(name, 'filter')}(${exp}${\r\n      args !== ')' ? ',' + args : args\r\n    }`\r\n  }\r\n}\r\n","import { NodeTransform } from '../transform'\r\nimport { findDir, makeBlock } from '../utils'\r\nimport {\r\n  createCallExpression,\r\n  createFunctionExpression,\r\n  ElementTypes,\r\n  MemoExpression,\r\n  NodeTypes,\r\n  PlainElementNode\r\n} from '../ast'\r\nimport { WITH_MEMO } from '../runtimeHelpers'\r\n\r\nconst seen = new WeakSet()\r\n\r\nexport const transformMemo: NodeTransform = (node, context) => {\r\n  if (node.type === NodeTypes.ELEMENT) {\r\n    const dir = findDir(node, 'memo')\r\n    if (!dir || seen.has(node)) {\r\n      return\r\n    }\r\n    seen.add(node)\r\n    return () => {\r\n      const codegenNode =\r\n        node.codegenNode ||\r\n        (context.currentNode as PlainElementNode).codegenNode\r\n      if (codegenNode && codegenNode.type === NodeTypes.VNODE_CALL) {\r\n        // non-component sub tree should be turned into a block\r\n        if (node.tagType !== ElementTypes.COMPONENT) {\r\n          makeBlock(codegenNode, context)\r\n        }\r\n        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [\r\n          dir.exp!,\r\n          createFunctionExpression(undefined, codegenNode),\r\n          `_cache`,\r\n          String(context.cached++)\r\n        ]) as MemoExpression\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CompilerOptions } from './options'\r\nimport { baseParse } from './parse'\r\nimport { transform, NodeTransform, DirectiveTransform } from './transform'\r\nimport { generate, CodegenResult } from './codegen'\r\nimport { RootNode } from './ast'\r\nimport { isString, extend } from '@vue/shared'\r\nimport { transformIf } from './transforms/vIf'\r\nimport { transformFor } from './transforms/vFor'\r\nimport { transformExpression } from './transforms/transformExpression'\r\nimport { transformSlotOutlet } from './transforms/transformSlotOutlet'\r\nimport { transformElement } from './transforms/transformElement'\r\nimport { transformOn } from './transforms/vOn'\r\nimport { transformBind } from './transforms/vBind'\r\nimport { trackSlotScopes, trackVForSlotScopes } from './transforms/vSlot'\r\nimport { transformText } from './transforms/transformText'\r\nimport { transformOnce } from './transforms/vOnce'\r\nimport { transformModel } from './transforms/vModel'\r\nimport { transformFilter } from './compat/transformFilter'\r\nimport { defaultOnError, createCompilerError, ErrorCodes } from './errors'\r\nimport { transformMemo } from './transforms/vMemo'\r\n\r\nexport type TransformPreset = [\r\n  NodeTransform[],\r\n  Record<string, DirectiveTransform>\r\n]\r\n\r\nexport function getBaseTransformPreset(\r\n  prefixIdentifiers?: boolean\r\n): TransformPreset {\r\n  return [\r\n    [\r\n      transformOnce,\r\n      transformIf,\r\n      transformMemo,\r\n      transformFor,\r\n      ...(__COMPAT__ ? [transformFilter] : []),\r\n      ...(!__BROWSER__ && prefixIdentifiers\r\n        ? [\r\n            // order is important\r\n            trackVForSlotScopes,\r\n            transformExpression\r\n          ]\r\n        : __BROWSER__ && __DEV__\r\n        ? [transformExpression]\r\n        : []),\r\n      transformSlotOutlet,\r\n      transformElement,\r\n      trackSlotScopes,\r\n      transformText\r\n    ],\r\n    {\r\n      on: transformOn,\r\n      bind: transformBind,\r\n      model: transformModel\r\n    }\r\n  ]\r\n}\r\n\r\n// we name it `baseCompile` so that higher order compilers like\r\n// @vue/compiler-dom can export `compile` while re-exporting everything else.\r\nexport function baseCompile(\r\n  template: string | RootNode,\r\n  options: CompilerOptions = {}\r\n): CodegenResult {\r\n  const onError = options.onError || defaultOnError\r\n  const isModuleMode = options.mode === 'module'\r\n  /* istanbul ignore if */\r\n  if (__BROWSER__) {\r\n    if (options.prefixIdentifiers === true) {\r\n      onError(createCompilerError(ErrorCodes.X_PREFIX_ID_NOT_SUPPORTED))\r\n    } else if (isModuleMode) {\r\n      onError(createCompilerError(ErrorCodes.X_MODULE_MODE_NOT_SUPPORTED))\r\n    }\r\n  }\r\n\r\n  const prefixIdentifiers =\r\n    !__BROWSER__ && (options.prefixIdentifiers === true || isModuleMode)\r\n  if (!prefixIdentifiers && options.cacheHandlers) {\r\n    onError(createCompilerError(ErrorCodes.X_CACHE_HANDLER_NOT_SUPPORTED))\r\n  }\r\n  if (options.scopeId && !isModuleMode) {\r\n    onError(createCompilerError(ErrorCodes.X_SCOPE_ID_NOT_SUPPORTED))\r\n  }\r\n\r\n  const ast = isString(template) ? baseParse(template, options) : template\r\n  const [nodeTransforms, directiveTransforms] =\r\n    getBaseTransformPreset(prefixIdentifiers)\r\n\r\n  if (!__BROWSER__ && options.isTS) {\r\n    const { expressionPlugins } = options\r\n    if (!expressionPlugins || !expressionPlugins.includes('typescript')) {\r\n      options.expressionPlugins = [...(expressionPlugins || []), 'typescript']\r\n    }\r\n  }\r\n\r\n  transform(\r\n    ast,\r\n    extend({}, options, {\r\n      prefixIdentifiers,\r\n      nodeTransforms: [\r\n        ...nodeTransforms,\r\n        ...(options.nodeTransforms || []) // user transforms\r\n      ],\r\n      directiveTransforms: extend(\r\n        {},\r\n        directiveTransforms,\r\n        options.directiveTransforms || {} // user transforms\r\n      )\r\n    })\r\n  )\r\n\r\n  return generate(\r\n    ast,\r\n    extend({}, options, {\r\n      prefixIdentifiers\r\n    })\r\n  )\r\n}\r\n"],"names":["camelize","isText","seen"],"mappings":"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"}